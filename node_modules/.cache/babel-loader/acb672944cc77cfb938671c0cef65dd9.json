{"ast":null,"code":"'use client';\n\nimport { useId } from \"./chunk-6B2YUEGK.mjs\";\nimport { useControllableProp } from \"./chunk-7JSBRQFI.mjs\";\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\"; // src/use-disclosure.ts\n\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  const id = useId(idProp, \"disclosure\");\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return { ...props2,\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props2.onClick, onToggle)\n      };\n    },\n    getDisclosureProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return { ...props2,\n        hidden: !isOpen,\n        id\n      };\n    }\n  };\n}\n\nexport { useDisclosure };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-disclosure.ts"],"names":["props"],"mappings":";;;;;;AAAA,SAAS,eAAT,QAAgC,kBAAhC;AAIA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;;AAUO,SAAS,aAAT,GAAuD;AAAA,MAAhC,KAAgC,uEAAJ,EAAI;AAC5D,QAAM;AACJ,IAAA,OAAA,EAAS,WADL;AAEJ,IAAA,MAAA,EAAQ,UAFJ;AAGJ,IAAA,MAAA,EAAQ,UAHJ;AAIJ,IAAA,EAAA,EAAI;AAJA,MAKF,KALJ;AAOA,QAAM,qBAAA,GAAwB,cAAA,CAAe,UAAf,CAA9B;AACA,QAAM,sBAAA,GAAyB,cAAA,CAAe,WAAf,CAA/B;AACA,QAAM,CAAC,WAAD,EAAc,SAAd,IAA2B,QAAA,CAAS,KAAA,CAAM,aAAN,IAAuB,KAAhC,CAAjC;AACA,QAAM,CAAC,YAAD,EAAe,MAAf,IAAyB,mBAAA,CAAoB,UAApB,EAAgC,WAAhC,CAA/B;AAEA,QAAM,EAAA,GAAK,KAAA,CAAM,MAAN,EAAc,YAAd,CAAX;AAEA,QAAM,OAAA,GAAU,WAAA,CAAY,MAAM;AAChC,QAAI,CAAC,YAAL,EAAmB;AACjB,MAAA,SAAA,CAAU,KAAV,CAAA;AACF;;AACA,IAAA,sBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,EAAA;AACF,GALgB,EAKb,CAAC,YAAD,EAAe,sBAAf,CALa,CAAhB;AAOA,QAAM,MAAA,GAAS,WAAA,CAAY,MAAM;AAC/B,QAAI,CAAC,YAAL,EAAmB;AACjB,MAAA,SAAA,CAAU,IAAV,CAAA;AACF;;AACA,IAAA,qBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,EAAA;AACF,GALe,EAKZ,CAAC,YAAD,EAAe,qBAAf,CALY,CAAf;AAOA,QAAM,QAAA,GAAW,WAAA,CAAY,MAAM;AACjC,UAAM,MAAA,GAAS,MAAA,GAAS,OAAT,GAAmB,MAAlC;AACA,IAAA,MAAA;AACF,GAHiB,EAGd,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAHc,CAAjB;AAKA,SAAO;AACL,IAAA,MAAA,EAAQ,CAAC,CAAC,MADL;AAEL,IAAA,MAFK;AAGL,IAAA,OAHK;AAIL,IAAA,QAJK;AAKL,IAAA,YALK;AAML,IAAA,cAAA,EAAgB;AAAA,UAACA,MAAD,uEAAc,EAAd;AAAA,aAAsB,EACpC,GAAG,MADiC;AAEpC,yBAAiB,MAFmB;AAGpC,yBAAiB,EAHmB;AAIpC,QAAA,OAAA,EAAS,eAAA,CAAgBA,MAAAA,CAAM,OAAtB,EAA+B,QAA/B;AAJ2B,OAAtB;AAAA,KANX;AAYL,IAAA,kBAAA,EAAoB;AAAA,UAACA,MAAD,uEAAc,EAAd;AAAA,aAAsB,EACxC,GAAG,MADqC;AAExC,QAAA,MAAA,EAAQ,CAAC,MAF+B;AAGxC,QAAA;AAHwC,OAAtB;AAAA;AAZf,GAAP;AAkBF","sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\nimport { useCallbackRef } from \"./use-callback-ref\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp)\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp)\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onClosePropCallbackRef?.()\n  }, [isControlled, onClosePropCallbackRef])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenPropCallbackRef?.()\n  }, [isControlled, onOpenPropCallbackRef])\n\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}