{"ast":null,"code":"'use client';\n\nimport { CheckboxGroupProvider } from \"./chunk-LYGBQ47X.mjs\";\nimport { useCheckboxGroup } from \"./chunk-TOQK4WO2.mjs\"; // src/checkbox-group.tsx\n\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction CheckboxGroup(props) {\n  const {\n    colorScheme,\n    size,\n    variant,\n    children,\n    isDisabled\n  } = props;\n  const {\n    value,\n    onChange\n  } = useCheckboxGroup(props);\n  const group = useMemo(() => ({\n    size,\n    onChange,\n    colorScheme,\n    value,\n    variant,\n    isDisabled\n  }), [size, onChange, colorScheme, value, variant, isDisabled]);\n  return /* @__PURE__ */jsx(CheckboxGroupProvider, {\n    value: group,\n    children\n  });\n}\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\nexport { CheckboxGroup };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/checkbox/src/checkbox-group.tsx"],"names":[],"mappings":";;;;;AACA,SAAS,OAAT,QAAwB,OAAxB;AAiCS,SAAA,GAAA,QAAA,mBAAA;;AAhBF,SAAS,aAAT,CAAuB,KAAvB,EAAkD;AACvD,QAAM;AAAE,IAAA,WAAF;AAAe,IAAA,IAAf;AAAqB,IAAA,OAArB;AAA8B,IAAA,QAA9B;AAAwC,IAAA;AAAxC,MAAuD,KAA7D;AACA,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAsB,gBAAA,CAAiB,KAAjB,CAA5B;AAEA,QAAM,KAAA,GAAQ,OAAA,CACZ,OAAO;AACL,IAAA,IADK;AAEL,IAAA,QAFK;AAGL,IAAA,WAHK;AAIL,IAAA,KAJK;AAKL,IAAA,OALK;AAML,IAAA;AANK,GAAP,CADY,EASZ,CAAC,IAAD,EAAO,QAAP,EAAiB,WAAjB,EAA8B,KAA9B,EAAqC,OAArC,EAA8C,UAA9C,CATY,CAAd;AAYA,SAAO,eAAA,GAAA,CAAC,qBAAD,EAAC;AAAsB,IAAA,KAAA,EAAO,KAA7B;AAAoC,IAAA;AAApC,GAAD,CAAP;AACF;;AAEA,aAAA,CAAc,WAAd,GAA4B,eAA5B","sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\nimport { CheckboxGroupProvider } from \"./checkbox-context\"\nimport { UseCheckboxGroupProps } from \"./checkbox-types\"\nimport { useCheckboxGroup } from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps<\"Checkbox\">, \"orientation\"> {\n  children?: React.ReactNode\n}\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport function CheckboxGroup(props: CheckboxGroupProps) {\n  const { colorScheme, size, variant, children, isDisabled } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n      isDisabled,\n    }),\n    [size, onChange, colorScheme, value, variant, isDisabled],\n  )\n\n  return <CheckboxGroupProvider value={group} children={children} />\n}\n\nCheckboxGroup.displayName = \"CheckboxGroup\"\n"]},"metadata":{},"sourceType":"module"}