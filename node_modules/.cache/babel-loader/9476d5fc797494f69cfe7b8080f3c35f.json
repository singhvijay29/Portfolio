{"ast":null,"code":"'use client';\n\nimport { useToastOptionContext } from \"./chunk-3Y4YXCR2.mjs\";\nimport { createToastFn } from \"./chunk-HYCJNCPE.mjs\"; // src/use-toast.tsx\n\nimport { useChakra } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\n\nfunction useToast(options) {\n  const {\n    theme\n  } = useChakra();\n  const defaultOptions = useToastOptionContext();\n  return useMemo(() => createToastFn(theme.direction, { ...defaultOptions,\n    ...options\n  }), [options, theme.direction, defaultOptions]);\n}\n\nvar use_toast_default = useToast;\nexport { useToast, use_toast_default };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/toast/src/use-toast.tsx"],"names":[],"mappings":";;;;;AACA,SAAmC,SAAnC,QAAoD,mBAApD;AAIA,SAAS,OAAT,QAAwB,OAAxB;;AAgEO,SAAS,QAAT,CAAkB,OAAlB,EAAkE;AACvE,QAAM;AAAE,IAAA;AAAF,MAAY,SAAA,EAAlB;AACA,QAAM,cAAA,GAAiB,qBAAA,EAAvB;AAEA,SAAO,OAAA,CACL,MACE,aAAA,CAAc,KAAA,CAAM,SAApB,EAA+B,EAC7B,GAAG,cAD0B;AAE7B,OAAG;AAF0B,GAA/B,CAFG,EAML,CAAC,OAAD,EAAU,KAAA,CAAM,SAAhB,EAA2B,cAA3B,CANK,CAAP;AAQF;;AAEA,IAAO,iBAAA,GAAQ,QAAf","sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"]},"metadata":{},"sourceType":"module"}