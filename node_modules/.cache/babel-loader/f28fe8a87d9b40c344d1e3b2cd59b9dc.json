{"ast":null,"code":"'use client'; // src/use-steps.ts\n\nimport { useState } from \"react\";\n\nfunction useSteps() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    index = 0,\n    count\n  } = props;\n  const [activeStep, setActiveStep] = useState(index);\n  const maxStep = typeof count === \"number\" ? count - 1 : 0;\n  const activeStepPercent = activeStep / maxStep;\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n\n    isActiveStep(step) {\n      return step === activeStep;\n    },\n\n    isCompleteStep(step) {\n      return step < activeStep;\n    },\n\n    isIncompleteStep(step) {\n      return step > activeStep;\n    },\n\n    getStatus(step) {\n      if (step < activeStep) return \"complete\";\n      if (step > activeStep) return \"incomplete\";\n      return \"active\";\n    },\n\n    goToNext() {\n      setActiveStep(step => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1;\n      });\n    },\n\n    goToPrevious() {\n      setActiveStep(step => Math.max(0, step - 1));\n    }\n\n  };\n}\n\nexport { useSteps };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/stepper/src/use-steps.ts"],"names":[],"mappings":";;AAAA,SAAS,QAAT,QAAyB,OAAzB;;AASO,SAAS,QAAT,GAA6C;AAAA,MAA3B,KAA2B,uEAAJ,EAAI;AAClD,QAAM;AAAE,IAAA,KAAA,GAAQ,CAAV;AAAa,IAAA;AAAb,MAAuB,KAA7B;AAEA,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAA,CAAS,KAAT,CAApC;AAEA,QAAM,OAAA,GAAU,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAAA,GAAQ,CAApC,GAAwC,CAAxD;AACA,QAAM,iBAAA,GAAoB,UAAA,GAAa,OAAvC;AAEA,SAAO;AACL,IAAA,UADK;AAEL,IAAA,aAFK;AAGL,IAAA,iBAHK;;AAIL,IAAA,YAAA,CAAa,IAAb,EAA2B;AACzB,aAAO,IAAA,KAAS,UAAhB;AACF,KANK;;AAOL,IAAA,cAAA,CAAe,IAAf,EAA6B;AAC3B,aAAO,IAAA,GAAO,UAAd;AACF,KATK;;AAUL,IAAA,gBAAA,CAAiB,IAAjB,EAA+B;AAC7B,aAAO,IAAA,GAAO,UAAd;AACF,KAZK;;AAaL,IAAA,SAAA,CAAU,IAAV,EAAoC;AAClC,UAAI,IAAA,GAAO,UAAX,EAAuB,OAAO,UAAP;AACvB,UAAI,IAAA,GAAO,UAAX,EAAuB,OAAO,YAAP;AACvB,aAAO,QAAP;AACF,KAjBK;;AAkBL,IAAA,QAAA,GAAW;AACT,MAAA,aAAA,CAAe,IAAD,IAAU;AACtB,eAAO,OAAO,KAAP,KAAiB,QAAjB,GAA4B,IAAA,CAAK,GAAL,CAAS,KAAT,EAAgB,IAAA,GAAO,CAAvB,CAA5B,GAAwD,IAAA,GAAO,CAAtE;AACD,OAFD,CAAA;AAGF,KAtBK;;AAuBL,IAAA,YAAA,GAAe;AACb,MAAA,aAAA,CAAe,IAAD,IAAU,IAAA,CAAK,GAAL,CAAS,CAAT,EAAY,IAAA,GAAO,CAAnB,CAAxB,CAAA;AACF;;AAzBK,GAAP;AA2BF","sourcesContent":["import { useState } from \"react\"\n\nexport type UseStepsProps = {\n  index?: number\n  count?: number\n}\n\nexport type StepStatus = \"complete\" | \"active\" | \"incomplete\"\n\nexport function useSteps(props: UseStepsProps = {}) {\n  const { index = 0, count } = props\n\n  const [activeStep, setActiveStep] = useState(index)\n\n  const maxStep = typeof count === \"number\" ? count - 1 : 0\n  const activeStepPercent = activeStep / maxStep\n\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n    isActiveStep(step: number) {\n      return step === activeStep\n    },\n    isCompleteStep(step: number) {\n      return step < activeStep\n    },\n    isIncompleteStep(step: number) {\n      return step > activeStep\n    },\n    getStatus(step: number): StepStatus {\n      if (step < activeStep) return \"complete\"\n      if (step > activeStep) return \"incomplete\"\n      return \"active\"\n    },\n    goToNext() {\n      setActiveStep((step) => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1\n      })\n    },\n    goToPrevious() {\n      setActiveStep((step) => Math.max(0, step - 1))\n    },\n  }\n}\n\nexport type UseStepsReturn = ReturnType<typeof useSteps>\n"]},"metadata":{},"sourceType":"module"}