{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = _ref => {\n  let {\n    children,\n    initial,\n    isPresent,\n    onExitComplete,\n    custom,\n    presenceAffectsLayout,\n    mode\n  } = _ref;\n  const presenceChildren = useConstant(newChildrenMap);\n  const id = useId();\n  const context = useMemo(() => ({\n    id,\n    initial,\n    isPresent,\n    custom,\n    onExitComplete: childId => {\n      presenceChildren.set(childId, true);\n\n      for (const isComplete of presenceChildren.values()) {\n        if (!isComplete) return; // can stop searching when any is incomplete\n      }\n\n      onExitComplete && onExitComplete();\n    },\n    register: childId => {\n      presenceChildren.set(childId, false);\n      return () => presenceChildren.delete(childId);\n    }\n  }),\n  /**\n   * If the presence of a child affects the layout of the components around it,\n   * we want to make a new context value to ensure they get re-rendered\n   * so they can detect that layout change.\n   */\n  presenceAffectsLayout ? [Math.random()] : [isPresent]);\n  useMemo(() => {\n    presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n  }, [isPresent]);\n  /**\n   * If there's no `motion` components to fire exit animations, we want to remove this\n   * component immediately.\n   */\n\n  React.useEffect(() => {\n    !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();\n  }, [isPresent]);\n\n  if (mode === \"popLayout\") {\n    children = jsx(PopChild, {\n      isPresent: isPresent,\n      children: children\n    });\n  }\n\n  return jsx(PresenceContext.Provider, {\n    value: context,\n    children: children\n  });\n};\n\nfunction newChildrenMap() {\n  return new Map();\n}\n\nexport { PresenceChild };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs"],"names":["jsx","React","useId","useMemo","PresenceContext","useConstant","PopChild","PresenceChild","children","initial","isPresent","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","id","context","childId","set","isComplete","values","register","delete","Math","random","forEach","_","key","useEffect","size","Provider","value","Map"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,aAAa,GAAG,QAA4F;AAAA,MAA3F;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA,cAAhC;AAAgDC,IAAAA,MAAhD;AAAwDC,IAAAA,qBAAxD;AAA+EC,IAAAA;AAA/E,GAA2F;AAC9G,QAAMC,gBAAgB,GAAGV,WAAW,CAACW,cAAD,CAApC;AACA,QAAMC,EAAE,GAAGf,KAAK,EAAhB;AACA,QAAMgB,OAAO,GAAGf,OAAO,CAAC,OAAO;AAC3Bc,IAAAA,EAD2B;AAE3BR,IAAAA,OAF2B;AAG3BC,IAAAA,SAH2B;AAI3BE,IAAAA,MAJ2B;AAK3BD,IAAAA,cAAc,EAAGQ,OAAD,IAAa;AACzBJ,MAAAA,gBAAgB,CAACK,GAAjB,CAAqBD,OAArB,EAA8B,IAA9B;;AACA,WAAK,MAAME,UAAX,IAAyBN,gBAAgB,CAACO,MAAjB,EAAzB,EAAoD;AAChD,YAAI,CAACD,UAAL,EACI,OAF4C,CAEpC;AACf;;AACDV,MAAAA,cAAc,IAAIA,cAAc,EAAhC;AACH,KAZ0B;AAa3BY,IAAAA,QAAQ,EAAGJ,OAAD,IAAa;AACnBJ,MAAAA,gBAAgB,CAACK,GAAjB,CAAqBD,OAArB,EAA8B,KAA9B;AACA,aAAO,MAAMJ,gBAAgB,CAACS,MAAjB,CAAwBL,OAAxB,CAAb;AACH;AAhB0B,GAAP,CAAD;AAkBvB;AACJ;AACA;AACA;AACA;AACIN,EAAAA,qBAAqB,GAAG,CAACY,IAAI,CAACC,MAAL,EAAD,CAAH,GAAqB,CAAChB,SAAD,CAvBnB,CAAvB;AAwBAP,EAAAA,OAAO,CAAC,MAAM;AACVY,IAAAA,gBAAgB,CAACY,OAAjB,CAAyB,CAACC,CAAD,EAAIC,GAAJ,KAAYd,gBAAgB,CAACK,GAAjB,CAAqBS,GAArB,EAA0B,KAA1B,CAArC;AACH,GAFM,EAEJ,CAACnB,SAAD,CAFI,CAAP;AAGA;AACJ;AACA;AACA;;AACIT,EAAAA,KAAK,CAAC6B,SAAN,CAAgB,MAAM;AAClB,KAACpB,SAAD,IACI,CAACK,gBAAgB,CAACgB,IADtB,IAEIpB,cAFJ,IAGIA,cAAc,EAHlB;AAIH,GALD,EAKG,CAACD,SAAD,CALH;;AAMA,MAAII,IAAI,KAAK,WAAb,EAA0B;AACtBN,IAAAA,QAAQ,GAAGR,GAAG,CAACM,QAAD,EAAW;AAAEI,MAAAA,SAAS,EAAEA,SAAb;AAAwBF,MAAAA,QAAQ,EAAEA;AAAlC,KAAX,CAAd;AACH;;AACD,SAAQR,GAAG,CAACI,eAAe,CAAC4B,QAAjB,EAA2B;AAAEC,IAAAA,KAAK,EAAEf,OAAT;AAAkBV,IAAAA,QAAQ,EAAEA;AAA5B,GAA3B,CAAX;AACH,CA5CD;;AA6CA,SAASQ,cAAT,GAA0B;AACtB,SAAO,IAAIkB,GAAJ,EAAP;AACH;;AAED,SAAS3B,aAAT","sourcesContent":["import { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? [Math.random()] : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = jsx(PopChild, { isPresent: isPresent, children: children });\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n"]},"metadata":{},"sourceType":"module"}