{"ast":null,"code":"'use client'; // src/use-merge-refs.ts\n\nimport { useMemo } from \"react\";\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\n\nfunction useMergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n\n    return node => {\n      refs.forEach(ref => {\n        if (ref) assignRef(ref, node);\n      });\n    };\n  }, refs);\n}\n\nexport { assignRef, useMergeRefs };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-merge-refs.ts"],"names":[],"mappings":";;AAEA,SAAS,OAAT,QAAwB,OAAxB;;AAIO,SAAS,SAAT,CAA4B,GAA5B,EAA0D,KAA1D,EAAoE;AACzE,MAAI,GAAA,IAAO,IAAX,EAAiB;;AAEjB,MAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AAC7B,IAAA,GAAA,CAAI,KAAJ,CAAA;AACA;AACF;;AAEA,MAAI;AAEF,IAAA,GAAA,CAAI,OAAJ,GAAc,KAAd;AACF,GAHA,CAGA,OAAS,KAAT,EAAgB;AACd,UAAM,IAAI,KAAJ,CAAU,wBAAwB,KAAK,aAAa,GAAG,GAAvD,CAAN;AACF;AACF;;AAgBO,SAAS,YAAT,GAA+D;AAAA,oCAAnC,IAAmC;AAAnC,IAAA,IAAmC;AAAA;;AACpE,SAAO,OAAA,CAAQ,MAAM;AACnB,QAAI,IAAA,CAAK,KAAL,CAAY,GAAD,IAAS,GAAA,IAAO,IAA3B,CAAJ,EAAsC;AACpC,aAAO,IAAP;AACF;;AACA,WAAQ,IAAD,IAAa;AAClB,MAAA,IAAA,CAAK,OAAL,CAAc,GAAD,IAAS;AACpB,YAAI,GAAJ,EAAS,SAAA,CAAU,GAAV,EAAe,IAAf,CAAA;AACV,OAFD;AAGF,KAJA;AAKF,GATO,EASJ,IATI,CAAP;AAUF","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useMemo } from \"react\"\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-merge-refs\n */\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n"]},"metadata":{},"sourceType":"module"}