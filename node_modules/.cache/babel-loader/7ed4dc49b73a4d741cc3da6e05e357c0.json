{"ast":null,"code":"import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nconst svgMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n    onMount: (props, instance, _ref) => {\n      let {\n        renderState,\n        latestValues\n      } = _ref;\n      frame.read(() => {\n        try {\n          renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n        } catch (e) {\n          // Most likely trying to measure an unrendered element under Firefox\n          renderState.dimensions = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n          };\n        }\n      });\n      frame.render(() => {\n        buildSVGAttrs(renderState, latestValues, {\n          enableHardwareAcceleration: false\n        }, isSVGTag(instance.tagName), props.transformTemplate);\n        renderSVG(instance, renderState);\n      });\n    }\n  })\n};\nexport { svgMotionConfig };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs"],"names":["renderSVG","scrapeMotionValuesFromProps","makeUseVisualState","createSvgRenderState","buildSVGAttrs","isSVGTag","frame","svgMotionConfig","useVisualState","createRenderState","onMount","props","instance","renderState","latestValues","read","dimensions","getBBox","getBoundingClientRect","e","x","y","width","height","render","enableHardwareAcceleration","tagName","transformTemplate"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;AACA,SAASC,kBAAT,QAAmC,yCAAnC;AACA,SAASC,oBAAT,QAAqC,iCAArC;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,KAAT,QAAsB,2BAAtB;AAEA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,cAAc,EAAEN,kBAAkB,CAAC;AAC/BD,IAAAA,2BAA2B,EAAEA,2BADE;AAE/BQ,IAAAA,iBAAiB,EAAEN,oBAFY;AAG/BO,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,WAAoD;AAAA,UAAlC;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,OAAkC;AACzDR,MAAAA,KAAK,CAACS,IAAN,CAAW,MAAM;AACb,YAAI;AACAF,UAAAA,WAAW,CAACG,UAAZ,GACI,OAAOJ,QAAQ,CAACK,OAAhB,KACI,UADJ,GAEML,QAAQ,CAACK,OAAT,EAFN,GAGML,QAAQ,CAACM,qBAAT,EAJV;AAKH,SAND,CAOA,OAAOC,CAAP,EAAU;AACN;AACAN,UAAAA,WAAW,CAACG,UAAZ,GAAyB;AACrBI,YAAAA,CAAC,EAAE,CADkB;AAErBC,YAAAA,CAAC,EAAE,CAFkB;AAGrBC,YAAAA,KAAK,EAAE,CAHc;AAIrBC,YAAAA,MAAM,EAAE;AAJa,WAAzB;AAMH;AACJ,OAjBD;AAkBAjB,MAAAA,KAAK,CAACkB,MAAN,CAAa,MAAM;AACfpB,QAAAA,aAAa,CAACS,WAAD,EAAcC,YAAd,EAA4B;AAAEW,UAAAA,0BAA0B,EAAE;AAA9B,SAA5B,EAAmEpB,QAAQ,CAACO,QAAQ,CAACc,OAAV,CAA3E,EAA+Ff,KAAK,CAACgB,iBAArG,CAAb;AACA3B,QAAAA,SAAS,CAACY,QAAD,EAAWC,WAAX,CAAT;AACH,OAHD;AAIH;AA1B8B,GAAD;AADd,CAAxB;AA+BA,SAASN,eAAT","sourcesContent":["import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n"]},"metadata":{},"sourceType":"module"}