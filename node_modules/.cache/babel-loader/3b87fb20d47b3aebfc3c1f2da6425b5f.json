{"ast":null,"code":"'use client'; // src/storage-manager.ts\n\nvar STORAGE_KEY = \"chakra-ui-color-mode\";\n\nfunction createLocalStorageManager(key) {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n\n    get(init) {\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      let value;\n\n      try {\n        value = localStorage.getItem(key) || init;\n      } catch (e) {}\n\n      return value || init;\n    },\n\n    set(value) {\n      try {\n        localStorage.setItem(key, value);\n      } catch (e) {}\n    }\n\n  };\n}\n\nvar localStorageManager = createLocalStorageManager(STORAGE_KEY);\n\nfunction parseCookie(cookie, key) {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));\n  return match == null ? void 0 : match[2];\n}\n\nfunction createCookieStorageManager(key, cookie) {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n\n    get(init) {\n      if (cookie) return parseCookie(cookie, key);\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      return parseCookie(document.cookie, key) || init;\n    },\n\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`;\n    }\n\n  };\n}\n\nvar cookieStorageManager = createCookieStorageManager(STORAGE_KEY);\n\nvar cookieStorageManagerSSR = cookie => createCookieStorageManager(STORAGE_KEY, cookie);\n\nexport { STORAGE_KEY, createLocalStorageManager, localStorageManager, createCookieStorageManager, cookieStorageManager, cookieStorageManagerSSR };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/color-mode/src/storage-manager.ts"],"names":[],"mappings":";;AAEO,IAAM,WAAA,GAAc,sBAApB;;AAWA,SAAS,yBAAT,CAAmC,GAAnC,EAAgE;AACrE,SAAO;AACL,IAAA,GAAA,EAAK,KADA;AAEL,IAAA,IAAA,EAAM,cAFD;;AAGL,IAAA,GAAA,CAAI,IAAJ,EAAW;AACT,UAAI,EAAC,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,QAAb,CAAJ,EAA2B,OAAO,IAAP;AAC3B,UAAI,KAAJ;;AACA,UAAI;AACF,QAAA,KAAA,GAAQ,YAAA,CAAa,OAAb,CAAqB,GAArB,KAA6B,IAArC;AACF,OAFA,CAEA,OAAS,CAAT,EAAE,CAEF;;AAEA,aAAO,KAAA,IAAS,IAAhB;AACF,KAbK;;AAcL,IAAA,GAAA,CAAI,KAAJ,EAAW;AACT,UAAI;AACF,QAAA,YAAA,CAAa,OAAb,CAAqB,GAArB,EAA0B,KAA1B;AACF,OAFA,CAEA,OAAS,CAAT,EAAE,CAEF;AACF;;AApBK,GAAP;AAsBF;;AAEO,IAAM,mBAAA,GAAsB,yBAAA,CAA0B,WAA1B,CAA5B;;AAEP,SAAS,WAAT,CAAqB,MAArB,EAAqC,GAArC,EAAkE;AAChE,QAAM,KAAA,GAAQ,MAAA,CAAO,KAAP,CAAa,IAAI,MAAJ,CAAW,QAAQ,GAAA,UAAnB,CAAb,CAAd;AACA,SAAO,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAQ,CAAR,CAAP;AACF;;AAEO,SAAS,0BAAT,CACL,GADK,EAEL,MAFK,EAGW;AAChB,SAAO;AACL,IAAA,GAAA,EAAK,CAAC,CAAC,MADF;AAEL,IAAA,IAAA,EAAM,QAFD;;AAGL,IAAA,GAAA,CAAI,IAAJ,EAA2B;AACzB,UAAI,MAAJ,EAAY,OAAO,WAAA,CAAY,MAAZ,EAAoB,GAApB,CAAP;AACZ,UAAI,EAAC,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,QAAb,CAAJ,EAA2B,OAAO,IAAP;AAC3B,aAAO,WAAA,CAAY,QAAA,CAAS,MAArB,EAA6B,GAA7B,CAAA,IAAqC,IAA5C;AACF,KAPK;;AAQL,IAAA,GAAA,CAAI,KAAJ,EAAW;AACT,MAAA,QAAA,CAAS,MAAT,GAAkB,GAAG,GAAA,IAAO,KAAA,4BAA5B;AACF;;AAVK,GAAP;AAYF;;AAEO,IAAM,oBAAA,GAAuB,0BAAA,CAA2B,WAA3B,CAA7B;;AAEA,IAAM,uBAAA,GAA2B,MAAD,IACrC,0BAAA,CAA2B,WAA3B,EAAwC,MAAxC,CADK","sourcesContent":["import { ColorMode } from \"./color-mode-types\"\n\nexport const STORAGE_KEY = \"chakra-ui-color-mode\"\n\ntype MaybeColorMode = ColorMode | undefined\n\nexport interface StorageManager {\n  type: \"cookie\" | \"localStorage\"\n  ssr?: boolean\n  get(init?: ColorMode): MaybeColorMode\n  set(value: ColorMode | \"system\"): void\n}\n\nexport function createLocalStorageManager(key: string): StorageManager {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n    get(init?) {\n      if (!globalThis?.document) return init\n      let value: any\n      try {\n        value = localStorage.getItem(key) || init\n      } catch (e) {\n        // no op\n      }\n\n      return value || init\n    },\n    set(value) {\n      try {\n        localStorage.setItem(key, value)\n      } catch (e) {\n        // no op\n      }\n    },\n  }\n}\n\nexport const localStorageManager = createLocalStorageManager(STORAGE_KEY)\n\nfunction parseCookie(cookie: string, key: string): MaybeColorMode {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`))\n  return match?.[2] as MaybeColorMode\n}\n\nexport function createCookieStorageManager(\n  key: string,\n  cookie?: string,\n): StorageManager {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n    get(init?): MaybeColorMode {\n      if (cookie) return parseCookie(cookie, key)\n      if (!globalThis?.document) return init\n      return parseCookie(document.cookie, key) || init\n    },\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`\n    },\n  }\n}\n\nexport const cookieStorageManager = createCookieStorageManager(STORAGE_KEY)\n\nexport const cookieStorageManagerSSR = (cookie: string) =>\n  createCookieStorageManager(STORAGE_KEY, cookie)\n"]},"metadata":{},"sourceType":"module"}