{"ast":null,"code":"import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\n\nclass HTMLVisualElement extends DOMVisualElement {\n  constructor() {\n    super(...arguments);\n    this.type = \"html\";\n  }\n\n  readValueFromInstance(instance, key) {\n    if (transformProps.has(key)) {\n      const defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    } else {\n      const computedStyle = getComputedStyle(instance);\n      const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n      return typeof value === \"string\" ? value.trim() : value;\n    }\n  }\n\n  measureInstanceViewportBox(instance, _ref) {\n    let {\n      transformPagePoint\n    } = _ref;\n    return measureViewportBox(instance, transformPagePoint);\n  }\n\n  build(renderState, latestValues, options, props) {\n    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n  }\n\n  scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n  }\n\n  handleChildMotionValue() {\n    if (this.childSubscription) {\n      this.childSubscription();\n      delete this.childSubscription;\n    }\n\n    const {\n      children\n    } = this.props;\n\n    if (isMotionValue(children)) {\n      this.childSubscription = children.on(\"change\", latest => {\n        if (this.current) this.current.textContent = `${latest}`;\n      });\n    }\n  }\n\n  renderInstance(instance, renderState, styleProp, projection) {\n    renderHTML(instance, renderState, styleProp, projection);\n  }\n\n}\n\nexport { HTMLVisualElement, getComputedStyle };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs"],"names":["buildHTMLStyles","isCSSVariableName","transformProps","scrapeMotionValuesFromProps","renderHTML","getDefaultValueType","measureViewportBox","DOMVisualElement","isMotionValue","getComputedStyle","element","window","HTMLVisualElement","constructor","arguments","type","readValueFromInstance","instance","key","has","defaultType","default","computedStyle","value","getPropertyValue","trim","measureInstanceViewportBox","transformPagePoint","build","renderState","latestValues","options","props","transformTemplate","prevProps","visualElement","handleChildMotionValue","childSubscription","children","on","latest","current","textContent","renderInstance","styleProp","projection"],"mappings":"AAAA,SAASA,eAAT,QAAgC,0BAAhC;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,aAAT,QAA8B,uCAA9B;;AAEA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,SAAOC,MAAM,CAACF,gBAAP,CAAwBC,OAAxB,CAAP;AACH;;AACD,MAAME,iBAAN,SAAgCL,gBAAhC,CAAiD;AAC7CM,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,IAAL,GAAY,MAAZ;AACH;;AACDC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,GAAX,EAAgB;AACjC,QAAIhB,cAAc,CAACiB,GAAf,CAAmBD,GAAnB,CAAJ,EAA6B;AACzB,YAAME,WAAW,GAAGf,mBAAmB,CAACa,GAAD,CAAvC;AACA,aAAOE,WAAW,GAAGA,WAAW,CAACC,OAAZ,IAAuB,CAA1B,GAA8B,CAAhD;AACH,KAHD,MAIK;AACD,YAAMC,aAAa,GAAGb,gBAAgB,CAACQ,QAAD,CAAtC;AACA,YAAMM,KAAK,GAAG,CAACtB,iBAAiB,CAACiB,GAAD,CAAjB,GACTI,aAAa,CAACE,gBAAd,CAA+BN,GAA/B,CADS,GAETI,aAAa,CAACJ,GAAD,CAFL,KAEe,CAF7B;AAGA,aAAO,OAAOK,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,IAAN,EAA5B,GAA2CF,KAAlD;AACH;AACJ;;AACDG,EAAAA,0BAA0B,CAACT,QAAD,QAAmC;AAAA,QAAxB;AAAEU,MAAAA;AAAF,KAAwB;AACzD,WAAOrB,kBAAkB,CAACW,QAAD,EAAWU,kBAAX,CAAzB;AACH;;AACDC,EAAAA,KAAK,CAACC,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCC,KAArC,EAA4C;AAC7ChC,IAAAA,eAAe,CAAC6B,WAAD,EAAcC,YAAd,EAA4BC,OAA5B,EAAqCC,KAAK,CAACC,iBAA3C,CAAf;AACH;;AACD9B,EAAAA,2BAA2B,CAAC6B,KAAD,EAAQE,SAAR,EAAmBC,aAAnB,EAAkC;AACzD,WAAOhC,2BAA2B,CAAC6B,KAAD,EAAQE,SAAR,EAAmBC,aAAnB,CAAlC;AACH;;AACDC,EAAAA,sBAAsB,GAAG;AACrB,QAAI,KAAKC,iBAAT,EAA4B;AACxB,WAAKA,iBAAL;AACA,aAAO,KAAKA,iBAAZ;AACH;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKN,KAA1B;;AACA,QAAIxB,aAAa,CAAC8B,QAAD,CAAjB,EAA6B;AACzB,WAAKD,iBAAL,GAAyBC,QAAQ,CAACC,EAAT,CAAY,QAAZ,EAAuBC,MAAD,IAAY;AACvD,YAAI,KAAKC,OAAT,EACI,KAAKA,OAAL,CAAaC,WAAb,GAA4B,GAAEF,MAAO,EAArC;AACP,OAHwB,CAAzB;AAIH;AACJ;;AACDG,EAAAA,cAAc,CAAC1B,QAAD,EAAWY,WAAX,EAAwBe,SAAxB,EAAmCC,UAAnC,EAA+C;AACzDzC,IAAAA,UAAU,CAACa,QAAD,EAAWY,WAAX,EAAwBe,SAAxB,EAAmCC,UAAnC,CAAV;AACH;;AA1C4C;;AA6CjD,SAASjC,iBAAT,EAA4BH,gBAA5B","sourcesContent":["import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n"]},"metadata":{},"sourceType":"module"}