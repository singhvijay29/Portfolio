{"ast":null,"code":"'use client';\n\nimport { AlertProvider, AlertStylesProvider, getStatusColorScheme } from \"./chunk-XCES3W5V.mjs\"; // src/alert.tsx\n\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Alert = forwardRef(function Alert2(props, ref) {\n  var _a;\n\n  const {\n    status = \"info\",\n    addRole = true,\n    ...rest\n  } = omitThemingProps(props);\n  const colorScheme = (_a = props.colorScheme) != null ? _a : getStatusColorScheme(status);\n  const styles = useMultiStyleConfig(\"Alert\", { ...props,\n    colorScheme\n  });\n  const alertStyles = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx(AlertProvider, {\n    value: {\n      status\n    },\n    children: /* @__PURE__ */jsx(AlertStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(chakra.div, {\n        \"data-status\": status,\n        role: addRole ? \"alert\" : void 0,\n        ref,\n        ...rest,\n        className: cx(\"chakra-alert\", props.className),\n        __css: alertStyles\n      })\n    })\n  });\n});\nAlert.displayName = \"Alert\";\nexport { Alert };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/alert/src/alert.tsx"],"names":["Alert"],"mappings":";;;;AAAA,SAAS,EAAT,QAAmB,yBAAnB;AACA,SACE,MADF,EAEE,UAFF,EAIE,gBAJF,EAOE,mBAPF,QAQO,mBARP;AA2DQ,SAAA,GAAA,QAAA,mBAAA;AAlBD,IAAM,KAAA,GAAQ,UAAA,CAA8B,SAASA,MAAT,CAAe,KAAf,EAAsB,GAAtB,EAA2B;AA1C9E,MAAA,EAAA;;AA2CE,QAAM;AAAE,IAAA,MAAA,GAAS,MAAX;AAAmB,IAAA,OAAA,GAAU,IAA7B;AAAmC,OAAG;AAAtC,MAA+C,gBAAA,CAAiB,KAAjB,CAArD;AACA,QAAM,WAAA,GAAA,CAAc,EAAA,GAAA,KAAA,CAAM,WAApB,KAAc,IAAd,GAAc,EAAd,GAAmC,oBAAA,CAAqB,MAArB,CAAzC;AAEA,QAAM,MAAA,GAAS,mBAAA,CAAoB,OAApB,EAA6B,EAAE,GAAG,KAAL;AAAY,IAAA;AAAZ,GAA7B,CAAf;AAEA,QAAM,WAAA,GAAiC;AACrC,IAAA,KAAA,EAAO,MAD8B;AAErC,IAAA,OAAA,EAAS,MAF4B;AAGrC,IAAA,UAAA,EAAY,QAHyB;AAIrC,IAAA,QAAA,EAAU,UAJ2B;AAKrC,IAAA,QAAA,EAAU,QAL2B;AAMrC,OAAG,MAAA,CAAO;AAN2B,GAAvC;AASA,SACE,eAAA,GAAA,CAAC,aAAD,EAAC;AAAc,IAAA,KAAA,EAAO;AAAE,MAAA;AAAF,KAArB;AACC,IAAA,QAAA,EAAA,eAAA,GAAA,CAAC,mBAAD,EAAC;AAAoB,MAAA,KAAA,EAAO,MAA3B;AACC,MAAA,QAAA,EAAA,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC;AACC,uBAAa,MADd;AAEC,QAAA,IAAA,EAAM,OAAA,GAAU,OAAV,GAAoB,KAAA,CAF3B;AAGC,QAAA,GAHD;AAIE,WAAG,IAJL;AAKC,QAAA,SAAA,EAAW,EAAA,CAAG,cAAH,EAAmB,KAAA,CAAM,SAAzB,CALZ;AAMC,QAAA,KAAA,EAAO;AANR,OAAD;AADD,KAAD;AADD,GAAD,CADF;AAcD,CA7BoB,CAAd;AA+BP,KAAA,CAAM,WAAN,GAAoB,OAApB","sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport {\n  AlertProvider,\n  AlertStatus,\n  AlertStylesProvider,\n  getStatusColorScheme,\n} from \"./alert-context\"\n\ninterface AlertOptions {\n  /**\n   * The status of the alert\n   * @default \"info\"\n   */\n  status?: AlertStatus\n}\n\nexport interface AlertProps\n  extends HTMLChakraProps<\"div\">,\n    AlertOptions,\n    ThemingProps<\"Alert\"> {\n  /**\n   * @default false\n   */\n  addRole?: boolean\n}\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n *\n * @see Docs https://chakra-ui.com/docs/components/alert\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/alert/\n */\nexport const Alert = forwardRef<AlertProps, \"div\">(function Alert(props, ref) {\n  const { status = \"info\", addRole = true, ...rest } = omitThemingProps(props)\n  const colorScheme = props.colorScheme ?? getStatusColorScheme(status)\n\n  const styles = useMultiStyleConfig(\"Alert\", { ...props, colorScheme })\n\n  const alertStyles: SystemStyleObject = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container,\n  }\n\n  return (\n    <AlertProvider value={{ status }}>\n      <AlertStylesProvider value={styles}>\n        <chakra.div\n          data-status={status}\n          role={addRole ? \"alert\" : undefined}\n          ref={ref}\n          {...rest}\n          className={cx(\"chakra-alert\", props.className)}\n          __css={alertStyles}\n        />\n      </AlertStylesProvider>\n    </AlertProvider>\n  )\n})\n\nAlert.displayName = \"Alert\"\n"]},"metadata":{},"sourceType":"module"}