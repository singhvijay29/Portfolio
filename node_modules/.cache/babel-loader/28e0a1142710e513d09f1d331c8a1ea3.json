{"ast":null,"code":"import { useEffect } from 'react';\nimport { addDomEvent } from './add-dom-event.mjs';\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\n\nfunction useDomEvent(ref, eventName, handler, options) {\n  useEffect(() => {\n    const element = ref.current;\n\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\n\nexport { useDomEvent };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/events/use-dom-event.mjs"],"names":["useEffect","addDomEvent","useDomEvent","ref","eventName","handler","options","element","current"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;AACnDN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,OAAO,GAAGJ,GAAG,CAACK,OAApB;;AACA,QAAIH,OAAO,IAAIE,OAAf,EAAwB;AACpB,aAAON,WAAW,CAACM,OAAD,EAAUH,SAAV,EAAqBC,OAArB,EAA8BC,OAA9B,CAAlB;AACH;AACJ,GALQ,EAKN,CAACH,GAAD,EAAMC,SAAN,EAAiBC,OAAjB,EAA0BC,OAA1B,CALM,CAAT;AAMH;;AAED,SAASJ,WAAT","sourcesContent":["import { useEffect } from 'react';\nimport { addDomEvent } from './add-dom-event.mjs';\n\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(() => {\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { useDomEvent };\n"]},"metadata":{},"sourceType":"module"}