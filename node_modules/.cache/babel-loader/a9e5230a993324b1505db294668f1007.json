{"ast":null,"code":"'use client';\n\nimport { AvatarName } from \"./chunk-O25PJXSD.mjs\";\nimport { GenericAvatarIcon } from \"./chunk-CXYPMOCL.mjs\"; // src/avatar-image.tsx\n\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction AvatarImage(props) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin\n  } = props;\n  const status = useImage({\n    src,\n    onError,\n    crossOrigin,\n    ignoreFallback\n  });\n  const hasLoaded = status === \"loaded\";\n  const showFallback = !src || !hasLoaded;\n\n  if (showFallback) {\n    return name ? /* @__PURE__ */jsx(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials,\n      name\n    }) : cloneElement(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n\n  return /* @__PURE__ */jsx(chakra.img, {\n    src,\n    srcSet,\n    alt: name,\n    onLoad,\n    referrerPolicy,\n    crossOrigin: crossOrigin != null ? crossOrigin : void 0,\n    className: \"chakra-avatar__img\",\n    loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius\n    }\n  });\n}\n\nAvatarImage.displayName = \"AvatarImage\";\nexport { AvatarImage };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/avatar/src/avatar-image.tsx"],"names":[],"mappings":";;;;;AAAA,SAAqB,QAArB,QAAqC,kBAArC;AACA,SAAS,MAAT,QAA0C,mBAA1C;AACA,SAAS,YAAT,QAA6B,OAA7B;AAuBW,SAAA,GAAA,QAAA,mBAAA;;AAXJ,SAAS,WAAT,CAAqB,KAArB,EAA8C;AACnD,QAAM;AACJ,IAAA,GADI;AAEJ,IAAA,MAFI;AAGJ,IAAA,OAHI;AAIJ,IAAA,MAJI;AAKJ,IAAA,WALI;AAMJ,IAAA,IANI;AAOJ,IAAA,YAPI;AAQJ,IAAA,OARI;AASJ,IAAA,SATI;AAUJ,IAAA,IAAA,GAAO,eAAA,GAAA,CAAC,iBAAD,EAAC,EAAD,CAVH;AAWJ,IAAA,cAXI;AAYJ,IAAA,cAZI;AAaJ,IAAA;AAbI,MAcF,KAdJ;AAmBA,QAAM,MAAA,GAAS,QAAA,CAAS;AAAE,IAAA,GAAF;AAAO,IAAA,OAAP;AAAgB,IAAA,WAAhB;AAA6B,IAAA;AAA7B,GAAT,CAAf;AAEA,QAAM,SAAA,GAAY,MAAA,KAAW,QAA7B;AASA,QAAM,YAAA,GAAe,CAAC,GAAD,IAAQ,CAAC,SAA9B;;AAEA,MAAI,YAAJ,EAAkB;AAChB,WAAO,IAAA,GACL,eAAA,GAAA,CAAC,UAAD,EAAC;AACC,MAAA,SAAA,EAAU,yBADX;AAEC,MAAA,WAFD;AAGC,MAAA;AAHD,KAAD,CADK,GAOL,YAAA,CAAa,IAAb,EAAmB;AACjB,MAAA,IAAA,EAAM,KADW;AAEjB,oBAAc;AAFG,KAAnB,CAPF;AAYF;;AAKA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC;AACC,IAAA,GADD;AAEC,IAAA,MAFD;AAGC,IAAA,GAAA,EAAK,IAHN;AAIC,IAAA,MAJD;AAKC,IAAA,cALD;AAMC,IAAA,WAAA,EAAa,WAAA,IAAA,IAAA,GAAA,WAAA,GAAe,KAAA,CAN7B;AAOC,IAAA,SAAA,EAAU,oBAPX;AAQC,IAAA,OARD;AASC,IAAA,KAAA,EAAO;AACL,MAAA,KAAA,EAAO,MADF;AAEL,MAAA,MAAA,EAAQ,MAFH;AAGL,MAAA,SAAA,EAAW,OAHN;AAIL,MAAA;AAJK;AATR,GAAD,CADF;AAkBF;;AAEA,WAAA,CAAY,WAAZ,GAA0B,aAA1B","sourcesContent":["import { ImageProps, useImage } from \"@chakra-ui/image\"\nimport { chakra, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cloneElement } from \"react\"\nimport { AvatarName } from \"./avatar-name\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\n\ntype AvatarImageProps = ImageProps & {\n  getInitials?: (name: string) => string\n  borderRadius?: SystemStyleObject[\"borderRadius\"]\n  icon: React.ReactElement\n  iconLabel?: string\n  name?: string\n}\n\nexport function AvatarImage(props: AvatarImageProps) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <GenericAvatarIcon />,\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, crossOrigin, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      srcSet={srcSet}\n      alt={name}\n      onLoad={onLoad}\n      referrerPolicy={referrerPolicy}\n      crossOrigin={crossOrigin ?? undefined}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nAvatarImage.displayName = \"AvatarImage\"\n"]},"metadata":{},"sourceType":"module"}