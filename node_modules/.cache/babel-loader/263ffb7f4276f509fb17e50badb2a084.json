{"ast":null,"code":"'use client'; // src/text.tsx\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const {\n    className,\n    align,\n    decoration,\n    casing,\n    ...rest\n  } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */jsx(chakra.p, {\n    ref,\n    className: cx(\"chakra-text\", props.className),\n    ...aliasedProps,\n    ...rest,\n    __css: styles\n  });\n});\nText.displayName = \"Text\";\nexport { Text };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/layout/src/text.tsx"],"names":["Text"],"mappings":";;AAAA,SACE,MADF,EAEE,UAFF,EAGE,gBAHF,EAME,cANF,QAQO,mBARP;AASA,SAAS,EAAT,QAAmB,yBAAnB;AACA,SAAS,OAAT,QAAwB,yBAAxB;AAqCI,SAAA,GAAA,QAAA,mBAAA;AAZG,IAAM,IAAA,GAAO,UAAA,CAA2B,SAASA,KAAT,CAAc,KAAd,EAAqB,GAArB,EAA0B;AACvE,QAAM,MAAA,GAAS,cAAA,CAAe,MAAf,EAAuB,KAAvB,CAAf;AACA,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,KAAb;AAAoB,IAAA,UAApB;AAAgC,IAAA,MAAhC;AAAwC,OAAG;AAA3C,MACJ,gBAAA,CAAiB,KAAjB,CADF;AAGA,QAAM,YAAA,GAAe,OAAA,CAAQ;AAC3B,IAAA,SAAA,EAAW,KAAA,CAAM,KADU;AAE3B,IAAA,cAAA,EAAgB,KAAA,CAAM,UAFK;AAG3B,IAAA,aAAA,EAAe,KAAA,CAAM;AAHM,GAAR,CAArB;AAMA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,CAAR,EAAC;AACC,IAAA,GADD;AAEC,IAAA,SAAA,EAAW,EAAA,CAAG,aAAH,EAAkB,KAAA,CAAM,SAAxB,CAFZ;AAGE,OAAG,YAHL;AAIE,OAAG,IAJL;AAKC,IAAA,KAAA,EAAO;AALR,GAAD,CADF;AASD,CApBmB,CAAb;AAsBP,IAAA,CAAK,WAAL,GAAmB,MAAnB","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n"]},"metadata":{},"sourceType":"module"}