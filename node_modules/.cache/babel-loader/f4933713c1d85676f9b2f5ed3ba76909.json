{"ast":null,"code":"'use client';\n\nimport { ToastComponent } from \"./chunk-VXESY33O.mjs\";\nimport { toastStore } from \"./chunk-HYCJNCPE.mjs\";\nimport { getToastListStyle } from \"./chunk-LDADOVIM.mjs\"; // src/toast.provider.tsx\n\nimport { AnimatePresence } from \"framer-motion\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { useSyncExternalStore } from \"react\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [ToastOptionProvider, useToastOptionContext] = createContext({\n  name: `ToastOptionsContext`,\n  strict: false\n});\n\nvar ToastProvider = props => {\n  const state = useSyncExternalStore(toastStore.subscribe, toastStore.getState, toastStore.getState);\n  const {\n    motionVariants,\n    component: Component = ToastComponent,\n    portalProps\n  } = props;\n  const stateKeys = Object.keys(state);\n  const toastList = stateKeys.map(position => {\n    const toasts = state[position];\n    return /* @__PURE__ */jsx(\"div\", {\n      role: \"region\",\n      \"aria-live\": \"polite\",\n      \"aria-label\": `Notifications-${position}`,\n      id: `chakra-toast-manager-${position}`,\n      style: getToastListStyle(position),\n      children: /* @__PURE__ */jsx(AnimatePresence, {\n        initial: false,\n        children: toasts.map(toast => /* @__PURE__ */jsx(Component, {\n          motionVariants,\n          ...toast\n        }, toast.id))\n      })\n    }, position);\n  });\n  return /* @__PURE__ */jsx(Portal, { ...portalProps,\n    children: toastList\n  });\n};\n\nexport { ToastOptionProvider, useToastOptionContext, ToastProvider };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/toast/src/toast.provider.tsx"],"names":[],"mappings":";;;;;;AAAA,SAAS,eAAT,QAA0C,eAA1C;AACA,SAAS,MAAT,QAAoC,mBAApC;AAWA,SAAS,oBAAT,QAAqC,OAArC;AACA,SAAS,aAAT,QAA8B,0BAA9B;AAyHY,SAAA,GAAA,QAAA,mBAAA;AAvCL,IAAM,CAAC,mBAAD,EAAsB,qBAAtB,IAA+C,aAAA,CAE1D;AACA,EAAA,IAAA,EAAM,qBADN;AAEA,EAAA,MAAA,EAAQ;AAFR,CAF0D,CAArD;;AAWA,IAAM,aAAA,GAAiB,KAAD,IAA+B;AAC1D,QAAM,KAAA,GAAQ,oBAAA,CACZ,UAAA,CAAW,SADC,EAEZ,UAAA,CAAW,QAFC,EAGZ,UAAA,CAAW,QAHC,CAAd;AAMA,QAAM;AACJ,IAAA,cADI;AAEJ,IAAA,SAAA,EAAW,SAAA,GAAY,cAFnB;AAGJ,IAAA;AAHI,MAIF,KAJJ;AAMA,QAAM,SAAA,GAAY,MAAA,CAAO,IAAP,CAAY,KAAZ,CAAlB;AACA,QAAM,SAAA,GAAY,SAAA,CAAU,GAAV,CAAe,QAAD,IAAc;AAC5C,UAAM,MAAA,GAAS,KAAA,CAAM,QAAN,CAAf;AAEA,WACE,eAAA,GAAA,CAAC,KAAD,EAAC;AACC,MAAA,IAAA,EAAK,QADN;AAEC,mBAAU,QAFX;AAGC,oBAAY,iBAAiB,QAAQ,EAHtC;AAKC,MAAA,EAAA,EAAI,wBAAwB,QAAQ,EALrC;AAMC,MAAA,KAAA,EAAO,iBAAA,CAAkB,QAAlB,CANR;AAQC,MAAA,QAAA,EAAA,eAAA,GAAA,CAAC,eAAD,EAAC;AAAgB,QAAA,OAAA,EAAS,KAAzB;AACE,QAAA,QAAA,EAAA,MAAA,CAAO,GAAP,CAAY,KAAD,IACV,eAAA,GAAA,CAAC,SAAD,EAAC;AAEC,UAAA,cAFD;AAGE,aAAG;AAHL,SAAD,EACO,KAAA,CAAM,EADb,CADD;AADF,OAAD;AARD,KAAD,EAIO,QAJP,CADF;AAoBD,GAvBiB,CAAlB;AAyBA,SAAO,eAAA,GAAA,CAAC,MAAD,EAAC,EAAQ,GAAG,WAAX;AAAyB,IAAA,QAAA,EAAA;AAAzB,GAAD,CAAP;AACF,CAxCO","sourcesContent":["import { AnimatePresence, Variants } from \"framer-motion\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport { ToastComponent, ToastComponentProps } from \"./toast.component\"\nimport type {\n  CloseAllToastsOptions,\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n} from \"./toast.types\"\nimport type { UseToastOptions } from \"./use-toast\"\nimport { toastStore } from \"./toast.store\"\nimport { getToastListStyle } from \"./toast.utils\"\nimport { useSyncExternalStore } from \"react\"\nimport { createContext } from \"@chakra-ui/react-context\"\n\nexport interface ToastMethods {\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify: (message: ToastMessage, options?: CreateToastOptions) => ToastId\n  /**\n   * Close all toasts at once.\n   * If given positions, will only close those.\n   */\n  closeAll: (options?: CloseAllToastsOptions) => void\n  /**\n   * Requests to close a toast based on its id and position\n   */\n  close: (id: ToastId) => void\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  update: (id: ToastId, options: Omit<UseToastOptions, \"id\">) => void\n  isActive: (id: ToastId) => boolean\n}\n\nexport type CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    | \"status\"\n    | \"duration\"\n    | \"position\"\n    | \"id\"\n    | \"onCloseComplete\"\n    | \"containerStyle\"\n  >\n>\n\nexport type ToastProviderProps = React.PropsWithChildren<{\n  /**\n   * Default options for `useToast(options)`\n   *\n   * @example\n   * <ToastProvider defaultOptions={{ duration: 10_000, isClosable: true }} />\n   */\n  defaultOptions?: UseToastOptions\n\n  /**\n   * Customize the default motion config to animate the toasts your way\n   *\n   * @example\n   * const motionVariants =\n   * <ToastProvider motionVariants={motionVariants} />\n   */\n  motionVariants?: Variants\n\n  /**\n   * Are you looking for a way to style the toast? Use a custom `Alert` variant in the theme.\n   * This property overrides the default ToastComponent with your own implementation.\n   *\n   * @example\n   * const CustomToastComponent = (props: ToastComponentProps) => ...\n   * <ToastProvider component={CustomToastComponent} />\n   *\n   * @default ToastComponent\n   */\n  component?: React.FC<ToastComponentProps>\n\n  /**\n   * Define the margin between toasts\n   *\n   * @default 0.5rem\n   */\n  toastSpacing?: string | number\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n}>\n\n/**\n * Passes default options down to be used by toast creator function\n */\nexport const [ToastOptionProvider, useToastOptionContext] = createContext<\n  UseToastOptions | undefined\n>({\n  name: `ToastOptionsContext`,\n  strict: false,\n})\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport const ToastProvider = (props: ToastProviderProps) => {\n  const state = useSyncExternalStore(\n    toastStore.subscribe,\n    toastStore.getState,\n    toastStore.getState,\n  )\n\n  const {\n    motionVariants,\n    component: Component = ToastComponent,\n    portalProps,\n  } = props\n\n  const stateKeys = Object.keys(state) as Array<keyof typeof state>\n  const toastList = stateKeys.map((position) => {\n    const toasts = state[position]\n\n    return (\n      <div\n        role=\"region\"\n        aria-live=\"polite\"\n        aria-label={`Notifications-${position}`}\n        key={position}\n        id={`chakra-toast-manager-${position}`}\n        style={getToastListStyle(position)}\n      >\n        <AnimatePresence initial={false}>\n          {toasts.map((toast) => (\n            <Component\n              key={toast.id}\n              motionVariants={motionVariants}\n              {...toast}\n            />\n          ))}\n        </AnimatePresence>\n      </div>\n    )\n  })\n\n  return <Portal {...portalProps}>{toastList}</Portal>\n}\n"]},"metadata":{},"sourceType":"module"}