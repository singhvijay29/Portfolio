{"ast":null,"code":"'use client'; // src/use-clipboard.ts\n\nimport { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\n\nfunction useClipboard(value) {\n  let optionsOrTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const [hasCopied, setHasCopied] = useState(false);\n  const [valueState, setValueState] = useState(value);\n  useEffect(() => setValueState(value), [value]);\n  const {\n    timeout = 1500,\n    ...copyOptions\n  } = typeof optionsOrTimeout === \"number\" ? {\n    timeout: optionsOrTimeout\n  } : optionsOrTimeout;\n  const onCopy = useCallback(() => {\n    const didCopy = copy(valueState, copyOptions);\n    setHasCopied(didCopy);\n  }, [valueState, copyOptions]);\n  useEffect(() => {\n    let timeoutId = null;\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: valueState,\n    setValue: setValueState,\n    onCopy,\n    hasCopied\n  };\n}\n\nexport { useClipboard };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-clipboard.ts"],"names":[],"mappings":";;AAAA,SAAS,QAAT,EAAmB,WAAnB,EAAgC,SAAhC,QAAiD,OAAjD;AACA,OAAO,IAAP,MAAiB,mBAAjB;;AAwBO,SAAS,YAAT,CACL,KADK,EAGL;AAAA,MADA,gBACA,uEADiD,EACjD;AACA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAA,CAAS,KAAT,CAAlC;AAEA,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAA,CAAS,KAAT,CAApC;AACA,EAAA,SAAA,CAAU,MAAM,aAAA,CAAc,KAAd,CAAhB,EAAsC,CAAC,KAAD,CAAtC,CAAA;AAEA,QAAM;AAAE,IAAA,OAAA,GAAU,IAAZ;AAAkB,OAAG;AAArB,MACJ,OAAO,gBAAP,KAA4B,QAA5B,GACI;AAAE,IAAA,OAAA,EAAS;AAAX,GADJ,GAEI,gBAHN;AAKA,QAAM,MAAA,GAAS,WAAA,CAAY,MAAM;AAC/B,UAAM,OAAA,GAAU,IAAA,CAAK,UAAL,EAAiB,WAAjB,CAAhB;AACA,IAAA,YAAA,CAAa,OAAb,CAAA;AACF,GAHe,EAGZ,CAAC,UAAD,EAAa,WAAb,CAHY,CAAf;AAKA,EAAA,SAAA,CAAU,MAAM;AACd,QAAI,SAAA,GAA2B,IAA/B;;AAEA,QAAI,SAAJ,EAAe;AACb,MAAA,SAAA,GAAY,MAAA,CAAO,UAAP,CAAkB,MAAM;AAClC,QAAA,YAAA,CAAa,KAAb,CAAA;AACF,OAFY,EAET,OAFS,CAAZ;AAGF;;AAEA,WAAO,MAAM;AACX,UAAI,SAAJ,EAAe;AACb,QAAA,MAAA,CAAO,YAAP,CAAoB,SAApB;AACF;AACF,KAJA;AAKF,GAdA,EAcG,CAAC,OAAD,EAAU,SAAV,CAdH,CAAA;AAgBA,SAAO;AACL,IAAA,KAAA,EAAO,UADF;AAEL,IAAA,QAAA,EAAU,aAFL;AAGL,IAAA,MAHK;AAIL,IAAA;AAJK,GAAP;AAMF","sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\nimport copy from \"copy-to-clipboard\"\n\nexport interface UseClipboardOptions {\n  /**\n   * timeout delay (in ms) to switch back to initial state once copied.\n   */\n  timeout?: number\n  /**\n   * Set the desired MIME type\n   */\n  format?: string\n}\n\n/**\n * React hook to copy content to clipboard\n *\n * @param value the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-clipboard\n */\nexport function useClipboard(\n  value: string,\n  optionsOrTimeout: number | UseClipboardOptions = {},\n) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const [valueState, setValueState] = useState(value)\n  useEffect(() => setValueState(value), [value])\n\n  const { timeout = 1500, ...copyOptions } =\n    typeof optionsOrTimeout === \"number\"\n      ? { timeout: optionsOrTimeout }\n      : optionsOrTimeout\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(valueState, copyOptions)\n    setHasCopied(didCopy)\n  }, [valueState, copyOptions])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return {\n    value: valueState,\n    setValue: setValueState,\n    onCopy,\n    hasCopied,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}