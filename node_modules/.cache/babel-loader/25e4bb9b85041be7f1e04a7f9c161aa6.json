{"ast":null,"code":"// src/index.ts\nimport { isDom } from \"@zag-js/dom-query\";\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar hasBlurredWindowRecently = false;\nvar handlers = /* @__PURE__ */new Set();\n\nfunction trigger(modality2, event) {\n  handlers.forEach(handler => handler(modality2, event));\n}\n\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\n\nfunction isValidKey(e) {\n  return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\n\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\n\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    const target = event.composedPath ? event.composedPath()[0] : event.target;\n    let matches = false;\n\n    try {\n      matches = target.matches(\":focus-visible\");\n    } catch {}\n\n    if (matches) return;\n    trigger(\"pointer\", event);\n  }\n}\n\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\n\nfunction onClickEvent(e) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    modality = \"virtual\";\n  }\n}\n\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\";\n    trigger(\"virtual\", event);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\n\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return;\n  }\n\n  const {\n    focus\n  } = HTMLElement.prototype;\n\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    focus.apply(this, args);\n  };\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  document.addEventListener(\"click\", onClickEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n\n  hasSetup = true;\n}\n\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n\n  const handler = () => fn(isFocusVisible());\n\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\n\nfunction trackInteractionModality(fn) {\n  setupGlobalFocusEvents();\n  fn(modality);\n\n  const handler = () => fn(modality);\n\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\n\nfunction setInteractionModality(value) {\n  modality = value;\n  trigger(value, null);\n}\n\nfunction getInteractionModality() {\n  return modality;\n}\n\nexport { getInteractionModality, setInteractionModality, trackFocusVisible, trackInteractionModality };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@zag-js/focus-visible/src/index.ts"],"names":["modality"],"mappings":"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","sourcesContent":["import { isDom } from \"@zag-js/dom-query\"\n\ntype Modality = \"keyboard\" | \"pointer\" | \"virtual\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent | null) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\nlet hasBlurredWindowRecently = false\n\nconst handlers = new Set<Handler>()\n\nfunction trigger(modality: Modality, event: HandlerEvent | null) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(e: KeyboardEvent) {\n  return !(\n    e.metaKey ||\n    (!isMac && e.altKey) ||\n    e.ctrlKey ||\n    e.key === \"Control\" ||\n    e.key === \"Shift\" ||\n    e.key === \"Meta\"\n  )\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    const target = event.composedPath ? event.composedPath()[0] : event.target\n\n    let matches = false\n    try {\n      matches = (target as any).matches(\":focus-visible\")\n    } catch {}\n\n    if (matches) return\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) return true\n  return event.detail === 0 && !(event as PointerEvent).pointerType\n}\n\nfunction onClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true\n    modality = \"virtual\"\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\"\n    trigger(\"virtual\", event)\n  }\n\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = true\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n  document.addEventListener(\"click\", onClickEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function trackInteractionModality(fn: (value: Modality | null) => void) {\n  setupGlobalFocusEvents()\n\n  fn(modality)\n  const handler = () => fn(modality)\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function setInteractionModality(value: Modality) {\n  modality = value\n  trigger(value, null)\n}\n\nexport function getInteractionModality() {\n  return modality\n}\n"]},"metadata":{},"sourceType":"module"}