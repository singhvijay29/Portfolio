{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useContext, useMemo, useRef } from 'react';\nimport { focusScope } from './scope';\nimport { mediumEffect } from './medium';\nimport { extractRef } from './util';\n\nvar collapseRefs = function collapseRefs(shards) {\n  return shards.map(extractRef).filter(Boolean);\n};\n\nvar withMedium = function withMedium(fn) {\n  return new Promise(function (resolve) {\n    return mediumEffect.useMedium(function () {\n      resolve(fn.apply(void 0, arguments));\n    });\n  });\n};\n\nexport var useFocusController = function useFocusController() {\n  for (var _len = arguments.length, shards = new Array(_len), _key = 0; _key < _len; _key++) {\n    shards[_key] = arguments[_key];\n  }\n\n  if (!shards.length) {\n    throw new Error('useFocusController requires at least one target element');\n  }\n\n  var ref = useRef(shards);\n  ref.current = shards;\n  return useMemo(function () {\n    return {\n      autoFocus: function autoFocus(focusOptions) {\n        if (focusOptions === void 0) {\n          focusOptions = {};\n        }\n\n        return withMedium(function (car) {\n          return car.moveFocusInside(collapseRefs(ref.current), null, focusOptions);\n        });\n      },\n      focusNext: function focusNext(options) {\n        return withMedium(function (car) {\n          car.moveFocusInside(collapseRefs(ref.current), null);\n          car.focusNextElement(document.activeElement, _extends({\n            scope: collapseRefs(ref.current)\n          }, options));\n        });\n      },\n      focusPrev: function focusPrev(options) {\n        return withMedium(function (car) {\n          car.moveFocusInside(collapseRefs(ref.current), null);\n          car.focusPrevElement(document.activeElement, _extends({\n            scope: collapseRefs(ref.current)\n          }, options));\n        });\n      },\n      focusFirst: function focusFirst(options) {\n        return withMedium(function (car) {\n          car.focusFirstElement(collapseRefs(ref.current), options);\n        });\n      },\n      focusLast: function focusLast(options) {\n        return withMedium(function (car) {\n          car.focusLastElement(collapseRefs(ref.current), options);\n        });\n      }\n    };\n  }, []);\n};\nexport var useFocusScope = function useFocusScope() {\n  var scope = useContext(focusScope);\n\n  if (!scope) {\n    throw new Error('FocusLock is required to operate with FocusScope');\n  }\n\n  return useFocusController.apply(void 0, [scope.observed].concat(scope.shards));\n};","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/react-focus-lock/dist/es2015/use-focus-scope.js"],"names":["_extends","useContext","useMemo","useRef","focusScope","mediumEffect","extractRef","collapseRefs","shards","map","filter","Boolean","withMedium","fn","Promise","resolve","useMedium","apply","arguments","useFocusController","_len","length","Array","_key","Error","ref","current","autoFocus","focusOptions","car","moveFocusInside","focusNext","options","focusNextElement","document","activeElement","scope","focusPrev","focusPrevElement","focusFirst","focusFirstElement","focusLast","focusLastElement","useFocusScope","observed","concat"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useContext, useMemo, useRef } from 'react';\nimport { focusScope } from './scope';\nimport { mediumEffect } from './medium';\nimport { extractRef } from './util';\nvar collapseRefs = function collapseRefs(shards) {\n  return shards.map(extractRef).filter(Boolean);\n};\nvar withMedium = function withMedium(fn) {\n  return new Promise(function (resolve) {\n    return mediumEffect.useMedium(function () {\n      resolve(fn.apply(void 0, arguments));\n    });\n  });\n};\nexport var useFocusController = function useFocusController() {\n  for (var _len = arguments.length, shards = new Array(_len), _key = 0; _key < _len; _key++) {\n    shards[_key] = arguments[_key];\n  }\n  if (!shards.length) {\n    throw new Error('useFocusController requires at least one target element');\n  }\n  var ref = useRef(shards);\n  ref.current = shards;\n  return useMemo(function () {\n    return {\n      autoFocus: function autoFocus(focusOptions) {\n        if (focusOptions === void 0) {\n          focusOptions = {};\n        }\n        return withMedium(function (car) {\n          return car.moveFocusInside(collapseRefs(ref.current), null, focusOptions);\n        });\n      },\n      focusNext: function focusNext(options) {\n        return withMedium(function (car) {\n          car.moveFocusInside(collapseRefs(ref.current), null);\n          car.focusNextElement(document.activeElement, _extends({\n            scope: collapseRefs(ref.current)\n          }, options));\n        });\n      },\n      focusPrev: function focusPrev(options) {\n        return withMedium(function (car) {\n          car.moveFocusInside(collapseRefs(ref.current), null);\n          car.focusPrevElement(document.activeElement, _extends({\n            scope: collapseRefs(ref.current)\n          }, options));\n        });\n      },\n      focusFirst: function focusFirst(options) {\n        return withMedium(function (car) {\n          car.focusFirstElement(collapseRefs(ref.current), options);\n        });\n      },\n      focusLast: function focusLast(options) {\n        return withMedium(function (car) {\n          car.focusLastElement(collapseRefs(ref.current), options);\n        });\n      }\n    };\n  }, []);\n};\nexport var useFocusScope = function useFocusScope() {\n  var scope = useContext(focusScope);\n  if (!scope) {\n    throw new Error('FocusLock is required to operate with FocusScope');\n  }\n  return useFocusController.apply(void 0, [scope.observed].concat(scope.shards));\n};"]},"metadata":{},"sourceType":"module"}