{"ast":null,"code":"import * as React from 'react';\nimport { styleSingleton } from 'react-style-singleton';\nimport { fullWidthClassName, zeroRightClassName, noScrollbarsClassName, removedBarSizeVariable } from './constants';\nimport { getGapWidth } from './utils';\nvar Style = styleSingleton();\nexport var lockAttribute = 'data-scroll-locked'; // important tip - once we measure scrollBar width and remove them\n// we could not repeat this operation\n// thus we are using style-singleton - only the first \"yet correct\" style will be applied.\n\nvar getStyles = function (_a, allowRelative, gapMode, important) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      gap = _a.gap;\n\n  if (gapMode === void 0) {\n    gapMode = 'margin';\n  }\n\n  return \"\\n  .\".concat(noScrollbarsClassName, \" {\\n   overflow: hidden \").concat(important, \";\\n   padding-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  body[\").concat(lockAttribute, \"] {\\n    overflow: hidden \").concat(important, \";\\n    overscroll-behavior: contain;\\n    \").concat([allowRelative && \"position: relative \".concat(important, \";\"), gapMode === 'margin' && \"\\n    padding-left: \".concat(left, \"px;\\n    padding-top: \").concat(top, \"px;\\n    padding-right: \").concat(right, \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n    \"), gapMode === 'padding' && \"padding-right: \".concat(gap, \"px \").concat(important, \";\")].filter(Boolean).join(''), \"\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" {\\n    right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" {\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" .\").concat(zeroRightClassName, \" {\\n    right: 0 \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" .\").concat(fullWidthClassName, \" {\\n    margin-right: 0 \").concat(important, \";\\n  }\\n  \\n  body[\").concat(lockAttribute, \"] {\\n    \").concat(removedBarSizeVariable, \": \").concat(gap, \"px;\\n  }\\n\");\n};\n\nvar getCurrentUseCounter = function () {\n  var counter = parseInt(document.body.getAttribute(lockAttribute) || '0', 10);\n  return isFinite(counter) ? counter : 0;\n};\n\nexport var useLockAttribute = function () {\n  React.useEffect(function () {\n    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());\n    return function () {\n      var newCounter = getCurrentUseCounter() - 1;\n\n      if (newCounter <= 0) {\n        document.body.removeAttribute(lockAttribute);\n      } else {\n        document.body.setAttribute(lockAttribute, newCounter.toString());\n      }\n    };\n  }, []);\n};\n/**\n * Removes page scrollbar and blocks page scroll when mounted\n */\n\nexport var RemoveScrollBar = function (_a) {\n  var noRelative = _a.noRelative,\n      noImportant = _a.noImportant,\n      _b = _a.gapMode,\n      gapMode = _b === void 0 ? 'margin' : _b;\n  useLockAttribute();\n  /*\n   gap will be measured on every component mount\n   however it will be used only by the \"first\" invocation\n   due to singleton nature of <Style\n   */\n\n  var gap = React.useMemo(function () {\n    return getGapWidth(gapMode);\n  }, [gapMode]);\n  return React.createElement(Style, {\n    styles: getStyles(gap, !noRelative, gapMode, !noImportant ? '!important' : '')\n  });\n};","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/react-remove-scroll-bar/dist/es2015/component.js"],"names":["React","styleSingleton","fullWidthClassName","zeroRightClassName","noScrollbarsClassName","removedBarSizeVariable","getGapWidth","Style","lockAttribute","getStyles","_a","allowRelative","gapMode","important","left","top","right","gap","concat","filter","Boolean","join","getCurrentUseCounter","counter","parseInt","document","body","getAttribute","isFinite","useLockAttribute","useEffect","setAttribute","toString","newCounter","removeAttribute","RemoveScrollBar","noRelative","noImportant","_b","useMemo","createElement","styles"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { styleSingleton } from 'react-style-singleton';\nimport { fullWidthClassName, zeroRightClassName, noScrollbarsClassName, removedBarSizeVariable } from './constants';\nimport { getGapWidth } from './utils';\nvar Style = styleSingleton();\nexport var lockAttribute = 'data-scroll-locked';\n// important tip - once we measure scrollBar width and remove them\n// we could not repeat this operation\n// thus we are using style-singleton - only the first \"yet correct\" style will be applied.\nvar getStyles = function (_a, allowRelative, gapMode, important) {\n    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;\n    if (gapMode === void 0) { gapMode = 'margin'; }\n    return \"\\n  .\".concat(noScrollbarsClassName, \" {\\n   overflow: hidden \").concat(important, \";\\n   padding-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  body[\").concat(lockAttribute, \"] {\\n    overflow: hidden \").concat(important, \";\\n    overscroll-behavior: contain;\\n    \").concat([\n        allowRelative && \"position: relative \".concat(important, \";\"),\n        gapMode === 'margin' &&\n            \"\\n    padding-left: \".concat(left, \"px;\\n    padding-top: \").concat(top, \"px;\\n    padding-right: \").concat(right, \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n    \"),\n        gapMode === 'padding' && \"padding-right: \".concat(gap, \"px \").concat(important, \";\"),\n    ]\n        .filter(Boolean)\n        .join(''), \"\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" {\\n    right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" {\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" .\").concat(zeroRightClassName, \" {\\n    right: 0 \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" .\").concat(fullWidthClassName, \" {\\n    margin-right: 0 \").concat(important, \";\\n  }\\n  \\n  body[\").concat(lockAttribute, \"] {\\n    \").concat(removedBarSizeVariable, \": \").concat(gap, \"px;\\n  }\\n\");\n};\nvar getCurrentUseCounter = function () {\n    var counter = parseInt(document.body.getAttribute(lockAttribute) || '0', 10);\n    return isFinite(counter) ? counter : 0;\n};\nexport var useLockAttribute = function () {\n    React.useEffect(function () {\n        document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());\n        return function () {\n            var newCounter = getCurrentUseCounter() - 1;\n            if (newCounter <= 0) {\n                document.body.removeAttribute(lockAttribute);\n            }\n            else {\n                document.body.setAttribute(lockAttribute, newCounter.toString());\n            }\n        };\n    }, []);\n};\n/**\n * Removes page scrollbar and blocks page scroll when mounted\n */\nexport var RemoveScrollBar = function (_a) {\n    var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? 'margin' : _b;\n    useLockAttribute();\n    /*\n     gap will be measured on every component mount\n     however it will be used only by the \"first\" invocation\n     due to singleton nature of <Style\n     */\n    var gap = React.useMemo(function () { return getGapWidth(gapMode); }, [gapMode]);\n    return React.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? '!important' : '') });\n};\n"]},"metadata":{},"sourceType":"module"}