{"ast":null,"code":"'use client'; // src/modal-transition.tsx\n\nimport { chakra } from \"@chakra-ui/system\";\nimport { scaleFadeConfig, slideFadeConfig } from \"@chakra-ui/transition\";\nimport { motion } from \"framer-motion\";\nimport { forwardRef } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar transitions = {\n  slideInBottom: { ...slideFadeConfig,\n    custom: {\n      offsetY: 16,\n      reverse: true\n    }\n  },\n  slideInRight: { ...slideFadeConfig,\n    custom: {\n      offsetX: 16,\n      reverse: true\n    }\n  },\n  slideInTop: { ...slideFadeConfig,\n    custom: {\n      offsetY: -16,\n      reverse: true\n    }\n  },\n  slideInLeft: { ...slideFadeConfig,\n    custom: {\n      offsetX: -16,\n      reverse: true\n    }\n  },\n  scale: { ...scaleFadeConfig,\n    custom: {\n      initialScale: 0.95,\n      reverse: true\n    }\n  },\n  none: {}\n};\nvar MotionSection = chakra(motion.section);\n\nvar getMotionProps = preset => {\n  return transitions[preset || \"none\"];\n};\n\nvar ModalTransition = forwardRef((props, ref) => {\n  const {\n    preset,\n    motionProps = getMotionProps(preset),\n    ...rest\n  } = props;\n  return /* @__PURE__ */jsx(MotionSection, {\n    ref,\n    ...motionProps,\n    ...rest\n  });\n});\nModalTransition.displayName = \"ModalTransition\";\nexport { ModalTransition };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/modal/src/modal-transition.tsx"],"names":[],"mappings":";;AAAA,SAAS,MAAT,QAAoC,mBAApC;AACA,SAAS,eAAT,EAA0B,eAA1B,QAAiD,uBAAjD;AACA,SAA0B,MAA1B,QAAwC,eAAxC;AACA,SAAS,UAAT,QAA2B,OAA3B;AAiDM,SAAA,GAAA,QAAA,mBAAA;AAlCN,IAAM,WAAA,GAAc;AAClB,EAAA,aAAA,EAAe,EACb,GAAG,eADU;AAEb,IAAA,MAAA,EAAQ;AAAE,MAAA,OAAA,EAAS,EAAX;AAAe,MAAA,OAAA,EAAS;AAAxB;AAFK,GADG;AAKlB,EAAA,YAAA,EAAc,EACZ,GAAG,eADS;AAEZ,IAAA,MAAA,EAAQ;AAAE,MAAA,OAAA,EAAS,EAAX;AAAe,MAAA,OAAA,EAAS;AAAxB;AAFI,GALI;AASlB,EAAA,UAAA,EAAY,EACV,GAAG,eADO;AAEV,IAAA,MAAA,EAAQ;AAAE,MAAA,OAAA,EAAS,CAAA,EAAX;AAAgB,MAAA,OAAA,EAAS;AAAzB;AAFE,GATM;AAalB,EAAA,WAAA,EAAa,EACX,GAAG,eADQ;AAEX,IAAA,MAAA,EAAQ;AAAE,MAAA,OAAA,EAAS,CAAA,EAAX;AAAgB,MAAA,OAAA,EAAS;AAAzB;AAFG,GAbK;AAiBlB,EAAA,KAAA,EAAO,EACL,GAAG,eADE;AAEL,IAAA,MAAA,EAAQ;AAAE,MAAA,YAAA,EAAc,IAAhB;AAAsB,MAAA,OAAA,EAAS;AAA/B;AAFH,GAjBW;AAqBlB,EAAA,IAAA,EAAM;AArBY,CAApB;AAwBA,IAAM,aAAA,GAAgB,MAAA,CAAO,MAAA,CAAO,OAAd,CAAtB;;AAEA,IAAM,cAAA,GAAkB,MAAD,IAA4C;AACjE,SAAO,WAAA,CAAY,MAAA,IAAU,MAAtB,CAAP;AACF,CAFA;;AAIO,IAAM,eAAA,GAAkB,UAAA,CAC7B,CAAC,KAAD,EAA8B,GAA9B,KAAsD;AACpD,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA,WAAA,GAAc,cAAA,CAAe,MAAf,CAAxB;AAAgD,OAAG;AAAnD,MAA4D,KAAlE;AACA,SACE,eAAA,GAAA,CAAC,aAAD,EAAC;AAAc,IAAA,GAAd;AAAyB,OAAI,WAA7B;AAA2D,OAAG;AAA9D,GAAD,CADF;AAGF,CAN6B,CAAxB;AASP,eAAA,CAAgB,WAAhB,GAA8B,iBAA9B","sourcesContent":["import { chakra, ChakraProps } from \"@chakra-ui/system\"\nimport { scaleFadeConfig, slideFadeConfig } from \"@chakra-ui/transition\"\nimport { HTMLMotionProps, motion } from \"framer-motion\"\nimport { forwardRef } from \"react\"\n\nexport interface ModalTransitionProps\n  extends Omit<HTMLMotionProps<\"section\">, \"color\" | \"transition\">,\n    ChakraProps {\n  preset?:\n    | \"slideInBottom\"\n    | \"slideInRight\"\n    | \"slideInTop\"\n    | \"slideInLeft\"\n    | \"scale\"\n    | \"none\"\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\nconst transitions = {\n  slideInBottom: {\n    ...slideFadeConfig,\n    custom: { offsetY: 16, reverse: true },\n  },\n  slideInRight: {\n    ...slideFadeConfig,\n    custom: { offsetX: 16, reverse: true },\n  },\n  slideInTop: {\n    ...slideFadeConfig,\n    custom: { offsetY: -16, reverse: true },\n  },\n  slideInLeft: {\n    ...slideFadeConfig,\n    custom: { offsetX: -16, reverse: true },\n  },\n  scale: {\n    ...scaleFadeConfig,\n    custom: { initialScale: 0.95, reverse: true },\n  },\n  none: {},\n}\n\nconst MotionSection = chakra(motion.section)\n\nconst getMotionProps = (preset: ModalTransitionProps[\"preset\"]) => {\n  return transitions[preset || \"none\"]\n}\n\nexport const ModalTransition = forwardRef(\n  (props: ModalTransitionProps, ref: React.Ref<any>) => {\n    const { preset, motionProps = getMotionProps(preset), ...rest } = props\n    return (\n      <MotionSection ref={ref} {...(motionProps as ChakraProps)} {...rest} />\n    )\n  },\n)\n\nModalTransition.displayName = \"ModalTransition\"\n"]},"metadata":{},"sourceType":"module"}