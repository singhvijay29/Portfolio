{"ast":null,"code":"'use client';\n\nimport { PanEvent } from \"./chunk-Z2LY7B4S.mjs\"; // src/use-pan-event.ts\n\nimport { addPointerEvent } from \"@chakra-ui/event-utils\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { useEffect, useRef } from \"react\";\n\nfunction usePanEvent(ref, options) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold\n  } = options;\n  const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  const panSession = useRef(null);\n  const handlersRef = useLatestRef({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n\n  });\n  useEffect(() => {\n    var _a;\n\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlersRef.current);\n  });\n  useEffect(() => {\n    const node = ref.current;\n    if (!node || !hasPanEvents) return;\n\n    function onPointerDown(event) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold);\n    }\n\n    return addPointerEvent(node, \"pointerdown\", onPointerDown);\n  }, [ref, hasPanEvents, handlersRef, threshold]);\n  useEffect(() => {\n    return () => {\n      var _a;\n\n      (_a = panSession.current) == null ? void 0 : _a.end();\n      panSession.current = null;\n    };\n  }, []);\n}\n\nexport { usePanEvent };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-use-pan-event/src/use-pan-event.ts"],"names":[],"mappings":";;;;AAAA,SAAS,eAAT,QAAgC,wBAAhC;AACA,SAAS,YAAT,QAA6B,iCAA7B;AACA,SAAS,SAAT,EAAoB,MAApB,QAAkC,OAAlC;;AAaO,SAAS,WAAT,CACL,GADK,EAEL,OAFK,EAGL;AACA,QAAM;AACJ,IAAA,KADI;AAEJ,IAAA,UAFI;AAGJ,IAAA,QAHI;AAIJ,IAAA,iBAJI;AAKJ,IAAA,eALI;AAMJ,IAAA;AANI,MAOF,OAPJ;AASA,QAAM,YAAA,GAAe,OAAA,CACnB,KAAA,IAAS,UAAT,IAAuB,QAAvB,IAAmC,iBAAnC,IAAwD,eADrC,CAArB;AAIA,QAAM,UAAA,GAAa,MAAA,CAAwB,IAAxB,CAAnB;AAEA,QAAM,WAAA,GAAc,YAAA,CAAwC;AAC1D,IAAA,cAAA,EAAgB,iBAD0C;AAE1D,IAAA,YAAA,EAAc,eAF4C;AAG1D,IAAA,OAAA,EAAS,UAHiD;AAI1D,IAAA,MAAA,EAAQ,KAJkD;;AAK1D,IAAA,KAAA,CAAM,KAAN,EAAa,IAAb,EAAmB;AACjB,MAAA,UAAA,CAAW,OAAX,GAAqB,IAArB;AACA,MAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAW,KAAX,EAAkB,IAAlB,CAAA;AACF;;AAR0D,GAAxC,CAApB;AAWA,EAAA,SAAA,CAAU,MAAM;AA7ClB,QAAA,EAAA;;AA8CI,KAAA,EAAA,GAAA,UAAA,CAAW,OAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAoB,cAApB,CAAmC,WAAA,CAAY,OAA/C,CAAA;AACD,GAFD,CAAA;AAIA,EAAA,SAAA,CAAU,MAAM;AACd,UAAM,IAAA,GAAO,GAAA,CAAI,OAAjB;AAEA,QAAI,CAAC,IAAD,IAAS,CAAC,YAAd,EAA4B;;AAE5B,aAAS,aAAT,CAAuB,KAAvB,EAA+C;AAC7C,MAAA,UAAA,CAAW,OAAX,GAAqB,IAAI,QAAJ,CAAa,KAAb,EAAoB,WAAA,CAAY,OAAhC,EAAyC,SAAzC,CAArB;AACF;;AAEA,WAAO,eAAA,CAAgB,IAAhB,EAAsB,aAAtB,EAAqC,aAArC,CAAP;AACF,GAVA,EAUG,CAAC,GAAD,EAAM,YAAN,EAAoB,WAApB,EAAiC,SAAjC,CAVH,CAAA;AAYA,EAAA,SAAA,CAAU,MAAM;AACd,WAAO,MAAM;AA9DjB,UAAA,EAAA;;AA+DM,OAAA,EAAA,GAAA,UAAA,CAAW,OAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAoB,GAApB,EAAA;AACA,MAAA,UAAA,CAAW,OAAX,GAAqB,IAArB;AACF,KAHA;AAIF,GALA,EAKG,EALH,CAAA;AAMF","sourcesContent":["import { addPointerEvent } from \"@chakra-ui/event-utils\"\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\"\nimport { useEffect, useRef } from \"react\"\nimport { PanEvent } from \"./pan-event\"\nimport { AnyPointerEvent, PanEventHandler, PanEventHandlers } from \"./types\"\n\nexport interface UsePanEventProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n  threshold?: number\n}\n\nexport function usePanEvent(\n  ref: React.RefObject<HTMLElement>,\n  options: UsePanEventProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold,\n  } = options\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanEvent | null>(null)\n\n  const handlersRef = useLatestRef<Partial<PanEventHandlers>>({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  })\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlersRef.current)\n  })\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node || !hasPanEvents) return\n\n    function onPointerDown(event: AnyPointerEvent) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold)\n    }\n\n    return addPointerEvent(node, \"pointerdown\", onPointerDown)\n  }, [ref, hasPanEvents, handlersRef, threshold])\n\n  useEffect(() => {\n    return () => {\n      panSession.current?.end()\n      panSession.current = null\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}