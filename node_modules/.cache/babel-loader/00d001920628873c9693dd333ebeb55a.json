{"ast":null,"code":"import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.isActive = false;\n  }\n\n  onFocus() {\n    let isFocusVisible = false;\n    /**\n     * If this element doesn't match focus-visible then don't\n     * apply whileHover. But, if matches throws that focus-visible\n     * is not a valid selector then in that browser outline styles will be applied\n     * to the element by default and we want to match that behaviour with whileFocus.\n     */\n\n    try {\n      isFocusVisible = this.node.current.matches(\":focus-visible\");\n    } catch (e) {\n      isFocusVisible = true;\n    }\n\n    if (!isFocusVisible || !this.node.animationState) return;\n    this.node.animationState.setActive(\"whileFocus\", true);\n    this.isActive = true;\n  }\n\n  onBlur() {\n    if (!this.isActive || !this.node.animationState) return;\n    this.node.animationState.setActive(\"whileFocus\", false);\n    this.isActive = false;\n  }\n\n  mount() {\n    this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n  }\n\n  unmount() {}\n\n}\n\nexport { FocusGesture };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/gestures/focus.mjs"],"names":["addDomEvent","Feature","pipe","FocusGesture","constructor","arguments","isActive","onFocus","isFocusVisible","node","current","matches","e","animationState","setActive","onBlur","mount","unmount"],"mappings":"AAAA,SAASA,WAAT,QAA4B,6BAA5B;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,MAAMC,YAAN,SAA2BF,OAA3B,CAAmC;AAC/BG,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,QAAIC,cAAc,GAAG,KAArB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,QAAI;AACAA,MAAAA,cAAc,GAAG,KAAKC,IAAL,CAAUC,OAAV,CAAkBC,OAAlB,CAA0B,gBAA1B,CAAjB;AACH,KAFD,CAGA,OAAOC,CAAP,EAAU;AACNJ,MAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,QAAI,CAACA,cAAD,IAAmB,CAAC,KAAKC,IAAL,CAAUI,cAAlC,EACI;AACJ,SAAKJ,IAAL,CAAUI,cAAV,CAAyBC,SAAzB,CAAmC,YAAnC,EAAiD,IAAjD;AACA,SAAKR,QAAL,GAAgB,IAAhB;AACH;;AACDS,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKT,QAAN,IAAkB,CAAC,KAAKG,IAAL,CAAUI,cAAjC,EACI;AACJ,SAAKJ,IAAL,CAAUI,cAAV,CAAyBC,SAAzB,CAAmC,YAAnC,EAAiD,KAAjD;AACA,SAAKR,QAAL,GAAgB,KAAhB;AACH;;AACDU,EAAAA,KAAK,GAAG;AACJ,SAAKC,OAAL,GAAef,IAAI,CAACF,WAAW,CAAC,KAAKS,IAAL,CAAUC,OAAX,EAAoB,OAApB,EAA6B,MAAM,KAAKH,OAAL,EAAnC,CAAZ,EAAgEP,WAAW,CAAC,KAAKS,IAAL,CAAUC,OAAX,EAAoB,MAApB,EAA4B,MAAM,KAAKK,MAAL,EAAlC,CAA3E,CAAnB;AACH;;AACDE,EAAAA,OAAO,GAAG,CAAG;;AAjCkB;;AAoCnC,SAASd,YAAT","sourcesContent":["import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n"]},"metadata":{},"sourceType":"module"}