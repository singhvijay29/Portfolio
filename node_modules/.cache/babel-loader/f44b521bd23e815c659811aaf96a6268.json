{"ast":null,"code":"// src/color.ts\nimport { getCSSVar } from \"@chakra-ui/styled-system\";\nimport { toHex, parseToRgba, transparentize as setTransparency, mix, darken as reduceLightness, lighten as increaseLightness, getContrast, parseToHsla, hsla, getLuminance } from \"color2k\"; // ../../../node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n\nfunction dlv_es_default(t, e, l, n, r) {\n  for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++) t = t ? t[e[n]] : r;\n\n  return t === r ? l : t;\n} // src/color.ts\n\n\nvar isEmptyObject = obj => Object.keys(obj).length === 0;\n\nvar getColor = (theme, color, fallback) => {\n  const hex = dlv_es_default(theme, `colors.${color}`, color);\n\n  try {\n    toHex(hex);\n    return hex;\n  } catch {\n    return fallback != null ? fallback : \"#000000\";\n  }\n};\n\nvar getColorVar = (theme, color, fallback) => {\n  var _a;\n\n  return (_a = getCSSVar(theme, \"colors\", color)) != null ? _a : fallback;\n};\n\nvar getBrightness = color => {\n  const [r, g, b] = parseToRgba(color);\n  return (r * 299 + g * 587 + b * 114) / 1e3;\n};\n\nvar tone = color => theme => {\n  const hex = getColor(theme, color);\n  const brightness = getBrightness(hex);\n  const isDark2 = brightness < 128;\n  return isDark2 ? \"dark\" : \"light\";\n};\n\nvar isDark = color => theme => tone(color)(theme) === \"dark\";\n\nvar isLight = color => theme => tone(color)(theme) === \"light\";\n\nvar transparentize = (color, opacity) => theme => {\n  const raw = getColor(theme, color);\n  return setTransparency(raw, 1 - opacity);\n};\n\nvar whiten = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(mix(raw, \"#fff\", amount));\n};\n\nvar blacken = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(mix(raw, \"#000\", amount / 100));\n};\n\nvar darken = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(reduceLightness(raw, amount / 100));\n};\n\nvar lighten = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  toHex(increaseLightness(raw, amount / 100));\n};\n\nvar contrast = (fg, bg) => theme => getContrast(getColor(theme, bg), getColor(theme, fg));\n\nvar isAccessible = (textColor, bgColor, options) => theme => isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\n\nfunction isReadable(color1, color2) {\n  let wcag2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    level: \"AA\",\n    size: \"small\"\n  };\n\n  var _a, _b;\n\n  const readabilityLevel = readability(color1, color2);\n\n  switch (((_a = wcag2.level) != null ? _a : \"AA\") + ((_b = wcag2.size) != null ? _b : \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5;\n\n    case \"AAlarge\":\n      return readabilityLevel >= 3;\n\n    case \"AAAsmall\":\n      return readabilityLevel >= 7;\n\n    default:\n      return false;\n  }\n}\n\nfunction readability(color1, color2) {\n  return (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) / (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05);\n}\n\nvar complementary = color => theme => {\n  const raw = getColor(theme, color);\n  const hsl = parseToHsla(raw);\n  const complementHsl = Object.assign(hsl, [(hsl[0] + 180) % 360]);\n  return toHex(hsla(...complementHsl));\n};\n\nfunction generateStripe() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"1rem\";\n  let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"rgba(255, 255, 255, 0.15)\";\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`\n  };\n}\n\nvar randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, \"0\")}`;\n\nfunction randomColor(opts) {\n  const fallback = randomHex();\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomColorFromString(str) {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  let color = \"#\";\n\n  for (let j = 0; j < 3; j += 1) {\n    const value = hash >> j * 8 & 255;\n    color += `00${value.toString(16)}`.substr(-2);\n  }\n\n  return color;\n}\n\nfunction randomColorFromList(str, list) {\n  let index = 0;\n  if (str.length === 0) return list[0];\n\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nexport { getColor, getColorVar, tone, isDark, isLight, transparentize, whiten, blacken, darken, lighten, contrast, isAccessible, isReadable, readability, complementary, generateStripe, randomColor };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/theme-tools/src/color.ts","/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/index.js"],"names":["isDark","obj","key","def","p","undef","split","length"],"mappings":"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","sourcesContent":["import { getCSSVar } from \"@chakra-ui/styled-system\"\nimport {\n  toHex,\n  parseToRgba,\n  transparentize as setTransparency,\n  mix,\n  darken as reduceLightness,\n  lighten as increaseLightness,\n  getContrast,\n  parseToHsla,\n  hsla,\n  getLuminance,\n} from \"color2k\"\n\nimport get from \"dlv\"\n\ntype Dict = { [key: string]: any }\nconst isEmptyObject = (obj: any) => Object.keys(obj).length === 0\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  try {\n    toHex(hex)\n    return hex\n  } catch {\n    // returning black to stay consistent with TinyColor behaviour so as to prevent breaking change\n    return fallback ?? \"#000000\"\n  }\n}\n\n/**\n * Get the color css variable from theme\n */\nexport const getColorVar = (theme: Dict, color: string, fallback?: string) => {\n  return getCSSVar(theme, \"colors\", color) ?? fallback\n}\n\nconst getBrightness = (color: string) => {\n  const [r, g, b] = parseToRgba(color)\n  // http://www.w3.org/TR/AERT#color-contrast\n  return (r * 299 + g * 587 + b * 114) / 1000\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const brightness = getBrightness(hex)\n  const isDark = brightness < 128\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const transparentize =\n  (color: string, opacity: number) => (theme: Dict) => {\n    const raw = getColor(theme, color)\n    return setTransparency(raw, 1 - opacity)\n  }\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#fff\", amount))\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#000\", amount / 100))\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(reduceLightness(raw, amount / 100))\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  toHex(increaseLightness(raw, amount / 100))\n}\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  getContrast(getColor(theme, bg), getColor(theme, fg))\n\ninterface WCAG2Params {\n  level?: \"AA\" | \"AAA\"\n  size?: \"large\" | \"small\"\n}\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for contrast ratio.\n *\n * @param textColor - the foreground or text color\n * @param bgColor - the background color\n * @param options\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isAccessible =\n  (textColor: string, bgColor: string, options?: WCAG2Params) =>\n  (theme: Dict) =>\n    isReadable(getColor(theme, bgColor), getColor(theme, textColor), options)\n\nexport function isReadable(\n  color1: string,\n  color2: string,\n  wcag2: WCAG2Params = { level: \"AA\", size: \"small\" },\n): boolean {\n  const readabilityLevel = readability(color1, color2)\n  switch ((wcag2.level ?? \"AA\") + (wcag2.size ?? \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5\n    case \"AAlarge\":\n      return readabilityLevel >= 3\n    case \"AAAsmall\":\n      return readabilityLevel >= 7\n    default:\n      return false\n  }\n}\n\nexport function readability(color1: string, color2: string): number {\n  return (\n    (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) /\n    (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05)\n  )\n}\n/**\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const complementary = (color: string) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  const hsl = parseToHsla(raw)\n  const complementHsl: [number, number, number, number] = Object.assign(hsl, [\n    (hsl[0] + 180) % 360,\n  ])\n  return toHex(hsla(...complementHsl))\n}\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nconst randomHex = () =>\n  `#${Math.floor(Math.random() * 0xffffff)\n    .toString(16)\n    .padEnd(6, \"0\")}`\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = randomHex()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n"]},"metadata":{},"sourceType":"module"}