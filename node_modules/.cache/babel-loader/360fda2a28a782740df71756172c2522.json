{"ast":null,"code":"'use client';\n\nimport { useStepContext } from \"./chunk-5JULEEQD.mjs\"; // src/step-status.tsx\n\nimport { runIfFn } from \"@chakra-ui/shared-utils\";\nimport { Fragment, jsx } from \"react/jsx-runtime\";\n\nfunction StepStatus(props) {\n  const {\n    complete,\n    incomplete,\n    active\n  } = props;\n  const context = useStepContext();\n  let render = null;\n\n  switch (context.status) {\n    case \"complete\":\n      render = runIfFn(complete, context);\n      break;\n\n    case \"incomplete\":\n      render = runIfFn(incomplete, context);\n      break;\n\n    case \"active\":\n      render = runIfFn(active, context);\n      break;\n  }\n\n  return render ? /* @__PURE__ */jsx(Fragment, {\n    children: render\n  }) : null;\n}\n\nexport { StepStatus };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/stepper/src/step-status.tsx"],"names":[],"mappings":";;;;AAAA,SAAS,OAAT,QAAwB,yBAAxB;AA4BkB,SAAA,QAAA,EAAA,GAAA,QAAA,mBAAA;;AAlBX,SAAS,UAAT,CAAoB,KAApB,EAA4C;AACjD,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,UAAZ;AAAwB,IAAA;AAAxB,MAAmC,KAAzC;AACA,QAAM,OAAA,GAAU,cAAA,EAAhB;AAEA,MAAI,MAAA,GAAiC,IAArC;;AAEA,UAAQ,OAAA,CAAQ,MAAhB;AACE,SAAK,UAAL;AACE,MAAA,MAAA,GAAS,OAAA,CAAQ,QAAR,EAAkB,OAAlB,CAAT;AACA;;AACF,SAAK,YAAL;AACE,MAAA,MAAA,GAAS,OAAA,CAAQ,UAAR,EAAoB,OAApB,CAAT;AACA;;AACF,SAAK,QAAL;AACE,MAAA,MAAA,GAAS,OAAA,CAAQ,MAAR,EAAgB,OAAhB,CAAT;AACA;AATJ;;AAYA,SAAO,MAAA,GAAS,eAAA,GAAA,CAAA,QAAA,EAAA;AAAG,IAAA,QAAA,EAAA;AAAH,GAAA,CAAT,GAAyB,IAAhC;AACF","sourcesContent":["import { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { StepContext, StepStatusType, useStepContext } from \"./step-context\"\n\ntype MaybeRenderProp =\n  | React.ReactNode\n  | ((props: StepContext) => React.ReactNode)\n\nexport interface StepStatusProps\n  extends Partial<Record<StepStatusType, MaybeRenderProp>> {}\n\nexport function StepStatus(props: StepStatusProps) {\n  const { complete, incomplete, active } = props\n  const context = useStepContext()\n\n  let render: React.ReactNode | null = null\n\n  switch (context.status) {\n    case \"complete\":\n      render = runIfFn(complete, context)\n      break\n    case \"incomplete\":\n      render = runIfFn(incomplete, context)\n      break\n    case \"active\":\n      render = runIfFn(active, context)\n      break\n  }\n\n  return render ? <>{render}</> : null\n}\n"]},"metadata":{},"sourceType":"module"}