{"ast":null,"code":"'use client';\n\nimport { MenuCommand } from \"./chunk-4CNGLKYX.mjs\";\nimport { StyledMenuItem } from \"./chunk-M565QO7N.mjs\";\nimport { MenuIcon } from \"./chunk-HB6KBUMZ.mjs\";\nimport { useMenuItem } from \"./chunk-SANI5SUM.mjs\"; // src/menu-item.tsx\n\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar MenuItem = forwardRef((props, ref) => {\n  const {\n    icon,\n    iconSpacing = \"0.75rem\",\n    command,\n    commandSpacing = \"0.75rem\",\n    children,\n    ...rest\n  } = props;\n  const menuitemProps = useMenuItem(rest, ref);\n  const shouldWrap = icon || command;\n\n  const _children = shouldWrap ? /* @__PURE__ */jsx(\"span\", {\n    style: {\n      pointerEvents: \"none\",\n      flex: 1\n    },\n    children\n  }) : children;\n\n  return /* @__PURE__ */jsxs(StyledMenuItem, { ...menuitemProps,\n    className: cx(\"chakra-menu__menuitem\", menuitemProps.className),\n    children: [icon && /* @__PURE__ */jsx(MenuIcon, {\n      fontSize: \"0.8em\",\n      marginEnd: iconSpacing,\n      children: icon\n    }), _children, command && /* @__PURE__ */jsx(MenuCommand, {\n      marginStart: commandSpacing,\n      children: command\n    })]\n  });\n});\nMenuItem.displayName = \"MenuItem\";\nexport { MenuItem };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/menu/src/menu-item.tsx"],"names":[],"mappings":";;;;;;;AAAA,SAAS,UAAT,QAAyD,mBAAzD;AACA,SAAS,EAAT,QAAmB,yBAAnB;AA6DI,SAAA,GAAA,EAMA,IANA,QAAA,mBAAA;AAfG,IAAM,QAAA,GAAW,UAAA,CAAoC,CAAC,KAAD,EAAQ,GAAR,KAAgB;AAC1E,QAAM;AACJ,IAAA,IADI;AAEJ,IAAA,WAAA,GAAc,SAFV;AAGJ,IAAA,OAHI;AAIJ,IAAA,cAAA,GAAiB,SAJb;AAKJ,IAAA,QALI;AAMJ,OAAG;AANC,MAOF,KAPJ;AASA,QAAM,aAAA,GAAgB,WAAA,CAAY,IAAZ,EAAkB,GAAlB,CAAtB;AAEA,QAAM,UAAA,GAAa,IAAA,IAAQ,OAA3B;;AAEA,QAAM,SAAA,GAAY,UAAA,GAChB,eAAA,GAAA,CAAC,MAAD,EAAC;AAAK,IAAA,KAAA,EAAO;AAAE,MAAA,aAAA,EAAe,MAAjB;AAAyB,MAAA,IAAA,EAAM;AAA/B,KAAZ;AAAiD,IAAA;AAAjD,GAAD,CADgB,GAGhB,QAHF;;AAMA,SACE,eAAA,IAAA,CAAC,cAAD,EAAC,EACE,GAAG,aADL;AAEC,IAAA,SAAA,EAAW,EAAA,CAAG,uBAAH,EAA4B,aAAA,CAAc,SAA1C,CAFZ;AAIE,IAAA,QAAA,EAAA,CAAA,IAAA,IACC,eAAA,GAAA,CAAC,QAAD,EAAC;AAAS,MAAA,QAAA,EAAS,OAAlB;AAA0B,MAAA,SAAA,EAAW,WAArC;AACE,MAAA,QAAA,EAAA;AADF,KAAD,CADD,EAKA,SALA,EAMA,OAAA,IACC,eAAA,GAAA,CAAC,WAAD,EAAC;AAAY,MAAA,WAAA,EAAa,cAAzB;AAA0C,MAAA,QAAA,EAAA;AAA1C,KAAD,CAPD;AAJF,GAAD,CADF;AAgBD,CApCuB,CAAjB;AAsCP,QAAA,CAAS,WAAT,GAAuB,UAAvB","sourcesContent":["import { forwardRef, HTMLChakraProps, SystemProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nimport { MenuCommand } from \"./menu-command\"\nimport { MenuIcon } from \"./menu-icon\"\nimport { StyledMenuItem } from \"./styled-menu-item\"\nimport { useMenuItem, UseMenuItemProps } from \"./use-menu\"\n\nexport interface StyledMenuItemProps extends HTMLChakraProps<\"button\"> {}\n\ninterface MenuItemOptions\n  extends Pick<\n    UseMenuItemProps,\n    \"isDisabled\" | \"isFocusable\" | \"closeOnSelect\"\n  > {\n  /**\n   * The icon to render before the menu item's label.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * The spacing between the icon and menu item's label.\n   * @type SystemProps[\"mr\"]\n   */\n  iconSpacing?: SystemProps[\"mr\"]\n  /**\n   * Right-aligned label text content, useful for displaying hotkeys.\n   */\n  command?: string\n  /**\n   * The spacing between the command and menu item's label.\n   * @type SystemProps[\"ml\"]\n   */\n  commandSpacing?: SystemProps[\"ml\"]\n}\n\ntype HTMLAttributes = React.HTMLAttributes<HTMLElement>\n\n/**\n * Use prop `isDisabled` instead\n */\ntype IsDisabledProps = \"disabled\" | \"aria-disabled\"\n\nexport interface MenuItemProps\n  extends Omit<HTMLChakraProps<\"button\">, IsDisabledProps>,\n    MenuItemOptions {}\n\nexport const MenuItem = forwardRef<MenuItemProps, \"button\">((props, ref) => {\n  const {\n    icon,\n    iconSpacing = \"0.75rem\",\n    command,\n    commandSpacing = \"0.75rem\",\n    children,\n    ...rest\n  } = props\n\n  const menuitemProps = useMenuItem(rest, ref) as HTMLAttributes\n\n  const shouldWrap = icon || command\n\n  const _children = shouldWrap ? (\n    <span style={{ pointerEvents: \"none\", flex: 1 }}>{children}</span>\n  ) : (\n    children\n  )\n\n  return (\n    <StyledMenuItem\n      {...menuitemProps}\n      className={cx(\"chakra-menu__menuitem\", menuitemProps.className)}\n    >\n      {icon && (\n        <MenuIcon fontSize=\"0.8em\" marginEnd={iconSpacing}>\n          {icon}\n        </MenuIcon>\n      )}\n      {_children}\n      {command && (\n        <MenuCommand marginStart={commandSpacing}>{command}</MenuCommand>\n      )}\n    </StyledMenuItem>\n  )\n})\n\nMenuItem.displayName = \"MenuItem\"\n"]},"metadata":{},"sourceType":"module"}