{"ast":null,"code":"'use client';\n\nimport { usePortalManager } from \"./chunk-HK66PB7M.mjs\"; // src/portal.tsx\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { createPortal } from \"react-dom\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\nvar PORTAL_CLASSNAME = \"chakra-portal\";\nvar PORTAL_SELECTOR = `.chakra-portal`;\n\nvar Container = props => /* @__PURE__ */jsx(\"div\", {\n  className: \"chakra-portal-zIndex\",\n  style: {\n    position: \"absolute\",\n    zIndex: props.zIndex,\n    top: 0,\n    left: 0,\n    right: 0 // NB: Don't add `bottom: 0`, it makes the entire app unusable\n    // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n\n  },\n  children: props.children\n});\n\nvar DefaultPortal = props => {\n  const {\n    appendToParentPortal,\n    children\n  } = props;\n  const [tempNode, setTempNode] = useState(null);\n  const portal = useRef(null);\n  const [, forceUpdate] = useState({});\n  useEffect(() => forceUpdate({}), []);\n  const parentPortal = usePortalContext();\n  const manager = usePortalManager();\n  useSafeLayoutEffect(() => {\n    if (!tempNode) return;\n    const doc = tempNode.ownerDocument;\n    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;\n    if (!host) return;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = PORTAL_CLASSNAME;\n    host.appendChild(portal.current);\n    forceUpdate({});\n    const portalNode = portal.current;\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, [tempNode]);\n\n  const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */jsx(Container, {\n    zIndex: manager == null ? void 0 : manager.zIndex,\n    children\n  }) : children;\n\n  return portal.current ? createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n    value: portal.current,\n    children: _children\n  }), portal.current) : /* @__PURE__ */jsx(\"span\", {\n    ref: el => {\n      if (el) setTempNode(el);\n    }\n  });\n};\n\nvar ContainerPortal = props => {\n  const {\n    children,\n    containerRef,\n    appendToParentPortal\n  } = props;\n  const containerEl = containerRef.current;\n  const host = containerEl != null ? containerEl : typeof window !== \"undefined\" ? document.body : void 0;\n  const portal = useMemo(() => {\n    const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement(\"div\");\n    if (node) node.className = PORTAL_CLASSNAME;\n    return node;\n  }, [containerEl]);\n  const [, forceUpdate] = useState({});\n  useSafeLayoutEffect(() => forceUpdate({}), []);\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return;\n    host.appendChild(portal);\n    return () => {\n      host.removeChild(portal);\n    };\n  }, [portal, host]);\n\n  if (host && portal) {\n    return createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n      value: appendToParentPortal ? portal : null,\n      children\n    }), portal);\n  }\n\n  return null;\n};\n\nfunction Portal(props) {\n  const portalProps = {\n    appendToParentPortal: true,\n    ...props\n  };\n  const {\n    containerRef,\n    ...rest\n  } = portalProps;\n  return containerRef ? /* @__PURE__ */jsx(ContainerPortal, {\n    containerRef,\n    ...rest\n  }) : /* @__PURE__ */jsx(DefaultPortal, { ...rest\n  });\n}\n\nPortal.className = PORTAL_CLASSNAME;\nPortal.selector = PORTAL_SELECTOR;\nPortal.displayName = \"Portal\";\nexport { Portal };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/portal/src/portal.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { createPortal } from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\nimport { useEffect, useMemo, useRef, useState } from \"react\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nconst PORTAL_CLASSNAME = \"chakra-portal\"\nconst PORTAL_SELECTOR = `.chakra-portal`\n\nconst Container = (props: React.PropsWithChildren<{ zIndex: number }>) => (\n  <div\n    className=\"chakra-portal-zIndex\"\n    style={{\n      position: \"absolute\",\n      zIndex: props.zIndex,\n      top: 0,\n      left: 0,\n      right: 0,\n      // NB: Don't add `bottom: 0`, it makes the entire app unusable\n      // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n    }}\n  >\n    {props.children}\n  </div>\n)\n\n/**\n * Portal that uses `document.body` as container\n */\nconst DefaultPortal = (\n  props: React.PropsWithChildren<{ appendToParentPortal?: boolean }>,\n) => {\n  const { appendToParentPortal, children } = props\n\n  const [tempNode, setTempNode] = useState<HTMLElement | null>(null)\n  const portal = useRef<HTMLDivElement | null>(null)\n\n  const [, forceUpdate] = useState({})\n  useEffect(() => forceUpdate({}), [])\n\n  const parentPortal = usePortalContext()\n  const manager = usePortalManager()\n\n  useSafeLayoutEffect(() => {\n    if (!tempNode) return\n\n    const doc = tempNode.ownerDocument\n    const host = appendToParentPortal ? parentPortal ?? doc.body : doc.body\n\n    if (!host) return\n\n    portal.current = doc.createElement(\"div\")\n    portal.current.className = PORTAL_CLASSNAME\n\n    host.appendChild(portal.current)\n    forceUpdate({})\n\n    const portalNode = portal.current\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode)\n      }\n    }\n  }, [tempNode])\n\n  const _children = manager?.zIndex ? (\n    <Container zIndex={manager?.zIndex}>{children}</Container>\n  ) : (\n    children\n  )\n\n  return portal.current ? (\n    createPortal(\n      <PortalContextProvider value={portal.current}>\n        {_children}\n      </PortalContextProvider>,\n      portal.current,\n    )\n  ) : (\n    <span\n      ref={(el) => {\n        if (el) setTempNode(el)\n      }}\n    />\n  )\n}\n\ninterface ContainerPortalProps extends React.PropsWithChildren<{}> {\n  containerRef: React.RefObject<HTMLElement | null>\n  /**\n   * @default false\n   */\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal that uses a custom container\n */\nconst ContainerPortal = (props: ContainerPortalProps) => {\n  const { children, containerRef, appendToParentPortal } = props\n  const containerEl = containerRef.current\n  const host =\n    containerEl ?? (typeof window !== \"undefined\" ? document.body : undefined)\n\n  const portal = useMemo(() => {\n    const node = containerEl?.ownerDocument.createElement(\"div\")\n    if (node) node.className = PORTAL_CLASSNAME\n    return node\n  }, [containerEl])\n\n  const [, forceUpdate] = useState({})\n  useSafeLayoutEffect(() => forceUpdate({}), [])\n\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return\n    host.appendChild(portal)\n    return () => {\n      host.removeChild(portal)\n    }\n  }, [portal, host])\n\n  if (host && portal) {\n    return createPortal(\n      <PortalContextProvider value={appendToParentPortal ? portal : null}>\n        {children}\n      </PortalContextProvider>,\n      portal,\n    )\n  }\n\n  return null\n}\n\nexport interface PortalProps {\n  /**\n   * The `ref` to the component where the portal will be attached to.\n   */\n  containerRef?: React.RefObject<HTMLElement | null>\n  /**\n   * The content or node you'll like to portal\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, the portal will check if it is within a parent portal\n   * and append itself to the parent's portal node.\n   * This provides nesting for portals.\n   *\n   * If `false`, the portal will always append to `document.body`\n   * regardless of nesting. It is used to opt out of portal nesting.\n   *\n   * @default true\n   */\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/portal\n */\n\nexport function Portal(props: PortalProps) {\n  const portalProps: PortalProps = {\n    appendToParentPortal: true,\n    ...props,\n  }\n\n  const { containerRef, ...rest } = portalProps\n  return containerRef ? (\n    <ContainerPortal containerRef={containerRef} {...rest} />\n  ) : (\n    <DefaultPortal {...rest} />\n  )\n}\n\nPortal.className = PORTAL_CLASSNAME\nPortal.selector = PORTAL_SELECTOR\n\nPortal.displayName = \"Portal\"\n"]},"metadata":{},"sourceType":"module"}