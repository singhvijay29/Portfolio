{"ast":null,"code":"import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\nconst numVariantProps = variantProps.length;\n\nfunction getClosestProjectingNode(visualElement) {\n  if (!visualElement) return undefined;\n  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\n\nclass VisualElement {\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n    return {};\n  }\n\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      presenceContext,\n      reducedMotionConfig,\n      blockInitialAnimation,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    this.resolveKeyframes = (keyframes, // We use an onComplete callback here rather than a Promise as a Promise\n    // resolution is a microtask and we want to retain the ability to force\n    // the resolution of keyframes synchronously.\n    onComplete, name, value) => {\n      return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n    };\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n\n\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.scheduleRender = () => frame.render(this.render, false, true);\n\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {}, this);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n  }\n\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n\n  unmount() {\n    var _a;\n\n    visualElementStore.delete(this.current);\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    for (const key in this.features) {\n      (_a = this.features[key]) === null || _a === void 0 ? void 0 : _a.unmount();\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.preRender(this.notifyUpdate);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n      if (value.owner) value.stop();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  loadFeatures(_ref2, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n    let {\n      children,\n      ...renderedProps\n    } = _ref2;\n    let ProjectionNodeConstructor;\n    let MeasureLayout;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n\n    if (process.env.NODE_ENV !== \"production\" && preloadedFeatures && isStrict) {\n      const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);\n    }\n\n    for (let i = 0; i < numFeatures; i++) {\n      const name = featureNames[i];\n      const {\n        isEnabled,\n        Feature: FeatureConstructor,\n        ProjectionNode,\n        MeasureLayout: MeasureLayoutComponent\n      } = featureDefinitions[name];\n      if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;\n\n      if (isEnabled(renderedProps)) {\n        if (!this.features[name] && FeatureConstructor) {\n          this.features[name] = new FeatureConstructor(this);\n        }\n\n        if (MeasureLayoutComponent) {\n          MeasureLayout = MeasureLayoutComponent;\n        }\n      }\n    }\n\n    if ((this.type === \"html\" || this.type === \"svg\") && !this.projection && ProjectionNodeConstructor) {\n      const {\n        layoutId,\n        layout,\n        drag,\n        dragConstraints,\n        layoutScroll,\n        layoutRoot\n      } = renderedProps;\n      this.projection = new ProjectionNodeConstructor(this.latestValues, renderedProps[\"data-framer-portal-id\"] ? undefined : getClosestProjectingNode(this.parent));\n      this.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n        visualElement: this,\n        scheduleRender: () => this.scheduleRender(),\n\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig: initialLayoutGroupConfig,\n        layoutScroll,\n        layoutRoot\n      });\n    }\n\n    return MeasureLayout;\n  }\n\n  updateFeatures() {\n    for (const key in this.features) {\n      const feature = this.features[key];\n\n      if (feature.isMounted) {\n        feature.update();\n      } else {\n        feature.mount();\n        feature.isMounted = true;\n      }\n    }\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.options, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n\n\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listenerName = \"on\" + key;\n      const listener = props[listenerName];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n\n\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n\n  getVariantContext() {\n    let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (startAtParent) {\n      return this.parent ? this.parent.getVariantContext() : undefined;\n    }\n\n    if (!this.isControllingVariants) {\n      const context = this.parent ? this.parent.getVariantContext() || {} : {};\n\n      if (this.props.initial !== undefined) {\n        context.initial = this.props.initial;\n      }\n\n      return context;\n    }\n\n    const context = {};\n\n    for (let i = 0; i < numVariantProps; i++) {\n      const name = variantProps[i];\n      const prop = this.props[name];\n\n      if (isVariantLabel(prop) || prop === false) {\n        context[name] = prop;\n      }\n    }\n\n    return context;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n\n\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    const existingValue = this.values.get(key);\n\n    if (value !== existingValue) {\n      if (existingValue) this.removeValue(key);\n      this.bindToMotionValue(key, value);\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n    }\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n\n\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue === null ? undefined : defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n\n\n  readValue(key, target) {\n    var _a;\n\n    let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n    if (value !== undefined && value !== null) {\n      if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n        // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n        value = parseFloat(value);\n      } else if (!findValueType(value) && complex.test(target)) {\n        value = getAnimatableNone(key, target);\n      }\n\n      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n    }\n\n    return isMotionValue(value) ? value.get() : value;\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    let valueFromInitial;\n\n    if (typeof initial === \"string\" || typeof initial === \"object\") {\n      const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n      if (variant) {\n        valueFromInitial = variant[key];\n      }\n    }\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    if (this.events[eventName]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.events[eventName].notify(...args);\n    }\n  }\n\n}\n\nexport { VisualElement };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["warning","invariant","createBox","isRefObject","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","variantProps","visualElementStore","KeyframeResolver","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","frame","cancelFrame","featureNames","Object","keys","numFeatures","length","propEventHandlers","numVariantProps","getClosestProjectingNode","visualElement","undefined","options","allowProjection","projection","parent","VisualElement","scrapeMotionValuesFromProps","_props","_prevProps","_visualElement","constructor","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","resolveKeyframes","keyframes","onComplete","name","value","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","scheduleRender","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","key","set","add","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","update","unmount","_a","delete","remove","clear","valueIsTransform","has","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","owner","stop","sortNodePosition","other","sortInstanceNodePosition","type","loadFeatures","isStrict","preloadedFeatures","initialLayoutGroupConfig","renderedProps","ProjectionNodeConstructor","MeasureLayout","strictMessage","ignoreStrict","i","isEnabled","Feature","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","updateFeatures","feature","isMounted","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","transformTemplate","prevProps","prevPresenceContext","listenerName","listener","handleChildMotionValue","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","getVariantContext","startAtParent","context","prop","child","closestVariantNode","addValue","existingValue","get","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","readValue","target","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","getBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"mappings":"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","sourcesContent":["import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        this.resolveKeyframes = (keyframes, \n        // We use an onComplete callback here rather than a Promise as a Promise\n        // resolution is a microtask and we want to retain the ability to force\n        // the resolution of keyframes synchronously.\n        onComplete, name, value) => {\n            return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n        };\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        var _a;\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            (_a = this.features[key]) === null || _a === void 0 ? void 0 : _a.unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if ((this.type === \"html\" || this.type === \"svg\") &&\n            !this.projection &&\n            ProjectionNodeConstructor) {\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection = new ProjectionNodeConstructor(this.latestValues, renderedProps[\"data-framer-portal-id\"]\n                ? undefined\n                : getClosestProjectingNode(this.parent));\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"]},"metadata":{},"sourceType":"module"}