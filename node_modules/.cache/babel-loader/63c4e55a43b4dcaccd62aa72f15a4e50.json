{"ast":null,"code":"'use client';\n\nimport { useTheme } from \"./chunk-UIGT7YZF.mjs\"; // src/hooks.ts\n\nimport { useColorMode } from \"@chakra-ui/color-mode\";\n\nfunction useChakra() {\n  const colorModeResult = useColorMode();\n  const theme = useTheme();\n  return { ...colorModeResult,\n    theme\n  };\n}\n\nfunction getBreakpointValue(theme, value, fallback) {\n  var _a, _b;\n\n  if (value == null) return value;\n\n  const getValue = val => {\n    var _a2, _b2;\n\n    return (_b2 = (_a2 = theme.__breakpoints) == null ? void 0 : _a2.asArray) == null ? void 0 : _b2[val];\n  };\n\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\n\nfunction getTokenValue(theme, value, fallback) {\n  var _a, _b;\n\n  if (value == null) return value;\n\n  const getValue = val => {\n    var _a2, _b2;\n\n    return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.value;\n  };\n\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\n\nfunction useToken(scale, token, fallback) {\n  const theme = useTheme();\n  return getToken(scale, token, fallback)(theme);\n}\n\nfunction getToken(scale, token, fallback) {\n  const _token = Array.isArray(token) ? token : [token];\n\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback];\n\n  return theme => {\n    const fallbackArr = _fallback.filter(Boolean);\n\n    const result = _token.map((token2, index) => {\n      var _a, _b;\n\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token2, (_a = fallbackArr[index]) != null ? _a : token2);\n      }\n\n      const path = `${scale}.${token2}`;\n      return getTokenValue(theme, path, (_b = fallbackArr[index]) != null ? _b : token2);\n    });\n\n    return Array.isArray(token) ? result : result[0];\n  };\n}\n\nexport { useChakra, useToken, getToken };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/system/src/hooks.ts"],"names":["token"],"mappings":"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","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { Dict, StringOrNumber } from \"@chakra-ui/utils\"\nimport { useTheme } from \"./use-theme\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nfunction getBreakpointValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__breakpoints?.asArray?.[val]\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\nfunction getTokenValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__cssMap?.[val]?.value\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\n/**\n * `useToken` is a custom hook used to resolve design tokens from the theme.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-token\n */\nexport function useToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n) {\n  const theme = useTheme()\n  return getToken(scale, token, fallback)(theme)\n}\n\nexport function getToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n): (theme: Dict) => T {\n  const _token = Array.isArray(token) ? token : [token]\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback]\n  return (theme: Dict<any>) => {\n    const fallbackArr = _fallback.filter(Boolean) as T[]\n    const result = _token.map((token, index) => {\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token, fallbackArr[index] ?? token)\n      }\n      const path = `${scale}.${token}`\n      return getTokenValue(theme, path, fallbackArr[index] ?? token)\n    })\n    return Array.isArray(token) ? result : result[0]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}