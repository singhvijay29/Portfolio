{"ast":null,"code":"'use client'; // src/use-radio-group.ts\n\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useRef, useState, useId } from \"react\";\n\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\n\nfunction useRadioGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props;\n  const [valueState, setValue] = useState(defaultValue || \"\");\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const ref = useRef(null);\n  const focus = useCallback(() => {\n    const rootNode = ref.current;\n    if (!rootNode) return;\n    let query = `input:not(:disabled):checked`;\n    const firstEnabledAndCheckedInput = rootNode.querySelector(query);\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n\n    query = `input:not(:disabled)`;\n    const firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  const uuid = useId();\n  const fallbackName = `radio-${uuid}`;\n  const name = nameProp || fallbackName;\n  const onChange = useCallback(eventOrValue => {\n    const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    };\n  }, []);\n  const getRadioProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return { ...props2,\n      ref: ref2,\n      name,\n      [checkedKey]: value != null ? props2.value === value : void 0,\n\n      onChange(event) {\n        onChange(event);\n      },\n\n      \"data-radiogroup\": true\n    };\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps\n  };\n}\n\nexport { useRadioGroup };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/radio/src/use-radio-group.ts"],"names":["props","ref"],"mappings":"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","sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useRef, useState, useId } from \"react\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | string | number\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: string\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: string\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\n/**\n * `useRadioGroup` is a custom hook that provides all the state management logic for a group of radios.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio-group\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<string | number>(defaultValue || \"\")\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const uuid = useId()\n  const fallbackName = `radio-${uuid}`\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: PropGetter<\n    InputDOMAttributes & { isChecked?: boolean },\n    InputDOMAttributes\n  > = useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange(event) {\n          onChange(event as any)\n        },\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"]},"metadata":{},"sourceType":"module"}