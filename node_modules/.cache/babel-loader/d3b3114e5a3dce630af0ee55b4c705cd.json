{"ast":null,"code":"import { scrollInfo } from './track.mjs';\nimport { observeTimeline } from './observe.mjs';\nimport { supportsScrollTimeline } from './supports.mjs';\n\nfunction scrollTimelineFallback(_ref) {\n  let {\n    source,\n    axis = \"y\"\n  } = _ref;\n  // ScrollTimeline records progress as a percentage CSSUnitValue\n  const currentTime = {\n    value: 0\n  };\n  const cancel = scrollInfo(info => {\n    currentTime.value = info[axis].progress * 100;\n  }, {\n    container: source,\n    axis\n  });\n  return {\n    currentTime,\n    cancel\n  };\n}\n\nconst timelineCache = new Map();\n\nfunction getTimeline() {\n  let {\n    source = document.documentElement,\n    axis = \"y\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!timelineCache.has(source)) {\n    timelineCache.set(source, {});\n  }\n\n  const elementCache = timelineCache.get(source);\n\n  if (!elementCache[axis]) {\n    elementCache[axis] = supportsScrollTimeline() ? new ScrollTimeline({\n      source,\n      axis\n    }) : scrollTimelineFallback({\n      source,\n      axis\n    });\n  }\n\n  return elementCache[axis];\n}\n\nfunction scroll(onScroll, options) {\n  const timeline = getTimeline(options);\n\n  if (typeof onScroll === \"function\") {\n    return observeTimeline(onScroll, timeline);\n  } else {\n    return onScroll.attachTimeline(timeline);\n  }\n}\n\nexport { scroll };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/dom/scroll/index.mjs"],"names":["scrollInfo","observeTimeline","supportsScrollTimeline","scrollTimelineFallback","source","axis","currentTime","value","cancel","info","progress","container","timelineCache","Map","getTimeline","document","documentElement","has","set","elementCache","get","ScrollTimeline","scroll","onScroll","options","timeline","attachTimeline"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,sBAAT,QAAuC,gBAAvC;;AAEA,SAASC,sBAAT,OAAwD;AAAA,MAAxB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAI,GAAG;AAAjB,GAAwB;AACpD;AACA,QAAMC,WAAW,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApB;AACA,QAAMC,MAAM,GAAGR,UAAU,CAAES,IAAD,IAAU;AAChCH,IAAAA,WAAW,CAACC,KAAZ,GAAoBE,IAAI,CAACJ,IAAD,CAAJ,CAAWK,QAAX,GAAsB,GAA1C;AACH,GAFwB,EAEtB;AAAEC,IAAAA,SAAS,EAAEP,MAAb;AAAqBC,IAAAA;AAArB,GAFsB,CAAzB;AAGA,SAAO;AAAEC,IAAAA,WAAF;AAAeE,IAAAA;AAAf,GAAP;AACH;;AACD,MAAMI,aAAa,GAAG,IAAIC,GAAJ,EAAtB;;AACA,SAASC,WAAT,GAA8E;AAAA,MAAzD;AAAEV,IAAAA,MAAM,GAAGW,QAAQ,CAACC,eAApB;AAAqCX,IAAAA,IAAI,GAAG;AAA5C,GAAyD,uEAAJ,EAAI;;AAC1E,MAAI,CAACO,aAAa,CAACK,GAAd,CAAkBb,MAAlB,CAAL,EAAgC;AAC5BQ,IAAAA,aAAa,CAACM,GAAd,CAAkBd,MAAlB,EAA0B,EAA1B;AACH;;AACD,QAAMe,YAAY,GAAGP,aAAa,CAACQ,GAAd,CAAkBhB,MAAlB,CAArB;;AACA,MAAI,CAACe,YAAY,CAACd,IAAD,CAAjB,EAAyB;AACrBc,IAAAA,YAAY,CAACd,IAAD,CAAZ,GAAqBH,sBAAsB,KACrC,IAAImB,cAAJ,CAAmB;AAAEjB,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAnB,CADqC,GAErCF,sBAAsB,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,CAF5B;AAGH;;AACD,SAAOc,YAAY,CAACd,IAAD,CAAnB;AACH;;AACD,SAASiB,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;AAC/B,QAAMC,QAAQ,GAAGX,WAAW,CAACU,OAAD,CAA5B;;AACA,MAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAChC,WAAOtB,eAAe,CAACsB,QAAD,EAAWE,QAAX,CAAtB;AACH,GAFD,MAGK;AACD,WAAOF,QAAQ,CAACG,cAAT,CAAwBD,QAAxB,CAAP;AACH;AACJ;;AAED,SAASH,MAAT","sourcesContent":["import { scrollInfo } from './track.mjs';\nimport { observeTimeline } from './observe.mjs';\nimport { supportsScrollTimeline } from './supports.mjs';\n\nfunction scrollTimelineFallback({ source, axis = \"y\" }) {\n    // ScrollTimeline records progress as a percentage CSSUnitValue\n    const currentTime = { value: 0 };\n    const cancel = scrollInfo((info) => {\n        currentTime.value = info[axis].progress * 100;\n    }, { container: source, axis });\n    return { currentTime, cancel };\n}\nconst timelineCache = new Map();\nfunction getTimeline({ source = document.documentElement, axis = \"y\", } = {}) {\n    if (!timelineCache.has(source)) {\n        timelineCache.set(source, {});\n    }\n    const elementCache = timelineCache.get(source);\n    if (!elementCache[axis]) {\n        elementCache[axis] = supportsScrollTimeline()\n            ? new ScrollTimeline({ source, axis })\n            : scrollTimelineFallback({ source, axis });\n    }\n    return elementCache[axis];\n}\nfunction scroll(onScroll, options) {\n    const timeline = getTimeline(options);\n    if (typeof onScroll === \"function\") {\n        return observeTimeline(onScroll, timeline);\n    }\n    else {\n        return onScroll.attachTimeline(timeline);\n    }\n}\n\nexport { scroll };\n"]},"metadata":{},"sourceType":"module"}