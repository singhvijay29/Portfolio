{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\"; // src/use-event-listener.ts\n\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useEffect } from \"react\";\n\nfunction useEventListener(event, handler, env, options) {\n  const listener = useCallbackRef(handler);\n  useEffect(() => {\n    var _a;\n\n    const node = (_a = runIfFn(env)) != null ? _a : document;\n\n    if (!handler) {\n      return;\n    }\n\n    node.addEventListener(event, listener, options);\n    return () => {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener, handler]);\n  return () => {\n    var _a;\n\n    const node = (_a = runIfFn(env)) != null ? _a : document;\n    node.removeEventListener(event, listener, options);\n  };\n}\n\nexport { useEventListener };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-event-listener.ts"],"names":[],"mappings":";;;;AAAA,SAAS,OAAT,QAAwB,kBAAxB;AACA,SAAS,SAAT,QAA0B,OAA1B;;AAiBO,SAAS,gBAAT,CACL,KADK,EAEL,OAFK,EAGL,GAHK,EAIL,OAJK,EAKL;AACA,QAAM,QAAA,GAAW,cAAA,CAAe,OAAf,CAAjB;AAEA,EAAA,SAAA,CAAU,MAAM;AA1BlB,QAAA,EAAA;;AA2BI,UAAM,IAAA,GAAA,CAAO,EAAA,GAAA,OAAA,CAAQ,GAAR,CAAP,KAAO,IAAP,GAAO,EAAP,GAAuB,QAA7B;;AAEA,QAAI,CAAC,OAAL,EAAc;AACZ;AACF;;AAEA,IAAA,IAAA,CAAK,gBAAL,CAAsB,KAAtB,EAA6B,QAA7B,EAAuC,OAAvC;AACA,WAAO,MAAM;AACX,MAAA,IAAA,CAAK,mBAAL,CAAyB,KAAzB,EAAgC,QAAhC,EAA0C,OAA1C;AACF,KAFA;AAGF,GAXA,EAWG,CAAC,KAAD,EAAQ,GAAR,EAAa,OAAb,EAAsB,QAAtB,EAAgC,OAAhC,CAXH,CAAA;AAaA,SAAO,MAAM;AAvCf,QAAA,EAAA;;AAwCI,UAAM,IAAA,GAAA,CAAO,EAAA,GAAA,OAAA,CAAQ,GAAR,CAAP,KAAO,IAAP,GAAO,EAAP,GAAuB,QAA7B;AACA,IAAA,IAAA,CAAK,mBAAL,CAAyB,KAAzB,EAAgC,QAAhC,EAA0C,OAA1C;AACF,GAHA;AAIF","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport { useEffect } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ntype DocumentOrElement = Document | HTMLElement | null\n\nexport type EventListenerEnv = (() => DocumentOrElement) | DocumentOrElement\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param env the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler?: (event: DocumentEventMap[K]) => void,\n  env?: EventListenerEnv,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const listener = useCallbackRef(handler) as EventListener\n\n  useEffect(() => {\n    const node = runIfFn(env) ?? document\n\n    if (!handler) {\n      return\n    }\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, listener, handler])\n\n  return () => {\n    const node = runIfFn(env) ?? document\n    node.removeEventListener(event, listener, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}