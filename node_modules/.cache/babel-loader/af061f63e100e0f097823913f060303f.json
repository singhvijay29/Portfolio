{"ast":null,"code":"'use client';\n\nimport { useUpdateEffect } from \"./chunk-6WEF4DIO.mjs\"; // src/use-focus-on-hide.ts\n\nimport { contains, focus, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\n\nfunction preventReturnFocus(containerRef) {\n  const el = containerRef.current;\n  if (!el) return false;\n  const activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\n\nfunction useFocusOnHide(containerRef, options) {\n  const {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  const shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n\n    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n\n    if (el) {\n      focus(el, {\n        nextTick: true\n      });\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\n\nexport { useFocusOnHide };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-focus-on-hide.ts"],"names":[],"mappings":";;;;AAAA,SACE,QADF,EAEE,KAFF,EAIE,gBAJF,EAKE,UALF,QAMO,kBANP;;AAgBA,SAAS,kBAAT,CAA4B,YAA5B,EAAwE;AACtE,QAAM,EAAA,GAAK,YAAA,CAAa,OAAxB;AACA,MAAI,CAAC,EAAL,EAAS,OAAO,KAAP;AAET,QAAM,aAAA,GAAgB,gBAAA,CAAiB,EAAjB,CAAtB;AAEA,MAAI,CAAC,aAAL,EAAoB,OAAO,KAAP;AACpB,MAAI,QAAA,CAAS,EAAT,EAAa,aAAb,CAAJ,EAAiC,OAAO,KAAP;AACjC,MAAI,UAAA,CAAW,aAAX,CAAJ,EAA+B,OAAO,IAAP;AAE/B,SAAO,KAAP;AACF;;AASO,SAAS,cAAT,CACL,YADK,EAEL,OAFK,EAGL;AACA,QAAM;AAAE,IAAA,WAAA,EAAa,eAAf;AAAgC,IAAA,OAAhC;AAAyC,IAAA;AAAzC,MAAsD,OAA5D;AAEA,QAAM,WAAA,GAAc,eAAA,IAAmB,CAAC,OAAxC;AAEA,EAAA,eAAA,CAAgB,MAAM;AACpB,QAAI,CAAC,WAAL,EAAkB;;AAElB,QAAI,kBAAA,CAAmB,YAAnB,CAAJ,EAAsC;AACpC;AACF;;AAEA,UAAM,EAAA,GAAA,CAAK,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,OAAf,KAA0B,YAAA,CAAa,OAA7C;;AAEA,QAAI,EAAJ,EAAQ;AACN,MAAA,KAAA,CAAM,EAAN,EAAU;AAAE,QAAA,QAAA,EAAU;AAAZ,OAAV,CAAA;AACF;AACF,GAZA,EAYG,CAAC,WAAD,EAAc,YAAd,EAA4B,QAA5B,CAZH,CAAA;AAaF","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getActiveElement,\n  isTabbable,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (contains(el, activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      focus(el, { nextTick: true })\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n"]},"metadata":{},"sourceType":"module"}