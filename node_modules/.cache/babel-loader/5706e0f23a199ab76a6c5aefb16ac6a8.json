{"ast":null,"code":"'use client';\n\nimport { useRadioGroupContext } from \"./chunk-FESYGSQT.mjs\"; // src/use-radio.ts\n\nimport { useFormControlContext } from \"@chakra-ui/form-control\";\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"; // ../visually-hidden/src/visually-hidden.style.ts\n\nvar visuallyHiddenStyle = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n}; // src/use-radio.ts\n\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useState, useId } from \"react\";\n\nfunction useRadio() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props;\n  const uuid = `radio-${useId()}`;\n  const formControl = useFormControlContext();\n  const group = useRadioGroupContext();\n  const isWithinRadioGroup = !!group || !!dataRadioGroup;\n  const isWithinFormControl = !!formControl;\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  const isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  const isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  const isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  const isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovering] = useState(false);\n  const [isActive, setActive] = useState(false);\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked));\n  const isControlled = typeof isCheckedProp !== \"undefined\";\n  const isChecked = isControlled ? isCheckedProp : isCheckedState;\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  const onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  const getRadioProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, () => setActive(true)),\n      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovering(true)),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovering(false))\n    };\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, isFocusVisible]);\n  const {\n    onFocus,\n    onBlur\n  } = formControl != null ? formControl : {};\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const trulyDisabled = isDisabled && !isFocusable;\n    return { ...props2,\n      id,\n      ref,\n      type: \"radio\",\n      name,\n      value,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props2.onBlur, () => setFocused(false)),\n      onFocus: callAllHandlers(onFocus, props2.onFocus, () => setFocused(true)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-required\": ariaAttr(isRequired),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-describedby\": ariaDescribedBy,\n      style: visuallyHiddenStyle\n    };\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid, ariaDescribedBy]);\n\n  const getLabelProps = function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  };\n\n  const getRootProps = function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  };\n\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps\n  };\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nexport { useRadio };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/radio/src/use-radio.ts","/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/visually-hidden/src/visually-hidden.style.ts"],"names":["props"],"mappings":"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","sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   *\n   * @default false\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @default false\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n  /**\n   * Refers to the `id` of the element that labels the radio element.\n   */\n  \"aria-describedby\"?: string\n}\n\nexport interface RadioState {\n  isInvalid: boolean | undefined\n  isFocused: boolean\n  isChecked: boolean\n  isActive: boolean\n  isHovered: boolean\n  isDisabled: boolean | undefined\n  isReadOnly: boolean | undefined\n  isRequired: boolean | undefined\n}\n\n/**\n * `useRadio` is a custom hook used to provide radio functionality, as well as state and focus management to custom radio components when using it.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio\n */\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const uuid = `radio-${useId()}`\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovering] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const isControlled = typeof isCheckedProp !== \"undefined\"\n  const isChecked = isControlled ? isCheckedProp : isCheckedState\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  const getRadioProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, () => setActive(true)),\n      onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n        setHovering(true),\n      ),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n        setHovering(false),\n      ),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      isFocusVisible,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => {\n        const trulyDisabled = isDisabled && !isFocusable\n\n        return {\n          ...props,\n          id,\n          ref,\n          type: \"radio\",\n          name,\n          value,\n          onChange: callAllHandlers(props.onChange, handleChange),\n          onBlur: callAllHandlers(onBlur, props.onBlur, () =>\n            setFocused(false),\n          ),\n          onFocus: callAllHandlers(onFocus, props.onFocus, () =>\n            setFocused(true),\n          ),\n          onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n          onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n          checked: isChecked,\n          disabled: trulyDisabled,\n          readOnly: isReadOnly,\n          required: isRequired,\n          \"aria-invalid\": ariaAttr(isInvalid),\n          \"aria-disabled\": ariaAttr(trulyDisabled),\n          \"aria-required\": ariaAttr(isRequired),\n          \"data-readonly\": dataAttr(isReadOnly),\n          \"aria-describedby\": ariaDescribedBy,\n          style: visuallyHiddenStyle,\n        }\n      },\n      [\n        isDisabled,\n        isFocusable,\n        id,\n        name,\n        value,\n        handleChange,\n        onBlur,\n        onFocus,\n        onKeyDown,\n        onKeyUp,\n        isChecked,\n        isReadOnly,\n        isRequired,\n        isInvalid,\n        ariaDescribedBy,\n      ],\n    )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const getRootProps: PropGetter = (props, ref = null) => ({\n    ...props,\n    ref,\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const state: RadioState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the radio label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n","/**\n * Styles to visually hide an element\n * but make it accessible to screen-readers\n */\nexport const visuallyHiddenStyle: React.CSSProperties = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n"]},"metadata":{},"sourceType":"module"}