{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useMemo } from \"react\";\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\n\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return node => {\n    refs.forEach(ref => {\n      assignRef(ref, node);\n    });\n  };\n}\n\nfunction useMergeRefs() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n\n  return useMemo(() => mergeRefs(...refs), refs);\n}\n\nexport { assignRef, mergeRefs, useMergeRefs };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"names":[],"mappings":";;AAAA,SAAS,OAAT,QAAwB,OAAxB;;AAIO,SAAS,SAAT,CACL,GADK,EAEL,KAFK,EAGL;AACA,MAAI,GAAA,IAAO,IAAX,EAAiB;;AAEjB,MAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AAC7B,IAAA,GAAA,CAAI,KAAJ,CAAA;AACA;AACF;;AAEA,MAAI;AACF,IAAA,GAAA,CAAI,OAAJ,GAAc,KAAd;AACF,GAFA,CAEA,OAAS,KAAT,EAAE;AACA,UAAM,IAAI,KAAJ,CAAU,wBAAwB,KAAA,aAAkB,GAAA,GAApD,CAAN;AACF;AACF;;AAEO,SAAS,SAAT,GAAmE;AAAA,oCAA1C,IAA0C;AAA1C,IAAA,IAA0C;AAAA;;AACxE,SAAQ,IAAD,IAAoB;AACzB,IAAA,IAAA,CAAK,OAAL,CAAc,GAAD,IAAS;AACpB,MAAA,SAAA,CAAU,GAAV,EAAe,IAAf,CAAA;AACD,KAFD;AAGF,GAJA;AAKF;;AAEO,SAAS,YAAT,GAAsE;AAAA,qCAA1C,IAA0C;AAA1C,IAAA,IAA0C;AAAA;;AAE3E,SAAO,OAAA,CAAQ,MAAM,SAAA,CAAU,GAAG,IAAb,CAAd,EAAkC,IAAlC,CAAP;AACF","sourcesContent":["import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"]},"metadata":{},"sourceType":"module"}