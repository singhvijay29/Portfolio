{"ast":null,"code":"'use client'; // src/use-tooltip.ts\n\nimport { getScrollParent } from \"@chakra-ui/dom-utils\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useId, useRef } from \"react\";\n\nvar getDoc = ref => {\n  var _a;\n\n  return ((_a = ref.current) == null ? void 0 : _a.ownerDocument) || document;\n};\n\nvar getWin = ref => {\n  var _a, _b;\n\n  return ((_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) == null ? void 0 : _b.defaultView) || window;\n};\n\nfunction useTooltip() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    closeOnScroll,\n    closeOnPointerDown = closeOnMouseDown,\n    closeOnEsc = true,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props;\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  const {\n    referenceRef,\n    getPopperProps,\n    getArrowInnerProps,\n    getArrowProps\n  } = usePopper({\n    enabled: isOpen,\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n    direction\n  });\n  const uuid = useId();\n  const uid = id != null ? id : uuid;\n  const tooltipId = `tooltip-${uid}`;\n  const ref = useRef(null);\n  const enterTimeout = useRef();\n  const clearEnterTimeout = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n      enterTimeout.current = void 0;\n    }\n  }, []);\n  const exitTimeout = useRef();\n  const clearExitTimeout = useCallback(() => {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current);\n      exitTimeout.current = void 0;\n    }\n  }, []);\n  const closeNow = useCallback(() => {\n    clearExitTimeout();\n    onClose();\n  }, [onClose, clearExitTimeout]);\n  const dispatchCloseEvent = useCloseEvent(ref, closeNow);\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent();\n      const win = getWin(ref);\n      enterTimeout.current = win.setTimeout(onOpen, openDelay);\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay]);\n  const closeWithDelay = useCallback(() => {\n    clearEnterTimeout();\n    const win = getWin(ref);\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay);\n  }, [closeDelay, closeNow, clearEnterTimeout]);\n  const onClick = useCallback(() => {\n    if (isOpen && closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay, isOpen]);\n  const onPointerDown = useCallback(() => {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay();\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen]);\n  const onKeyDown = useCallback(event => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  }, [isOpen, closeWithDelay]);\n  useEventListener(() => getDoc(ref), \"keydown\", closeOnEsc ? onKeyDown : void 0);\n  useEventListener(() => {\n    if (!closeOnScroll) return null;\n    const node = ref.current;\n    if (!node) return null;\n    const scrollParent = getScrollParent(node);\n    return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent;\n  }, \"scroll\", () => {\n    if (isOpen && closeOnScroll) {\n      closeNow();\n    }\n  }, {\n    passive: true,\n    capture: true\n  });\n  useEffect(() => {\n    if (!isDisabled) return;\n    clearEnterTimeout();\n    if (isOpen) onClose();\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout]);\n  useEffect(() => {\n    return () => {\n      clearEnterTimeout();\n      clearExitTimeout();\n    };\n  }, [clearEnterTimeout, clearExitTimeout]);\n  useEventListener(() => ref.current, \"pointerleave\", closeWithDelay);\n  const getTriggerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const triggerProps = { ...props2,\n      ref: mergeRefs(ref, _ref, referenceRef),\n      onPointerEnter: callAllHandlers(props2.onPointerEnter, e => {\n        if (e.pointerType === \"touch\") return;\n        openWithDelay();\n      }),\n      onClick: callAllHandlers(props2.onClick, onClick),\n      onPointerDown: callAllHandlers(props2.onPointerDown, onPointerDown),\n      onFocus: callAllHandlers(props2.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props2.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : void 0\n    };\n    return triggerProps;\n  }, [openWithDelay, closeWithDelay, onPointerDown, isOpen, tooltipId, onClick, referenceRef]);\n  const getTooltipPositionerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps({ ...props2,\n      style: { ...props2.style,\n        [popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      }\n    }, forwardedRef);\n  }, [getPopperProps, arrowSize, arrowShadowColor]);\n  const getTooltipProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const styles = { ...props2.style,\n      position: \"relative\",\n      transformOrigin: popperCSSVars.transformOrigin.varRef\n    };\n    return {\n      ref: ref2,\n      ...htmlProps,\n      ...props2,\n      id: tooltipId,\n      role: \"tooltip\",\n      style: styles\n    };\n  }, [htmlProps, tooltipId]);\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps\n  };\n}\n\nvar closeEventName = \"chakra-ui:close-tooltip\";\n\nfunction useCloseEvent(ref, close) {\n  useEffect(() => {\n    const doc = getDoc(ref);\n    doc.addEventListener(closeEventName, close);\n    return () => doc.removeEventListener(closeEventName, close);\n  }, [close, ref]);\n  return () => {\n    const doc = getDoc(ref);\n    const win = getWin(ref);\n    doc.dispatchEvent(new win.CustomEvent(closeEventName));\n  };\n}\n\nexport { useTooltip };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/tooltip/src/use-tooltip.ts"],"names":["props","ref"],"mappings":"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","sourcesContent":["import { getScrollParent } from \"@chakra-ui/dom-utils\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport React, {\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  type RefObject,\n} from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowPadding\"\n    | \"direction\"\n    | \"placement\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   * @default true\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse is down\n   * @deprecated - use `closeOnPointerDown` instead\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * If `true`, the tooltip will hide while the pointer is down\n   * @default true\n   */\n  closeOnPointerDown?: boolean\n  /**\n   * If `true`, the tooltip will hide on pressing Esc key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   * @default false\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   * @default false\n   */\n  defaultIsOpen?: boolean\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * @default false\n   */\n  closeOnScroll?: boolean\n  /**\n   * @default 10\n   */\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nconst getDoc = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument || document\n\nconst getWin = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument?.defaultView || window\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    closeOnScroll,\n    closeOnPointerDown = closeOnMouseDown,\n    closeOnEsc = true,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } =\n    usePopper({\n      enabled: isOpen,\n      placement,\n      arrowPadding,\n      modifiers,\n      gutter,\n      offset,\n      direction,\n    })\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const tooltipId = `tooltip-${uid}`\n\n  const ref = useRef<HTMLElement>(null)\n\n  const enterTimeout = useRef<number>()\n  const clearEnterTimeout = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n      enterTimeout.current = undefined\n    }\n  }, [])\n\n  const exitTimeout = useRef<number>()\n  const clearExitTimeout = useCallback(() => {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current)\n      exitTimeout.current = undefined\n    }\n  }, [])\n\n  const closeNow = useCallback(() => {\n    clearExitTimeout()\n    onClose()\n  }, [onClose, clearExitTimeout])\n\n  const dispatchCloseEvent = useCloseEvent(ref, closeNow)\n\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent()\n      const win = getWin(ref)\n      enterTimeout.current = win.setTimeout(onOpen, openDelay)\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay])\n\n  const closeWithDelay = useCallback(() => {\n    clearEnterTimeout()\n    const win = getWin(ref)\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay)\n  }, [closeDelay, closeNow, clearEnterTimeout])\n\n  const onClick = useCallback(() => {\n    if (isOpen && closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay, isOpen])\n\n  const onPointerDown = useCallback(() => {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay()\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (isOpen && event.key === \"Escape\") {\n        closeWithDelay()\n      }\n    },\n    [isOpen, closeWithDelay],\n  )\n\n  useEventListener(\n    () => getDoc(ref),\n    \"keydown\",\n    closeOnEsc ? onKeyDown : undefined,\n  )\n\n  useEventListener(\n    () => {\n      if (!closeOnScroll) return null\n      const node = ref.current\n      if (!node) return null\n      const scrollParent = getScrollParent(node)\n      return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent\n    },\n    \"scroll\",\n    () => {\n      if (isOpen && closeOnScroll) {\n        closeNow()\n      }\n    },\n    { passive: true, capture: true },\n  )\n\n  useEffect(() => {\n    if (!isDisabled) return\n    clearEnterTimeout()\n    if (isOpen) onClose()\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout])\n\n  useEffect(() => {\n    return () => {\n      clearEnterTimeout()\n      clearExitTimeout()\n    }\n  }, [clearEnterTimeout, clearExitTimeout])\n\n  /**\n   * This allows for catching pointerleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onPointerLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(() => ref.current, \"pointerleave\", closeWithDelay)\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, referenceRef),\n        onPointerEnter: callAllHandlers(props.onPointerEnter, (e) => {\n          if (e.pointerType === \"touch\") return\n          openWithDelay()\n        }),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onPointerDown: callAllHandlers(props.onPointerDown, onPointerDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onPointerDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      referenceRef,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            ...props.style,\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? `${arrowSize}px`\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n          },\n        },\n        forwardedRef,\n      ),\n    [getPopperProps, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const styles: React.CSSProperties = {\n        ...props.style,\n        position: \"relative\",\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n      }\n\n      return {\n        ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: styles,\n      }\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n\nconst closeEventName = \"chakra-ui:close-tooltip\"\n\nfunction useCloseEvent(ref: RefObject<Element>, close: () => void) {\n  useEffect(() => {\n    const doc = getDoc(ref)\n    doc.addEventListener(closeEventName, close)\n    return () => doc.removeEventListener(closeEventName, close)\n  }, [close, ref])\n\n  return () => {\n    const doc = getDoc(ref)\n    const win = getWin(ref)\n    doc.dispatchEvent(new win.CustomEvent(closeEventName))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}