{"ast":null,"code":"'use client'; // src/use-id.ts\n\nimport { useCallback, useId as useReactId, useMemo, useState } from \"react\";\n\nfunction useId(idProp, prefix) {\n  const id = useReactId();\n  return useMemo(() => idProp || [prefix, id].filter(Boolean).join(\"-\"), [idProp, prefix, id]);\n}\n\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  const id = useId(idProp);\n  return useMemo(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\n\nfunction useOptionalPart(partId) {\n  const [id, setId] = useState(null);\n  const ref = useCallback(node => {\n    setId(node ? partId : null);\n  }, [partId]);\n  return {\n    ref,\n    id,\n    isRendered: Boolean(id)\n  };\n}\n\nexport { useId, useIds, useOptionalPart };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-id.ts"],"names":[],"mappings":";;AAAA,SAAS,WAAT,EAAsB,KAAA,IAAS,UAA/B,EAA2C,OAA3C,EAAoD,QAApD,QAAoE,OAApE;;AAEO,SAAS,KAAT,CAAe,MAAf,EAAgC,MAAhC,EAAyD;AAC9D,QAAM,EAAA,GAAK,UAAA,EAAX;AAEA,SAAO,OAAA,CACL,MAAM,MAAA,IAAU,CAAC,MAAD,EAAS,EAAT,EAAa,MAAb,CAAoB,OAApB,EAA6B,IAA7B,CAAkC,GAAlC,CADX,EAEL,CAAC,MAAD,EAAS,MAAT,EAAiB,EAAjB,CAFK,CAAP;AAIF;;AAiBO,SAAS,MAAT,CAAgB,MAAhB,EAAwD;AAAA,oCAApB,QAAoB;AAApB,IAAA,QAAoB;AAAA;;AAC7D,QAAM,EAAA,GAAK,KAAA,CAAM,MAAN,CAAX;AACA,SAAO,OAAA,CAAQ,MAAM;AACnB,WAAO,QAAA,CAAS,GAAT,CAAc,MAAD,IAAY,GAAG,MAAM,IAAI,EAAE,EAAxC,CAAP;AACF,GAFO,EAEJ,CAAC,EAAD,EAAK,QAAL,CAFI,CAAP;AAGF;;AAWO,SAAS,eAAT,CAAkC,MAAlC,EAAkD;AACvD,QAAM,CAAC,EAAD,EAAK,KAAL,IAAc,QAAA,CAAwB,IAAxB,CAApB;AACA,QAAM,GAAA,GAAM,WAAA,CACT,IAAD,IAAa;AACX,IAAA,KAAA,CAAM,IAAA,GAAO,MAAP,GAAgB,IAAtB,CAAA;AACF,GAHU,EAIV,CAAC,MAAD,CAJU,CAAZ;AAMA,SAAO;AAAE,IAAA,GAAF;AAAO,IAAA,EAAP;AAAW,IAAA,UAAA,EAAY,OAAA,CAAQ,EAAR;AAAvB,GAAP;AACF","sourcesContent":["import { useCallback, useId as useReactId, useMemo, useState } from \"react\"\n\nexport function useId(idProp?: string, prefix?: string): string {\n  const id = useReactId()\n\n  return useMemo(\n    () => idProp || [prefix, id].filter(Boolean).join(\"-\"),\n    [idProp, prefix, id],\n  )\n}\n\n/**\n * React hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered, so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\nexport function useOptionalPart<T = any>(partId: string) {\n  const [id, setId] = useState<string | null>(null)\n  const ref = useCallback(\n    (node: T) => {\n      setId(node ? partId : null)\n    },\n    [partId],\n  )\n  return { ref, id, isRendered: Boolean(id) }\n}\n"]},"metadata":{},"sourceType":"module"}