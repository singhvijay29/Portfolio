{"ast":null,"code":"// src/css-calc.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\n\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n\n  return String(operand);\n}\n\nvar toExpr = function (operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n\n  return operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\");\n};\n\nvar add = function () {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n\n  return `calc(${toExpr(\"+\", ...operands)})`;\n};\n\nvar subtract = function () {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n\n  return `calc(${toExpr(\"-\", ...operands)})`;\n};\n\nvar multiply = function () {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n\n  return `calc(${toExpr(\"*\", ...operands)})`;\n};\n\nvar divide = function () {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n\n  return `calc(${toExpr(\"/\", ...operands)})`;\n};\n\nvar negate = x => {\n  const value = toRef(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n\n  return multiply(value, -1);\n};\n\nvar calc = Object.assign(x => ({\n  add: function () {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n\n    return calc(add(x, ...operands));\n  },\n  subtract: function () {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n\n    return calc(subtract(x, ...operands));\n  },\n  multiply: function () {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n\n    return calc(multiply(x, ...operands));\n  },\n  divide: function () {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n\n    return calc(divide(x, ...operands));\n  },\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/theme-tools/src/css-calc.ts"],"names":[],"mappings":"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","sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"]},"metadata":{},"sourceType":"module"}