{"ast":null,"code":"'use client';\n\nimport { useIsFirstRender } from \"./chunk-AASO4CLC.mjs\"; // src/skeleton.tsx\n\nimport { usePrevious } from \"@chakra-ui/react-use-previous\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, cssVar, forwardRef, keyframes, omitThemingProps, useStyleConfig, useToken } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = cssVar(\"skeleton-start-color\");\nvar $endColor = cssVar(\"skeleton-end-color\");\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar Skeleton = forwardRef((props, ref) => {\n  const skeletonProps = { ...props,\n    fadeDuration: typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8\n  };\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps);\n  const isFirstRender = useIsFirstRender();\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps);\n  const [startColorVar, endColorVar] = useToken(\"colors\", [startColor, endColor]);\n  const wasPreviouslyLoaded = usePrevious(isLoaded);\n\n  const _className = cx(\"chakra-skeleton\", className);\n\n  const cssVarStyles = { ...(startColorVar && {\n      [$startColor.variable]: startColorVar\n    }),\n    ...(endColorVar && {\n      [$endColor.variable]: endColorVar\n    })\n  };\n\n  if (isLoaded) {\n    const animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`;\n    return /* @__PURE__ */jsx(chakra.div, {\n      ref,\n      className: _className,\n      __css: {\n        animation\n      },\n      ...rest\n    });\n  }\n\n  return /* @__PURE__ */jsx(StyledSkeleton, {\n    ref,\n    className: _className,\n    ...rest,\n    __css: {\n      width: fitContent ? \"fit-content\" : void 0,\n      ...styles,\n      ...cssVarStyles,\n      _dark: { ...styles[\"_dark\"],\n        ...cssVarStyles\n      },\n      animation: `${speed}s linear infinite alternate ${bgFade}`\n    }\n  });\n});\nSkeleton.displayName = \"Skeleton\";\nexport { Skeleton };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/skeleton/src/skeleton.tsx"],"names":[],"mappings":"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","sourcesContent":["import { usePrevious } from \"@chakra-ui/react-use-previous\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  cssVar,\n  forwardRef,\n  HTMLChakraProps,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useToken,\n} from \"@chakra-ui/system\"\nimport { useIsFirstRender } from \"./use-is-first-render\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   *\n   * @default false\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   *\n   * @default 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds. Requires `isLoaded` toggled to `true` in order to see the transition.\n   *\n   * @default 0.4\n   */\n  fadeDuration?: number\n  /**\n   * If `true`, the skeleton will take the width of it's children\n   * @default false\n   */\n  fitContent?: boolean\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nconst $startColor = cssVar(\"skeleton-start-color\")\nconst $endColor = cssVar(\"skeleton-end-color\")\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference,\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference,\n  },\n})\n\n/**\n * `Skeleton` is used to display the loading state of some component.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const skeletonProps: SkeletonProps = {\n    ...props,\n    fadeDuration:\n      typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8,\n  }\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps)\n\n  const [startColorVar, endColorVar] = useToken(\"colors\", [\n    startColor,\n    endColor,\n  ])\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  const cssVarStyles = {\n    ...(startColorVar && { [$startColor.variable]: startColorVar }),\n    ...(endColorVar && { [$endColor.variable]: endColorVar }),\n  }\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton\n      ref={ref}\n      className={_className}\n      {...rest}\n      __css={{\n        width: fitContent ? \"fit-content\" : undefined,\n        ...styles,\n        ...cssVarStyles,\n        _dark: { ...(styles as any)[\"_dark\"], ...cssVarStyles },\n        animation: `${speed}s linear infinite alternate ${bgFade}`,\n      }}\n    />\n  )\n})\n\nSkeleton.displayName = \"Skeleton\"\n"]},"metadata":{},"sourceType":"module"}