{"ast":null,"code":"'use client'; // src/use-checkbox.ts\n\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"; // ../../utilities/object-utils/src/omit.ts\n\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n\n  return clone;\n} // src/use-checkbox.ts\n\n\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction useCheckbox() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const formControlProps = useFormControlProps(props);\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy\n  } = formControlProps;\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = void 0,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props;\n  const htmlProps = omit(rest, [\"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"onBlur\", \"onFocus\", \"aria-describedby\"]);\n  const onChangeProp = useCallbackRef(onChange);\n  const onBlurProp = useCallbackRef(onBlur);\n  const onFocusProp = useCallbackRef(onFocus);\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const [isActive, setActive] = useState(false);\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const inputRef = useRef(null);\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true);\n  const [checkedState, setCheckedState] = useState(!!defaultChecked);\n  const isControlled = checkedProp !== void 0;\n  const isChecked = isControlled ? checkedProp : checkedState;\n  const handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current;\n    if (!(el == null ? void 0 : el.form)) return;\n\n    const formResetListener = () => {\n      setCheckedState(!!defaultChecked);\n    };\n\n    el.form.addEventListener(\"reset\", formResetListener);\n    return () => {\n      var _a;\n\n      return (_a = el.form) == null ? void 0 : _a.removeEventListener(\"reset\", formResetListener);\n    };\n  }, []);\n  const trulyDisabled = isDisabled && !isFocusable;\n  const onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  const onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.checked !== isChecked;\n\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const onPressDown = event => {\n      if (isFocused) {\n        event.preventDefault();\n      }\n\n      setActive(true);\n    };\n\n    return { ...props2,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovered(true)),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovered(false))\n    };\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  const getIndicatorProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly)\n    };\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...htmlProps,\n      ...props2,\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props2.onClick, () => {\n        var _a;\n\n        if (!rootIsLabelElement) {\n          (_a = inputRef.current) == null ? void 0 : _a.click();\n          requestAnimationFrame(() => {\n            var _a2;\n\n            (_a2 = inputRef.current) == null ? void 0 : _a2.focus({\n              preventScroll: true\n            });\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      tabIndex,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(props2.onBlur, onBlurProp, () => setFocused(false)),\n      onFocus: callAllHandlers(props2.onFocus, onFocusProp, () => setFocused(true)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    };\n  }, [name, value, id, handleChange, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  const getLabelProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  }, [isChecked, isDisabled, isInvalid]);\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getIndicatorProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nexport { useCheckbox };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/checkbox/src/use-checkbox.ts","/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/utilities/object-utils/src/omit.ts"],"names":["props"],"mappings":"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","sourcesContent":["import { useFormControlProps } from \"@chakra-ui/form-control\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport type { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport { CheckboxState, UseCheckboxProps } from \"./checkbox-types\"\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const formControlProps = useFormControlProps(props)\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy,\n  } = formControlProps\n\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = undefined,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props\n\n  const htmlProps = omit(rest, [\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n    \"isInvalid\",\n    \"id\",\n    \"onBlur\",\n    \"onFocus\",\n    \"aria-describedby\",\n  ])\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovered] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const isControlled = checkedProp !== undefined\n  const isChecked = isControlled ? checkedProp : checkedState\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false)\n    }\n  }, [isDisabled, setFocused])\n\n  /**\n   * HTMLFormElement.reset() should reset the checkbox state\n   */\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current\n    if (!el?.form) return\n    const formResetListener = () => {\n      setCheckedState(!!defaultChecked)\n    }\n    el.form.addEventListener(\"reset\", formResetListener)\n    return () => el.form?.removeEventListener(\"reset\", formResetListener)\n  }, [])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        if (isFocused) {\n          event.preventDefault()\n        }\n        setActive(true)\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n          setHovered(true),\n        ),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n          setHovered(false),\n        ),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getIndicatorProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          requestAnimationFrame(() => {\n            inputRef.current?.focus({ preventScroll: true })\n          })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        tabIndex,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, () =>\n          setFocused(false),\n        ),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, () =>\n          setFocused(true),\n        ),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n      tabIndex,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  const state: CheckboxState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getIndicatorProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}