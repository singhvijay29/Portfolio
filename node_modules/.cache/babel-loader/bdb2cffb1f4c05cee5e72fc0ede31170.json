{"ast":null,"code":"// src/css-var.ts\nfunction isDecimal(value) {\n  return !Number.isInteger(parseFloat(value.toString()));\n}\n\nfunction replaceWhiteSpace(value) {\n  let replaceValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  return value.replace(/\\s+/g, replaceValue);\n}\n\nfunction escape(value) {\n  const valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value;\n}\n\nfunction addPrefix(value) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return [prefix, escape(value)].filter(Boolean).join(\"-\");\n}\n\nfunction toVarRef(name, fallback) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`;\n}\n\nfunction toVar(value) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return `--${addPrefix(value, prefix)}`;\n}\n\nfunction cssVar(name, options) {\n  const cssVariable = toVar(name, options == null ? void 0 : options.prefix);\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))\n  };\n}\n\nfunction getFallback(fallback) {\n  if (typeof fallback === \"string\") return fallback;\n  return fallback == null ? void 0 : fallback.reference;\n}\n\nexport { isDecimal, addPrefix, toVarRef, toVar, cssVar };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/theme-tools/src/css-var.ts"],"names":[],"mappings":";AAAO,SAAS,SAAT,CAAmB,KAAnB,EAA+B;AACpC,SAAO,CAAC,MAAA,CAAO,SAAP,CAAiB,UAAA,CAAW,KAAA,CAAM,QAAN,EAAX,CAAjB,CAAR;AACF;;AAEA,SAAS,iBAAT,CAA2B,KAA3B,EAA8D;AAAA,MAApB,YAAoB,uEAAL,GAAK;AAC5D,SAAO,KAAA,CAAM,OAAN,CAAc,MAAd,EAAsB,YAAtB,CAAP;AACF;;AAEA,SAAS,MAAT,CAAgB,KAAhB,EAAwC;AACtC,QAAM,QAAA,GAAW,iBAAA,CAAkB,KAAA,CAAM,QAAN,EAAlB,CAAjB;AACA,MAAI,QAAA,CAAS,QAAT,CAAkB,KAAlB,CAAJ,EAA8B,OAAO,KAAP;AAC9B,SAAO,SAAA,CAAU,KAAV,CAAA,GAAmB,QAAA,CAAS,OAAT,CAAiB,GAAjB,EAAsB,KAAtB,CAAnB,GAAkD,KAAzD;AACF;;AAEO,SAAS,SAAT,CAAmB,KAAnB,EAA+C;AAAA,MAAb,MAAa,uEAAJ,EAAI;AACpD,SAAO,CAAC,MAAD,EAAS,MAAA,CAAO,KAAP,CAAT,EAAwB,MAAxB,CAA+B,OAA/B,EAAwC,IAAxC,CAA6C,GAA7C,CAAP;AACF;;AAEO,SAAS,QAAT,CAAkB,IAAlB,EAAgC,QAAhC,EAAmD;AACxD,SAAO,OAAO,MAAA,CAAO,IAAP,CAAY,GAAG,QAAA,GAAW,KAAK,QAAQ,EAAxB,GAA6B,EAAE,GAA5D;AACF;;AAEO,SAAS,KAAT,CAAe,KAAf,EAA2C;AAAA,MAAb,MAAa,uEAAJ,EAAI;AAChD,SAAO,KAAK,SAAA,CAAU,KAAV,EAAiB,MAAjB,CAAwB,EAApC;AACF;;AAYO,SAAS,MAAT,CAAgB,IAAhB,EAA8B,OAA9B,EAAuD;AAC5D,QAAM,WAAA,GAAc,KAAA,CAAM,IAAN,EAAY,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,MAArB,CAApB;AACA,SAAO;AACL,IAAA,QAAA,EAAU,WADL;AAEL,IAAA,SAAA,EAAW,QAAA,CAAS,WAAT,EAAsB,WAAA,CAAY,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,QAArB,CAAtB;AAFN,GAAP;AAIF;;AAEA,SAAS,WAAT,CAAqB,QAArB,EAAiD;AAC/C,MAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC,OAAO,QAAP;AAClC,SAAO,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,SAAjB;AACF","sourcesContent":["export function isDecimal(value: any) {\n  return !Number.isInteger(parseFloat(value.toString()))\n}\n\nfunction replaceWhiteSpace(value: string, replaceValue = \"-\") {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nfunction escape(value: string | number) {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport function addPrefix(value: string, prefix = \"\") {\n  return [prefix, escape(value)].filter(Boolean).join(\"-\")\n}\n\nexport function toVarRef(name: string, fallback?: string) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`\n}\n\nexport function toVar(value: string, prefix = \"\") {\n  return `--${addPrefix(value, prefix)}`\n}\n\nexport type CSSVar = {\n  variable: string\n  reference: string\n}\n\nexport type CSSVarOptions = {\n  fallback?: string | CSSVar\n  prefix?: string\n}\n\nexport function cssVar(name: string, options?: CSSVarOptions) {\n  const cssVariable = toVar(name, options?.prefix)\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options?.fallback)),\n  }\n}\n\nfunction getFallback(fallback?: string | CSSVar) {\n  if (typeof fallback === \"string\") return fallback\n  return fallback?.reference\n}\n"]},"metadata":{},"sourceType":"module"}