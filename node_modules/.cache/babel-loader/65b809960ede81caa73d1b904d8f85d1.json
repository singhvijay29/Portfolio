{"ast":null,"code":"'use client';\n\nimport { Grid } from \"./chunk-JARCRF6W.mjs\"; // src/simple-grid.tsx\n\nimport { forwardRef, getToken, useTheme } from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(function SimpleGrid2(props, ref) {\n  const {\n    columns,\n    spacingX,\n    spacingY,\n    spacing,\n    minChildWidth,\n    ...rest\n  } = props;\n  const theme = useTheme();\n  const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n  return /* @__PURE__ */jsx(Grid, {\n    ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns,\n    ...rest\n  });\n});\nSimpleGrid.displayName = \"SimpleGrid\";\n\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\n\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, value => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\n\nfunction countToColumns(count) {\n  return mapResponsive(count, value => value === null ? null : `repeat(${value}, minmax(0, 1fr))`);\n}\n\nexport { SimpleGrid };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/layout/src/simple-grid.tsx"],"names":["SimpleGrid"],"mappings":";;;;AAAA,SACE,UADF,EAEE,QAFF,EAIE,QAJF,QAKO,mBALP;AAMA,SAAS,aAAT,QAA8B,6BAA9B;AAiDM,SAAA,GAAA,QAAA,mBAAA;AAXC,IAAM,UAAA,GAAa,UAAA,CACxB,SAASA,WAAT,CAAoB,KAApB,EAA2B,GAA3B,EAAgC;AAC9B,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA,QAAX;AAAqB,IAAA,QAArB;AAA+B,IAAA,OAA/B;AAAwC,IAAA,aAAxC;AAAuD,OAAG;AAA1D,MACJ,KADF;AAGA,QAAM,KAAA,GAAQ,QAAA,EAAd;AACA,QAAM,eAAA,GAAkB,aAAA,GACpB,cAAA,CAAe,aAAf,EAA8B,KAA9B,CADoB,GAEpB,cAAA,CAAe,OAAf,CAFJ;AAIA,SACE,eAAA,GAAA,CAAC,IAAD,EAAC;AACC,IAAA,GADD;AAEC,IAAA,GAAA,EAAK,OAFN;AAGC,IAAA,SAAA,EAAW,QAHZ;AAIC,IAAA,MAAA,EAAQ,QAJT;AAKC,IAAA,eALD;AAME,OAAG;AANL,GAAD,CADF;AAUF,CApBwB,CAAnB;AAuBP,UAAA,CAAW,WAAX,GAAyB,YAAzB;;AAEA,SAAS,IAAT,CAAc,CAAd,EAAkC;AAChC,SAAO,OAAO,CAAP,KAAa,QAAb,GAAwB,GAAG,CAAC,IAA5B,GAAmC,CAA1C;AACF;;AAEA,SAAS,cAAT,CAAwB,KAAxB,EAAoC,KAApC,EAAgE;AAC9D,SAAO,aAAA,CAAc,KAAd,EAAsB,KAAD,IAAW;AACrC,UAAM,MAAA,GAAS,QAAA,CAAS,OAAT,EAAkB,KAAlB,EAAyB,IAAA,CAAK,KAAL,CAAzB,CAAA,CAAsC,KAAtC,CAAf;;AACA,WAAO,KAAA,KAAU,IAAV,GAAiB,IAAjB,GAAwB,2BAA2B,MAAM,SAAhE;AACD,GAHM,CAAP;AAIF;;AAEA,SAAS,cAAT,CAAwB,KAAxB,EAAoC;AAClC,SAAO,aAAA,CAAc,KAAd,EAAsB,KAAD,IAC1B,KAAA,KAAU,IAAV,GAAiB,IAAjB,GAAwB,UAAU,KAAK,mBADlC,CAAP;AAGF","sourcesContent":["import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"]},"metadata":{},"sourceType":"module"}