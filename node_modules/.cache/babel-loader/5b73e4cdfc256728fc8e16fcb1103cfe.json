{"ast":null,"code":"'use client';\n\nimport { ToastProvider } from \"./chunk-3Y4YXCR2.mjs\";\nimport { createToastFn } from \"./chunk-HYCJNCPE.mjs\"; // src/create-standalone-toast.tsx\n\nimport { ColorModeContext, ThemeProvider } from \"@chakra-ui/system\";\nimport { theme as defaultTheme } from \"@chakra-ui/theme\";\nimport { jsx } from \"react/jsx-runtime\";\nvar defaults = {\n  duration: 5e3,\n  variant: \"solid\"\n};\nvar defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: () => {},\n  setColorMode: () => {},\n  defaultOptions: defaults,\n  forced: false\n};\n\nfunction createStandaloneToast() {\n  let {\n    theme = defaultStandaloneParam.theme,\n    colorMode = defaultStandaloneParam.colorMode,\n    toggleColorMode = defaultStandaloneParam.toggleColorMode,\n    setColorMode = defaultStandaloneParam.setColorMode,\n    defaultOptions = defaultStandaloneParam.defaultOptions,\n    motionVariants,\n    toastSpacing,\n    component,\n    forced\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultStandaloneParam;\n  const colorModeContextValue = {\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    forced\n  };\n\n  const ToastContainer = () => /* @__PURE__ */jsx(ThemeProvider, {\n    theme,\n    children: /* @__PURE__ */jsx(ColorModeContext.Provider, {\n      value: colorModeContextValue,\n      children: /* @__PURE__ */jsx(ToastProvider, {\n        defaultOptions,\n        motionVariants,\n        toastSpacing,\n        component\n      })\n    })\n  });\n\n  return {\n    ToastContainer,\n    toast: createToastFn(theme.direction, defaultOptions)\n  };\n}\n\nexport { defaultStandaloneParam, createStandaloneToast };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/toast/src/create-standalone-toast.tsx"],"names":[],"mappings":";;;;;AAAA,SAEE,gBAFF,EAGE,aAHF,QAKO,mBALP;AAMA,SAAS,KAAA,IAAS,YAAlB,QAAsC,kBAAtC;AAyDQ,SAAA,GAAA,QAAA,mBAAA;AApDR,IAAM,QAAA,GAA4B;AAChC,EAAA,QAAA,EAAU,GADsB;AAEhC,EAAA,OAAA,EAAS;AAFuB,CAAlC;AAcO,IAAM,sBAAA,GAC4D;AACvE,EAAA,KAAA,EAAO,YADgE;AAEvE,EAAA,SAAA,EAAW,OAF4D;AAGvE,EAAA,eAAA,EAAiB,MAAM,CAAC,CAH+C;AAIvE,EAAA,YAAA,EAAc,MAAM,CAAC,CAJkD;AAKvE,EAAA,cAAA,EAAgB,QALuD;AAMvE,EAAA,MAAA,EAAQ;AAN+D,CADlE;;AAkBA,SAAS,qBAAT,GAU8E;AAAA,MAV/C;AACpC,IAAA,KAAA,GAAQ,sBAAA,CAAuB,KADK;AAEpC,IAAA,SAAA,GAAY,sBAAA,CAAuB,SAFC;AAGpC,IAAA,eAAA,GAAkB,sBAAA,CAAuB,eAHL;AAIpC,IAAA,YAAA,GAAe,sBAAA,CAAuB,YAJF;AAKpC,IAAA,cAAA,GAAiB,sBAAA,CAAuB,cALJ;AAMpC,IAAA,cANoC;AAOpC,IAAA,YAPoC;AAQpC,IAAA,SARoC;AASpC,IAAA;AAToC,GAU+C,uEAArD,sBAAqD;AACnF,QAAM,qBAAA,GAAwB;AAC5B,IAAA,SAD4B;AAE5B,IAAA,YAF4B;AAG5B,IAAA,eAH4B;AAI5B,IAAA;AAJ4B,GAA9B;;AAMA,QAAM,cAAA,GAAiB,MACrB,eAAA,GAAA,CAAC,aAAD,EAAC;AAAc,IAAA,KAAd;AACC,IAAA,QAAA,EAAA,eAAA,GAAA,CAAC,gBAAA,CAAiB,QAAlB,EAAC;AAA0B,MAAA,KAAA,EAAO,qBAAjC;AACC,MAAA,QAAA,EAAA,eAAA,GAAA,CAAC,aAAD,EAAC;AACC,QAAA,cADD;AAEC,QAAA,cAFD;AAGC,QAAA,YAHD;AAIC,QAAA;AAJD,OAAD;AADD,KAAD;AADD,GAAD,CADF;;AAaA,SAAO;AACL,IAAA,cADK;AAEL,IAAA,KAAA,EAAO,aAAA,CAAc,KAAA,CAAM,SAApB,EAA+B,cAA/B;AAFF,GAAP;AAIF","sourcesContent":["import {\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport { theme as defaultTheme } from \"@chakra-ui/theme\"\nimport { ToastProvider, ToastProviderProps } from \"./toast.provider\"\nimport { UseToastOptions } from \"./use-toast\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\n\nconst defaults: UseToastOptions = {\n  duration: 5000,\n  variant: \"solid\",\n}\n\nexport interface CreateStandAloneToastParam\n  extends Partial<\n      ReturnType<typeof useChakra> & {\n        setColorMode: (value: ColorMode) => void\n        defaultOptions: UseToastOptions\n      }\n    >,\n    Omit<ToastProviderProps, \"children\"> {}\n\nexport const defaultStandaloneParam: CreateStandAloneToastParam &\n  Required<Omit<CreateStandAloneToastParam, keyof ToastProviderProps>> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: () => {},\n  setColorMode: () => {},\n  defaultOptions: defaults,\n  forced: false,\n}\n\nexport type CreateStandaloneToastReturn = {\n  ToastContainer: () => JSX.Element\n  toast: CreateToastFnReturn\n}\n\n/**\n * Create a toast\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n  motionVariants,\n  toastSpacing,\n  component,\n  forced,\n}: CreateStandAloneToastParam = defaultStandaloneParam): CreateStandaloneToastReturn {\n  const colorModeContextValue = {\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    forced,\n  }\n  const ToastContainer = () => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider value={colorModeContextValue}>\n        <ToastProvider\n          defaultOptions={defaultOptions}\n          motionVariants={motionVariants}\n          toastSpacing={toastSpacing}\n          component={component}\n        />\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  return {\n    ToastContainer,\n    toast: createToastFn(theme.direction, defaultOptions),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}