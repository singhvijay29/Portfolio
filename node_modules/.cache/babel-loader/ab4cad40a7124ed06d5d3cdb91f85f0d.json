{"ast":null,"code":"'use client'; // src/textarea.tsx\n\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\"; // ../../utilities/object-utils/src/omit.ts\n\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n\n  return clone;\n} // src/textarea.tsx\n\n\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const {\n    className,\n    rows,\n    ...rest\n  } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */jsx(chakra.textarea, {\n    ref,\n    rows,\n    ...textareaProps,\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  });\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/textarea/src/textarea.tsx","/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/utilities/object-utils/src/omit.ts"],"names":[],"mappings":";;AAAA,SAA6B,cAA7B,QAAmD,yBAAnD;AACA,SACE,MADF,EAEE,UAFF,EAIE,gBAJF,EAME,cANF,QAOO,mBAPP;AAQA,SAAS,EAAT,QAAmB,yBAAnB,C;;ACTO,SAAS,IAAT,CACL,MADK,EAGL;AAAA,MADA,UACA,uEADkB,EAClB;AACA,QAAM,KAAA,GAAiC,MAAA,CAAO,MAAP,CAAc,EAAd,EAAkB,MAAlB,CAAvC;;AACA,OAAA,MAAW,GAAX,IAAkB,UAAlB,EAA8B;AAC5B,QAAI,GAAA,IAAO,KAAX,EAAkB;AAChB,aAAO,KAAA,CAAM,GAAN,CAAP;AACF;AACF;;AACA,SAAO,KAAP;AACF,C;;;ADwCI,SAAA,GAAA,QAAA,mBAAA;AAtBJ,IAAM,OAAA,GAAU,CAAC,GAAD,EAAM,MAAN,EAAc,QAAd,EAAwB,WAAxB,CAAhB;AAYO,IAAM,QAAA,GAAW,UAAA,CAAsC,CAAC,KAAD,EAAQ,GAAR,KAAgB;AAC5E,QAAM,MAAA,GAAS,cAAA,CAAe,UAAf,EAA2B,KAA3B,CAAf;AACA,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,IAAb;AAAmB,OAAG;AAAtB,MAA+B,gBAAA,CAAiB,KAAjB,CAArC;AAEA,QAAM,aAAA,GAAgB,cAAA,CAAoC,IAApC,CAAtB;AAGA,QAAM,cAAA,GAAiB,IAAA,GAAO,IAAA,CAAK,MAAL,EAAa,OAAb,CAAP,GAA+B,MAAtD;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,QAAR,EAAC;AACC,IAAA,GADD;AAEC,IAAA,IAFD;AAGE,OAAG,aAHL;AAIC,IAAA,SAAA,EAAW,EAAA,CAAG,iBAAH,EAAsB,SAAtB,CAJZ;AAKC,IAAA,KAAA,EAAO;AALR,GAAD,CADF;AASD,CAlBuB,CAAjB;AAoBP,QAAA,CAAS,WAAT,GAAuB,UAAvB","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}