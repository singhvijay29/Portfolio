{"ast":null,"code":"import { parentAutofocusables } from './DOMutils';\nimport { contains } from './DOMutils';\nimport { asArray } from './array';\n\nvar getParents = function (node, parents) {\n  if (parents === void 0) {\n    parents = [];\n  }\n\n  parents.push(node);\n\n  if (node.parentNode) {\n    getParents(node.parentNode.host || node.parentNode, parents);\n  }\n\n  return parents;\n};\n/**\n * finds a parent for both nodeA and nodeB\n * @param nodeA\n * @param nodeB\n * @returns {boolean|*}\n */\n\n\nexport var getCommonParent = function (nodeA, nodeB) {\n  var parentsA = getParents(nodeA);\n  var parentsB = getParents(nodeB); // tslint:disable-next-line:prefer-for-of\n\n  for (var i = 0; i < parentsA.length; i += 1) {\n    var currentParent = parentsA[i];\n\n    if (parentsB.indexOf(currentParent) >= 0) {\n      return currentParent;\n    }\n  }\n\n  return false;\n};\nexport var getTopCommonParent = function (baseActiveElement, leftEntry, rightEntries) {\n  var activeElements = asArray(baseActiveElement);\n  var leftEntries = asArray(leftEntry);\n  var activeElement = activeElements[0];\n  var topCommon = false;\n  leftEntries.filter(Boolean).forEach(function (entry) {\n    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;\n    rightEntries.filter(Boolean).forEach(function (subEntry) {\n      var common = getCommonParent(activeElement, subEntry);\n\n      if (common) {\n        if (!topCommon || contains(common, topCommon)) {\n          topCommon = common;\n        } else {\n          topCommon = getCommonParent(common, topCommon);\n        }\n      }\n    });\n  }); // TODO: add assert here?\n\n  return topCommon;\n};\n/**\n * return list of nodes which are expected to be autofocused inside a given top nodes\n * @param entries\n * @param visibilityCache\n */\n\nexport var allParentAutofocusables = function (entries, visibilityCache) {\n  return entries.reduce(function (acc, node) {\n    return acc.concat(parentAutofocusables(node, visibilityCache));\n  }, []);\n};","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/focus-lock/dist/es2015/utils/parenting.js"],"names":["parentAutofocusables","contains","asArray","getParents","node","parents","push","parentNode","host","getCommonParent","nodeA","nodeB","parentsA","parentsB","i","length","currentParent","indexOf","getTopCommonParent","baseActiveElement","leftEntry","rightEntries","activeElements","leftEntries","activeElement","topCommon","filter","Boolean","forEach","entry","subEntry","common","allParentAutofocusables","entries","visibilityCache","reduce","acc","concat"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,YAArC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT,QAAwB,SAAxB;;AACA,IAAIC,UAAU,GAAG,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACtC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzCA,EAAAA,OAAO,CAACC,IAAR,CAAaF,IAAb;;AACA,MAAIA,IAAI,CAACG,UAAT,EAAqB;AACjBJ,IAAAA,UAAU,CAACC,IAAI,CAACG,UAAL,CAAgBC,IAAhB,IAAwBJ,IAAI,CAACG,UAA9B,EAA0CF,OAA1C,CAAV;AACH;;AACD,SAAOA,OAAP;AACH,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAII,eAAe,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACjD,MAAIC,QAAQ,GAAGT,UAAU,CAACO,KAAD,CAAzB;AACA,MAAIG,QAAQ,GAAGV,UAAU,CAACQ,KAAD,CAAzB,CAFiD,CAGjD;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;AACzC,QAAIE,aAAa,GAAGJ,QAAQ,CAACE,CAAD,CAA5B;;AACA,QAAID,QAAQ,CAACI,OAAT,CAAiBD,aAAjB,KAAmC,CAAvC,EAA0C;AACtC,aAAOA,aAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH,CAXM;AAYP,OAAO,IAAIE,kBAAkB,GAAG,UAAUC,iBAAV,EAA6BC,SAA7B,EAAwCC,YAAxC,EAAsD;AAClF,MAAIC,cAAc,GAAGpB,OAAO,CAACiB,iBAAD,CAA5B;AACA,MAAII,WAAW,GAAGrB,OAAO,CAACkB,SAAD,CAAzB;AACA,MAAII,aAAa,GAAGF,cAAc,CAAC,CAAD,CAAlC;AACA,MAAIG,SAAS,GAAG,KAAhB;AACAF,EAAAA,WAAW,CAACG,MAAZ,CAAmBC,OAAnB,EAA4BC,OAA5B,CAAoC,UAAUC,KAAV,EAAiB;AACjDJ,IAAAA,SAAS,GAAGhB,eAAe,CAACgB,SAAS,IAAII,KAAd,EAAqBA,KAArB,CAAf,IAA8CJ,SAA1D;AACAJ,IAAAA,YAAY,CAACK,MAAb,CAAoBC,OAApB,EAA6BC,OAA7B,CAAqC,UAAUE,QAAV,EAAoB;AACrD,UAAIC,MAAM,GAAGtB,eAAe,CAACe,aAAD,EAAgBM,QAAhB,CAA5B;;AACA,UAAIC,MAAJ,EAAY;AACR,YAAI,CAACN,SAAD,IAAcxB,QAAQ,CAAC8B,MAAD,EAASN,SAAT,CAA1B,EAA+C;AAC3CA,UAAAA,SAAS,GAAGM,MAAZ;AACH,SAFD,MAGK;AACDN,UAAAA,SAAS,GAAGhB,eAAe,CAACsB,MAAD,EAASN,SAAT,CAA3B;AACH;AACJ;AACJ,KAVD;AAWH,GAbD,EALkF,CAmBlF;;AACA,SAAOA,SAAP;AACH,CArBM;AAsBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIO,uBAAuB,GAAG,UAAUC,OAAV,EAAmBC,eAAnB,EAAoC;AACrE,SAAOD,OAAO,CAACE,MAAR,CAAe,UAAUC,GAAV,EAAehC,IAAf,EAAqB;AAAE,WAAOgC,GAAG,CAACC,MAAJ,CAAWrC,oBAAoB,CAACI,IAAD,EAAO8B,eAAP,CAA/B,CAAP;AAAiE,GAAvG,EAAyG,EAAzG,CAAP;AACH,CAFM","sourcesContent":["import { parentAutofocusables } from './DOMutils';\nimport { contains } from './DOMutils';\nimport { asArray } from './array';\nvar getParents = function (node, parents) {\n    if (parents === void 0) { parents = []; }\n    parents.push(node);\n    if (node.parentNode) {\n        getParents(node.parentNode.host || node.parentNode, parents);\n    }\n    return parents;\n};\n/**\n * finds a parent for both nodeA and nodeB\n * @param nodeA\n * @param nodeB\n * @returns {boolean|*}\n */\nexport var getCommonParent = function (nodeA, nodeB) {\n    var parentsA = getParents(nodeA);\n    var parentsB = getParents(nodeB);\n    // tslint:disable-next-line:prefer-for-of\n    for (var i = 0; i < parentsA.length; i += 1) {\n        var currentParent = parentsA[i];\n        if (parentsB.indexOf(currentParent) >= 0) {\n            return currentParent;\n        }\n    }\n    return false;\n};\nexport var getTopCommonParent = function (baseActiveElement, leftEntry, rightEntries) {\n    var activeElements = asArray(baseActiveElement);\n    var leftEntries = asArray(leftEntry);\n    var activeElement = activeElements[0];\n    var topCommon = false;\n    leftEntries.filter(Boolean).forEach(function (entry) {\n        topCommon = getCommonParent(topCommon || entry, entry) || topCommon;\n        rightEntries.filter(Boolean).forEach(function (subEntry) {\n            var common = getCommonParent(activeElement, subEntry);\n            if (common) {\n                if (!topCommon || contains(common, topCommon)) {\n                    topCommon = common;\n                }\n                else {\n                    topCommon = getCommonParent(common, topCommon);\n                }\n            }\n        });\n    });\n    // TODO: add assert here?\n    return topCommon;\n};\n/**\n * return list of nodes which are expected to be autofocused inside a given top nodes\n * @param entries\n * @param visibilityCache\n */\nexport var allParentAutofocusables = function (entries, visibilityCache) {\n    return entries.reduce(function (acc, node) { return acc.concat(parentAutofocusables(node, visibilityCache)); }, []);\n};\n"]},"metadata":{},"sourceType":"module"}