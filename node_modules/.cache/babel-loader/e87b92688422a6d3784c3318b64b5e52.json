{"ast":null,"code":"import { objectKeys } from \"./chunk-YTQ3XZ3T.mjs\";\nimport { getLastItem } from \"./chunk-YTAYUX3P.mjs\";\nimport { isArray, isObject } from \"./chunk-Y5FGD7DM.mjs\"; // src/responsive.ts\n\nvar breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\"]);\n\nfunction mapResponsive(prop, mapper) {\n  if (isArray(prop)) {\n    return prop.map(item => {\n      if (item === null) {\n        return null;\n      }\n\n      return mapper(item);\n    });\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n\n  if (prop != null) {\n    return mapper(prop);\n  }\n\n  return null;\n}\n\nfunction objectToArrayNotation(obj) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const result = bps.map(br => {\n    var _a;\n\n    return (_a = obj[br]) != null ? _a : null;\n  });\n\n  while (getLastItem(result) === null) {\n    result.pop();\n  }\n\n  return result;\n}\n\nfunction arrayToObjectNotation(values) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\n\nfunction isResponsiveObjectLike(obj) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every(key => bps.includes(key));\n}\n\nvar isCustomBreakpoint = maybeBreakpoint => Number.isNaN(Number(maybeBreakpoint));\n\nexport { breakpoints, mapResponsive, objectToArrayNotation, arrayToObjectNotation, isResponsiveObjectLike, isCustomBreakpoint };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs"],"names":["objectKeys","getLastItem","isArray","isObject","breakpoints","Object","freeze","mapResponsive","prop","mapper","map","item","reduce","result","key","objectToArrayNotation","obj","bps","br","_a","pop","arrayToObjectNotation","values","forEach","value","index","isResponsiveObjectLike","keys","length","every","includes","isCustomBreakpoint","maybeBreakpoint","Number","isNaN"],"mappings":"AAAA,SACEA,UADF,QAEO,sBAFP;AAGA,SACEC,WADF,QAEO,sBAFP;AAGA,SACEC,OADF,EAEEC,QAFF,QAGO,sBAHP,C,CAKA;;AACA,IAAIC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,CAC9B,MAD8B,EAE9B,IAF8B,EAG9B,IAH8B,EAI9B,IAJ8B,EAK9B,IAL8B,EAM9B,KAN8B,CAAd,CAAlB;;AAQA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AACnC,MAAIP,OAAO,CAACM,IAAD,CAAX,EAAmB;AACjB,WAAOA,IAAI,CAACE,GAAL,CAAUC,IAAD,IAAU;AACxB,UAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,IAAP;AACD;;AACD,aAAOF,MAAM,CAACE,IAAD,CAAb;AACD,KALM,CAAP;AAMD;;AACD,MAAIR,QAAQ,CAACK,IAAD,CAAZ,EAAoB;AAClB,WAAOR,UAAU,CAACQ,IAAD,CAAV,CAAiBI,MAAjB,CAAwB,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC9CD,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcL,MAAM,CAACD,IAAI,CAACM,GAAD,CAAL,CAApB;AACA,aAAOD,MAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AACD,MAAIL,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAOC,MAAM,CAACD,IAAD,CAAb;AACD;;AACD,SAAO,IAAP;AACD;;AACD,SAASO,qBAAT,CAA+BC,GAA/B,EAAuD;AAAA,MAAnBC,GAAmB,uEAAbb,WAAa;AACrD,QAAMS,MAAM,GAAGI,GAAG,CAACP,GAAJ,CAASQ,EAAD,IAAQ;AAC7B,QAAIC,EAAJ;;AACA,WAAO,CAACA,EAAE,GAAGH,GAAG,CAACE,EAAD,CAAT,KAAkB,IAAlB,GAAyBC,EAAzB,GAA8B,IAArC;AACD,GAHc,CAAf;;AAIA,SAAOlB,WAAW,CAACY,MAAD,CAAX,KAAwB,IAA/B,EAAqC;AACnCA,IAAAA,MAAM,CAACO,GAAP;AACD;;AACD,SAAOP,MAAP;AACD;;AACD,SAASQ,qBAAT,CAA+BC,MAA/B,EAA0D;AAAA,MAAnBL,GAAmB,uEAAbb,WAAa;AACxD,QAAMS,MAAM,GAAG,EAAf;AACAS,EAAAA,MAAM,CAACC,OAAP,CAAe,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC/B,UAAMX,GAAG,GAAGG,GAAG,CAACQ,KAAD,CAAf;AACA,QAAID,KAAK,IAAI,IAAb,EACE;AACFX,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcU,KAAd;AACD,GALD;AAMA,SAAOX,MAAP;AACD;;AACD,SAASa,sBAAT,CAAgCV,GAAhC,EAAwD;AAAA,MAAnBC,GAAmB,uEAAbb,WAAa;AACtD,QAAMuB,IAAI,GAAGtB,MAAM,CAACsB,IAAP,CAAYX,GAAZ,CAAb;AACA,SAAOW,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBD,IAAI,CAACE,KAAL,CAAYf,GAAD,IAASG,GAAG,CAACa,QAAJ,CAAahB,GAAb,CAApB,CAA1B;AACD;;AACD,IAAIiB,kBAAkB,GAAIC,eAAD,IAAqBC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACD,eAAD,CAAnB,CAA9C;;AAEA,SACE5B,WADF,EAEEG,aAFF,EAGEQ,qBAHF,EAIEM,qBAJF,EAKEK,sBALF,EAMEK,kBANF","sourcesContent":["import {\n  objectKeys\n} from \"./chunk-YTQ3XZ3T.mjs\";\nimport {\n  getLastItem\n} from \"./chunk-YTAYUX3P.mjs\";\nimport {\n  isArray,\n  isObject\n} from \"./chunk-Y5FGD7DM.mjs\";\n\n// src/responsive.ts\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null;\n      }\n      return mapper(item);\n    });\n  }\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  while (getLastItem(result) === null) {\n    result.pop();\n  }\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (maybeBreakpoint) => Number.isNaN(Number(maybeBreakpoint));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n"]},"metadata":{},"sourceType":"module"}