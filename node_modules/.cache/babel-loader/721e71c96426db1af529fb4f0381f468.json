{"ast":null,"code":"import { mixNumber } from './number.mjs';\nimport { warning } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { mixImmediate } from './immediate.mjs'; // Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\n\nconst mixLinearColor = (from, to, v) => {\n  const fromExpo = from * from;\n  const expo = v * (to * to - fromExpo) + fromExpo;\n  return expo < 0 ? 0 : Math.sqrt(expo);\n};\n\nconst colorTypes = [hex, rgba, hsla];\n\nconst getColorType = v => colorTypes.find(type => type.test(v));\n\nfunction asRGBA(color) {\n  const type = getColorType(color);\n  warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n  if (!Boolean(type)) return false;\n  let model = type.parse(color);\n\n  if (type === hsla) {\n    // TODO Remove this cast - needed since Framer Motion's stricter typing\n    model = hslaToRgba(model);\n  }\n\n  return model;\n}\n\nconst mixColor = (from, to) => {\n  const fromRGBA = asRGBA(from);\n  const toRGBA = asRGBA(to);\n\n  if (!fromRGBA || !toRGBA) {\n    return mixImmediate(from, to);\n  }\n\n  const blended = { ...fromRGBA\n  };\n  return v => {\n    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n    blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n    return rgba.transform(blended);\n  };\n};\n\nexport { mixColor, mixLinearColor };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/utils/mix/color.mjs"],"names":["mixNumber","warning","hslaToRgba","hex","rgba","hsla","mixImmediate","mixLinearColor","from","to","v","fromExpo","expo","Math","sqrt","colorTypes","getColorType","find","type","test","asRGBA","color","Boolean","model","parse","mixColor","fromRGBA","toRGBA","blended","red","green","blue","alpha","transform"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,GAAT,QAAoB,iCAApB;AACA,SAASC,IAAT,QAAqB,kCAArB;AACA,SAASC,IAAT,QAAqB,kCAArB;AACA,SAASC,YAAT,QAA6B,iBAA7B,C,CAEA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,EAAP,EAAWC,CAAX,KAAiB;AACpC,QAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAxB;AACA,QAAMI,IAAI,GAAGF,CAAC,IAAID,EAAE,GAAGA,EAAL,GAAUE,QAAd,CAAD,GAA2BA,QAAxC;AACA,SAAOC,IAAI,GAAG,CAAP,GAAW,CAAX,GAAeC,IAAI,CAACC,IAAL,CAAUF,IAAV,CAAtB;AACH,CAJD;;AAKA,MAAMG,UAAU,GAAG,CAACZ,GAAD,EAAMC,IAAN,EAAYC,IAAZ,CAAnB;;AACA,MAAMW,YAAY,GAAIN,CAAD,IAAOK,UAAU,CAACE,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUT,CAAV,CAA1B,CAA5B;;AACA,SAASU,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,QAAMH,IAAI,GAAGF,YAAY,CAACK,KAAD,CAAzB;AACApB,EAAAA,OAAO,CAACqB,OAAO,CAACJ,IAAD,CAAR,EAAiB,IAAGG,KAAM,sEAA1B,CAAP;AACA,MAAI,CAACC,OAAO,CAACJ,IAAD,CAAZ,EACI,OAAO,KAAP;AACJ,MAAIK,KAAK,GAAGL,IAAI,CAACM,KAAL,CAAWH,KAAX,CAAZ;;AACA,MAAIH,IAAI,KAAKb,IAAb,EAAmB;AACf;AACAkB,IAAAA,KAAK,GAAGrB,UAAU,CAACqB,KAAD,CAAlB;AACH;;AACD,SAAOA,KAAP;AACH;;AACD,MAAME,QAAQ,GAAG,CAACjB,IAAD,EAAOC,EAAP,KAAc;AAC3B,QAAMiB,QAAQ,GAAGN,MAAM,CAACZ,IAAD,CAAvB;AACA,QAAMmB,MAAM,GAAGP,MAAM,CAACX,EAAD,CAArB;;AACA,MAAI,CAACiB,QAAD,IAAa,CAACC,MAAlB,EAA0B;AACtB,WAAOrB,YAAY,CAACE,IAAD,EAAOC,EAAP,CAAnB;AACH;;AACD,QAAMmB,OAAO,GAAG,EAAE,GAAGF;AAAL,GAAhB;AACA,SAAQhB,CAAD,IAAO;AACVkB,IAAAA,OAAO,CAACC,GAAR,GAActB,cAAc,CAACmB,QAAQ,CAACG,GAAV,EAAeF,MAAM,CAACE,GAAtB,EAA2BnB,CAA3B,CAA5B;AACAkB,IAAAA,OAAO,CAACE,KAAR,GAAgBvB,cAAc,CAACmB,QAAQ,CAACI,KAAV,EAAiBH,MAAM,CAACG,KAAxB,EAA+BpB,CAA/B,CAA9B;AACAkB,IAAAA,OAAO,CAACG,IAAR,GAAexB,cAAc,CAACmB,QAAQ,CAACK,IAAV,EAAgBJ,MAAM,CAACI,IAAvB,EAA6BrB,CAA7B,CAA7B;AACAkB,IAAAA,OAAO,CAACI,KAAR,GAAgBhC,SAAS,CAAC0B,QAAQ,CAACM,KAAV,EAAiBL,MAAM,CAACK,KAAxB,EAA+BtB,CAA/B,CAAzB;AACA,WAAON,IAAI,CAAC6B,SAAL,CAAeL,OAAf,CAAP;AACH,GAND;AAOH,CAdD;;AAgBA,SAASH,QAAT,EAAmBlB,cAAnB","sourcesContent":["import { mixNumber } from './number.mjs';\nimport { warning } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { mixImmediate } from './immediate.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    if (!Boolean(type))\n        return false;\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    if (!fromRGBA || !toRGBA) {\n        return mixImmediate(from, to);\n    }\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"]},"metadata":{},"sourceType":"module"}