{"ast":null,"code":"'use client';\n\nimport { useChakra } from \"./chunk-7FWEOSAE.mjs\"; // src/use-style-config.ts\n\nimport { resolveStyleConfig } from \"@chakra-ui/styled-system\";\nimport { mergeThemeOverride } from \"@chakra-ui/theme-utils\";\nimport { filterUndefined, memoizedGet as get, mergeWith, omit } from \"@chakra-ui/utils\";\nimport { useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\n\nfunction useStyleConfigImpl(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  const {\n    styleConfig: styleConfigProp,\n    ...rest\n  } = props;\n  const {\n    theme,\n    colorMode\n  } = useChakra();\n  const themeStyleConfig = themeKey ? get(theme, `components.${themeKey}`) : void 0;\n  const styleConfig = styleConfigProp || themeStyleConfig;\n  const mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_a = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a : {}, filterUndefined(omit(rest, [\"children\"])));\n  const stylesRef = useRef({});\n\n  if (styleConfig) {\n    const getStyles = resolveStyleConfig(styleConfig);\n    const styles = getStyles(mergedProps);\n    const isStyleEqual = isEqual(stylesRef.current, styles);\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles;\n    }\n  }\n\n  return stylesRef.current;\n}\n\nfunction useStyleConfig(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useStyleConfigImpl(themeKey, props);\n}\n\nfunction useMultiStyleConfig(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useStyleConfigImpl(themeKey, props);\n}\n\nfunction useComponentStyles__unstable(themeKey, props) {\n  var _a;\n\n  const {\n    baseConfig,\n    ...restProps\n  } = props;\n  const {\n    theme\n  } = useChakra();\n  const overrides = (_a = theme.components) == null ? void 0 : _a[themeKey];\n  const styleConfig = overrides ? mergeThemeOverride(overrides, baseConfig) : baseConfig;\n  return useStyleConfigImpl(null, { ...restProps,\n    styleConfig\n  });\n}\n\nexport { useStyleConfig, useMultiStyleConfig, useComponentStyles__unstable };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/system/src/use-style-config.ts"],"names":[],"mappings":";;;;AAAA,SACE,kBADF,QAIO,0BAJP;AAKA,SAAS,kBAAT,QAAmC,wBAAnC;AACA,SAEE,eAFF,EAGE,WAAA,IAAe,GAHjB,EAIE,SAJF,EAKE,IALF,QAMO,kBANP;AAOA,SAAS,MAAT,QAAuB,OAAvB;AACA,OAAO,OAAP,MAAoB,oBAApB;;AAKA,SAAS,kBAAT,CACE,QADF,EAGE;AAAA,MADA,KACA,uEAD6B,EAC7B;;AAtBF,MAAA,EAAA;;AAuBE,QAAM;AAAE,IAAA,WAAA,EAAa,eAAf;AAAgC,OAAG;AAAnC,MAA4C,KAAlD;AAEA,QAAM;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,MAAuB,SAAA,EAA7B;AAEA,QAAM,gBAAA,GAAmB,QAAA,GACrB,GAAA,CAAI,KAAJ,EAAW,cAAc,QAAQ,EAAjC,CADqB,GAErB,KAAA,CAFJ;AAIA,QAAM,WAAA,GAAc,eAAA,IAAmB,gBAAvC;AAEA,QAAM,WAAA,GAAc,SAAA,CAClB;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GADkB,EACC,CACnB,EAAA,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,YADM,KACnB,IADmB,GACnB,EADmB,GACU,EAFX,EAGlB,eAAA,CAAgB,IAAA,CAAK,IAAL,EAAW,CAAC,UAAD,CAAX,CAAhB,CAHkB,CAApB;AASA,QAAM,SAAA,GAAY,MAAA,CAAkB,EAAlB,CAAlB;;AAEA,MAAI,WAAJ,EAAiB;AACf,UAAM,SAAA,GAAY,kBAAA,CAAmB,WAAnB,CAAlB;AACA,UAAM,MAAA,GAAS,SAAA,CAAU,WAAV,CAAf;AAEA,UAAM,YAAA,GAAe,OAAA,CAAQ,SAAA,CAAU,OAAlB,EAA2B,MAA3B,CAArB;;AAEA,QAAI,CAAC,YAAL,EAAmB;AACjB,MAAA,SAAA,CAAU,OAAV,GAAoB,MAApB;AACF;AACF;;AAEA,SAAO,SAAA,CAAU,OAAjB;AACF;;AAEO,SAAS,cAAT,CACL,QADK,EAGL;AAAA,MADA,KACA,uEAD6B,EAC7B;AACA,SAAO,kBAAA,CAAmB,QAAnB,EAA6B,KAA7B,CAAP;AACF;;AAEO,SAAS,mBAAT,CACL,QADK,EAGL;AAAA,MADA,KACA,uEAD6B,EAC7B;AACA,SAAO,kBAAA,CAAmB,QAAnB,EAA6B,KAA7B,CAAP;AAIF;;AAIO,SAAS,4BAAT,CACL,QADK,EAEL,KAFK,EAGL;AAhFF,MAAA,EAAA;;AAiFE,QAAM;AAAE,IAAA,UAAF;AAAc,OAAG;AAAjB,MAA+B,KAArC;AACA,QAAM;AAAE,IAAA;AAAF,MAAY,SAAA,EAAlB;AAEA,QAAM,SAAA,GAAA,CAAY,EAAA,GAAA,KAAA,CAAM,UAAlB,KAAY,IAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAmB,QAAnB,CAAlB;AAEA,QAAM,WAAA,GAAc,SAAA,GAChB,kBAAA,CAAmB,SAAnB,EAA8B,UAA9B,CADgB,GAEhB,UAFJ;AAIA,SAAO,kBAAA,CAAmB,IAAnB,EAAyB,EAC9B,GAAG,SAD2B;AAE9B,IAAA;AAF8B,GAAzB,CAAP;AAIF","sourcesContent":["import {\n  resolveStyleConfig,\n  SystemStyleObject,\n  ThemingProps,\n} from \"@chakra-ui/styled-system\"\nimport { mergeThemeOverride } from \"@chakra-ui/theme-utils\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  omit,\n} from \"@chakra-ui/utils\"\nimport { useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\n\ntype StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n\nfunction useStyleConfigImpl(\n  themeKey: string | null,\n  props: ThemingProps & Dict = {},\n) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n\n  const themeStyleConfig = themeKey\n    ? get(theme, `components.${themeKey}`)\n    : undefined\n\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  const stylesRef = useRef<StylesRef>({})\n\n  if (styleConfig) {\n    const getStyles = resolveStyleConfig(styleConfig)\n    const styles = getStyles(mergedProps)\n\n    const isStyleEqual = isEqual(stylesRef.current, styles)\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles\n    }\n  }\n\n  return stylesRef.current\n}\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as SystemStyleObject\n}\n\nexport function useMultiStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as Record<\n    string,\n    SystemStyleObject\n  >\n}\n\ntype MultipartStyles = Record<string, SystemStyleObject>\n\nexport function useComponentStyles__unstable(\n  themeKey: string,\n  props: ThemingProps & { baseConfig: any },\n) {\n  const { baseConfig, ...restProps } = props\n  const { theme } = useChakra()\n\n  const overrides = theme.components?.[themeKey]\n\n  const styleConfig = overrides\n    ? mergeThemeOverride(overrides, baseConfig)\n    : baseConfig\n\n  return useStyleConfigImpl(null, {\n    ...restProps,\n    styleConfig,\n  }) as MultipartStyles\n}\n"]},"metadata":{},"sourceType":"module"}