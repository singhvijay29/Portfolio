{"ast":null,"code":"'use client';\n\nimport { useAttributeObserver } from \"./chunk-2PMVP26D.mjs\";\nimport { useSpinner } from \"./chunk-366L2ZDN.mjs\"; // src/use-number-input.ts\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nvar FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\n\nfunction isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\n\nfunction isValidNumericKeyboardEvent(event, isValid) {\n  if (event.key == null) return true;\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n  const isSingleCharacterKey = event.key.length === 1;\n  if (!isSingleCharacterKey || isModifierKey) return true;\n  return isValid(event.key);\n}\n\nfunction useNumberInput() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props;\n  const onFocus = useCallbackRef(onFocusProp);\n  const onBlur = useCallbackRef(onBlurProp);\n  const onInvalid = useCallbackRef(onInvalidProp);\n  const isValidCharacter = useCallbackRef(isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter);\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  const counter = useCounter(props);\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  const [isFocused, setFocused] = useState(false);\n  const isInteractive = !(isReadOnly || isDisabled);\n  const inputRef = useRef(null);\n  const inputSelectionRef = useRef(null);\n  const incrementButtonRef = useRef(null);\n  const decrementButtonRef = useRef(null);\n  const sanitize = useCallback(value => value.split(\"\").filter(isValidCharacter).join(\"\"), [isValidCharacter]);\n  const parse = useCallback(value => {\n    var _a;\n\n    return (_a = parseValue == null ? void 0 : parseValue(value)) != null ? _a : value;\n  }, [parseValue]);\n  const format = useCallback(value => {\n    var _a;\n\n    return ((_a = formatValue == null ? void 0 : formatValue(value)) != null ? _a : value).toString();\n  }, [formatValue]);\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    } else if (counter.valueAsNumber < min) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid]);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.value != counter.value;\n\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value);\n      counter.setValue(sanitize(parsedInput));\n    }\n  }, [parse, sanitize]);\n  const increment = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  const decrement = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  const spinner = useSpinner(increment, decrement);\n  useAttributeObserver(incrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  useAttributeObserver(decrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  const onChange = useCallback(event => {\n    const evt = event.nativeEvent;\n    if (evt.isComposing) return;\n    const parsedInput = parse(event.currentTarget.value);\n    updateFn(sanitize(parsedInput));\n    inputSelectionRef.current = {\n      start: event.currentTarget.selectionStart,\n      end: event.currentTarget.selectionEnd\n    };\n  }, [updateFn, sanitize, parse]);\n\n  const _onFocus = useCallback(event => {\n    var _a, _b, _c;\n\n    onFocus == null ? void 0 : onFocus(event);\n    if (!inputSelectionRef.current) return;\n    event.target.selectionStart = (_b = inputSelectionRef.current.start) != null ? _b : (_a = event.currentTarget.value) == null ? void 0 : _a.length;\n    event.currentTarget.selectionEnd = (_c = inputSelectionRef.current.end) != null ? _c : event.currentTarget.selectionStart;\n  }, [onFocus]);\n\n  const onKeyDown = useCallback(event => {\n    if (event.nativeEvent.isComposing) return;\n\n    if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n      event.preventDefault();\n    }\n\n    const stepFactor = getStepFactor(event) * stepProp;\n    const eventKey = event.key;\n    const keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    const action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [isValidCharacter, stepProp, increment, decrement, updateFn, min, max]);\n\n  const getStepFactor = event => {\n    let ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n    if (text != null) return text;\n    const defaultText = counter.value.toString();\n    return !defaultText ? void 0 : defaultText;\n  }, [counter.value, getAriaValueText]);\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value;\n    if (counter.value === \"\") return;\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString());\n\n    if (valueStartsWithE) {\n      counter.setValue(\"\");\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min;\n      }\n\n      if (counter.valueAsNumber > max) {\n        next = max;\n      }\n\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  const onInputBlur = useCallback(() => {\n    setFocused(false);\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        var _a;\n\n        (_a = inputRef.current) == null ? void 0 : _a.focus();\n      });\n    }\n  }, [focusInputOnChange]);\n  const spinUp = useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  const spinDown = useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  useEventListener(() => inputRef.current, \"wheel\", event => {\n    var _a, _b;\n\n    const doc = (_b = (_a = inputRef.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n    const isInputFocused = doc.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    const stepFactor = getStepFactor(event) * stepProp;\n    const direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, {\n    passive: false\n  });\n  const getIncrementButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return { ...props2,\n      ref: mergeRefs(ref, incrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinUp(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    };\n  }, [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  const getDecrementButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return { ...props2,\n      ref: mergeRefs(ref, decrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinDown(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    };\n  }, [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var _a, _b, _c, _d;\n\n    return {\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props2,\n      readOnly: (_a = props2.readOnly) != null ? _a : isReadOnly,\n      \"aria-readonly\": (_b = props2.readOnly) != null ? _b : isReadOnly,\n      \"aria-required\": (_c = props2.required) != null ? _c : isRequired,\n      required: (_d = props2.required) != null ? _d : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: format(counter.value),\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? void 0 : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, _onFocus, () => setFocused(true)),\n      onBlur: callAllHandlers(props2.onBlur, onBlur, onInputBlur)\n    };\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, format, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, _onFocus, onBlur, onInputBlur]);\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}\n\nexport { useNumberInput };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/number-input/src/use-number-input.ts"],"names":["props"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useMemo, useRef, useState } from \"react\"\nimport { useAttributeObserver } from \"./use-attr-observer\"\nimport { useSpinner } from \"./use-spinner\"\n\nconst FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/\n\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\nfunction isFloatingPointNumericCharacter(character: string) {\n  return FLOATING_POINT_REGEX.test(character)\n}\n\nfunction isValidNumericKeyboardEvent(\n  event: React.KeyboardEvent,\n  isValid: (key: string) => boolean,\n) {\n  if (event.key == null) return true\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey\n  const isSingleCharacterKey = event.key.length === 1\n  if (!isSingleCharacterKey || isModifierKey) return true\n  return isValid(event.key)\n}\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: string | number): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * Whether the input should be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * Whether the input is required\n   */\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  onInvalid?: (\n    message: ValidityState,\n    value: string,\n    valueAsNumber: number,\n  ) => void\n  /**\n   * Whether the pressed key should be allowed in the input.\n   * The default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/\n   */\n  isValidCharacter?: (value: string) => boolean\n  /**\n   * If using a custom display format, this converts the custom format to a format `parseFloat` understands.\n   */\n  parse?: (value: string) => string\n  /**\n   * If using a custom display format, this converts the default format to the custom format.\n   */\n  format?: (value: string | number) => string | number\n}\n\ntype ValidityState = \"rangeUnderflow\" | \"rangeOverflow\"\ntype InputSelection = { start: number | null; end: number | null }\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props\n\n  const onFocus = useCallbackRef(onFocusProp)\n  const onBlur = useCallbackRef(onBlurProp)\n  const onInvalid = useCallbackRef(onInvalidProp)\n  const isValidCharacter = useCallbackRef(\n    isValidCharacterProp ?? isFloatingPointNumericCharacter,\n  )\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const inputSelectionRef = useRef<InputSelection | null>(null)\n  const incrementButtonRef = useRef<HTMLButtonElement>(null)\n  const decrementButtonRef = useRef<HTMLButtonElement>(null)\n\n  const sanitize = useCallback(\n    (value: string) => value.split(\"\").filter(isValidCharacter).join(\"\"),\n    [isValidCharacter],\n  )\n\n  const parse = useCallback(\n    (value: string) => parseValue?.(value) ?? value,\n    [parseValue],\n  )\n\n  const format = useCallback(\n    (value: string | number) => (formatValue?.(value) ?? value).toString(),\n    [formatValue],\n  )\n\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    } else if (counter.valueAsNumber < min) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid])\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value)\n      counter.setValue(sanitize(parsedInput))\n    }\n  }, [parse, sanitize])\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  useAttributeObserver(\n    incrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n  useAttributeObserver(\n    decrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const evt = event.nativeEvent as InputEvent\n      if (evt.isComposing) return\n      const parsedInput = parse(event.currentTarget.value)\n      updateFn(sanitize(parsedInput))\n      inputSelectionRef.current = {\n        start: event.currentTarget.selectionStart,\n        end: event.currentTarget.selectionEnd,\n      }\n    },\n    [updateFn, sanitize, parse],\n  )\n\n  const _onFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onFocus?.(event)\n      if (!inputSelectionRef.current) return\n      /**\n       * restore selection if custom format string replacement moved it to the end\n       */\n      event.target.selectionStart =\n        inputSelectionRef.current.start ?? event.currentTarget.value?.length\n      event.currentTarget.selectionEnd =\n        inputSelectionRef.current.end ?? event.currentTarget.selectionStart\n    },\n    [onFocus],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.nativeEvent.isComposing) return\n\n      if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [isValidCharacter, stepProp, increment, decrement, updateFn, min, max],\n  )\n\n  const getStepFactor = <\n    Event extends React.KeyboardEvent | React.WheelEvent | WheelEvent,\n  >(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText?.(counter.value)\n    if (text != null) return text\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueText])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as string | number\n    if (counter.value === \"\") return\n\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString())\n\n    if (valueStartsWithE) {\n      counter.setValue(\"\")\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min\n      }\n      if (counter.valueAsNumber > max) {\n        next = max\n      }\n\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onInputBlur = useCallback(() => {\n    setFocused(false)\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        inputRef.current?.focus()\n      })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  useEventListener(\n    () => inputRef.current,\n    \"wheel\",\n    (event: WheelEvent) => {\n      const doc = inputRef.current?.ownerDocument ?? document\n      const isInputFocused = doc.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref: mergeRefs(ref, incrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinUp(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref: mergeRefs(ref, decrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinDown(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled],\n  )\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => ({\n        name,\n        inputMode,\n        type: \"text\",\n        pattern,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-label\": ariaLabel,\n        \"aria-describedby\": ariaDescBy,\n        id,\n        disabled: isDisabled,\n        ...props,\n        readOnly: props.readOnly ?? isReadOnly,\n        \"aria-readonly\": props.readOnly ?? isReadOnly,\n        \"aria-required\": props.required ?? isRequired,\n        required: props.required ?? isRequired,\n        ref: mergeRefs(inputRef, ref),\n        value: format(counter.value),\n        role: \"spinbutton\",\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n          ? undefined\n          : counter.valueAsNumber,\n        \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n        \"aria-valuetext\": ariaValueText,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        onChange: callAllHandlers(props.onChange, onChange),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, _onFocus, () =>\n          setFocused(true),\n        ),\n        onBlur: callAllHandlers(props.onBlur, onBlur, onInputBlur),\n      }),\n      [\n        name,\n        inputMode,\n        pattern,\n        ariaLabelledBy,\n        ariaLabel,\n        format,\n        ariaDescBy,\n        id,\n        isDisabled,\n        isRequired,\n        isReadOnly,\n        isInvalid,\n        counter.value,\n        counter.valueAsNumber,\n        counter.isOutOfRange,\n        min,\n        max,\n        ariaValueText,\n        onChange,\n        onKeyDown,\n        _onFocus,\n        onBlur,\n        onInputBlur,\n      ],\n    )\n\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}