{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\n\nclass PopChildMeasure extends React.Component {\n  getSnapshotBeforeUpdate(prevProps) {\n    const element = this.props.childRef.current;\n\n    if (element && prevProps.isPresent && !this.props.isPresent) {\n      const size = this.props.sizeRef.current;\n      size.height = element.offsetHeight || 0;\n      size.width = element.offsetWidth || 0;\n      size.top = element.offsetTop;\n      size.left = element.offsetLeft;\n    }\n\n    return null;\n  }\n  /**\n   * Required with getSnapshotBeforeUpdate to stop React complaining.\n   */\n\n\n  componentDidUpdate() {}\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nfunction PopChild(_ref) {\n  let {\n    children,\n    isPresent\n  } = _ref;\n  const id = useId();\n  const ref = useRef(null);\n  const size = useRef({\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  });\n  const {\n    nonce\n  } = useContext(MotionConfigContext);\n  /**\n   * We create and inject a style block so we can apply this explicit\n   * sizing in a non-destructive manner by just deleting the style block.\n   *\n   * We can't apply size via render as the measurement happens\n   * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n   * styles directly on the DOM node, we might be overwriting\n   * styles set via the style prop.\n   */\n\n  useInsertionEffect(() => {\n    const {\n      width,\n      height,\n      top,\n      left\n    } = size.current;\n    if (isPresent || !ref.current || !width || !height) return;\n    ref.current.dataset.motionPopId = id;\n    const style = document.createElement(\"style\");\n    if (nonce) style.nonce = nonce;\n    document.head.appendChild(style);\n\n    if (style.sheet) {\n      style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n    }\n\n    return () => {\n      document.head.removeChild(style);\n    };\n  }, [isPresent]);\n  return jsx(PopChildMeasure, {\n    isPresent: isPresent,\n    childRef: ref,\n    sizeRef: size,\n    children: React.cloneElement(children, {\n      ref\n    })\n  });\n}\n\nexport { PopChild };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs"],"names":["jsx","React","useId","useRef","useContext","useInsertionEffect","MotionConfigContext","PopChildMeasure","Component","getSnapshotBeforeUpdate","prevProps","element","props","childRef","current","isPresent","size","sizeRef","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","componentDidUpdate","render","children","PopChild","id","ref","nonce","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","cloneElement"],"mappings":"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","sourcesContent":["import { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n"]},"metadata":{},"sourceType":"module"}