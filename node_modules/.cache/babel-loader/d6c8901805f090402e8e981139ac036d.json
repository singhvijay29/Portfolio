{"ast":null,"code":"'use client';\n\nimport { useMenuStyles } from \"./chunk-UZJ3TPNQ.mjs\";\nimport { useMenuContext, useMenuList, useMenuPositioner } from \"./chunk-SANI5SUM.mjs\"; // src/menu-list.tsx\n\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { motion } from \"framer-motion\";\nimport { jsx } from \"react/jsx-runtime\";\nvar motionVariants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\"\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\"\n    }\n  }\n};\nvar MenuTransition = chakra(motion.div);\nvar MenuList = forwardRef(function MenuList2(props, ref) {\n  var _a, _b;\n\n  const {\n    rootProps,\n    motionProps,\n    ...rest\n  } = props;\n  const {\n    isOpen,\n    onTransitionEnd,\n    unstable__animationState: animated\n  } = useMenuContext();\n  const listProps = useMenuList(rest, ref);\n  const positionerProps = useMenuPositioner(rootProps);\n  const styles = useMenuStyles();\n  return /* @__PURE__ */jsx(chakra.div, { ...positionerProps,\n    __css: {\n      zIndex: (_b = props.zIndex) != null ? _b : (_a = styles.list) == null ? void 0 : _a.zIndex\n    },\n    children: /* @__PURE__ */jsx(MenuTransition, {\n      variants: motionVariants,\n      initial: false,\n      animate: isOpen ? \"enter\" : \"exit\",\n      __css: {\n        outline: 0,\n        ...styles.list\n      },\n      ...motionProps,\n      className: cx(\"chakra-menu__menu-list\", listProps.className),\n      ...listProps,\n      onUpdate: onTransitionEnd,\n      onAnimationComplete: callAll(animated.onComplete, listProps.onAnimationComplete)\n    })\n  });\n});\nMenuList.displayName = \"MenuList\";\nexport { MenuList };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/menu/src/menu-list.tsx"],"names":["MenuList"],"mappings":";;;;;AAAA,SAAS,OAAT,EAAkB,EAAlB,QAA4B,yBAA5B;AACA,SAAS,MAAT,EAAiB,UAAjB,QAAoD,mBAApD;AAEA,SAA0B,MAA1B,QAAkD,eAAlD;AA6DM,SAAA,GAAA,QAAA,mBAAA;AA9CN,IAAM,cAAA,GAA2B;AAC/B,EAAA,KAAA,EAAO;AACL,IAAA,UAAA,EAAY,SADP;AAEL,IAAA,OAAA,EAAS,CAFJ;AAGL,IAAA,KAAA,EAAO,CAHF;AAIL,IAAA,UAAA,EAAY;AACV,MAAA,QAAA,EAAU,GADA;AAEV,MAAA,IAAA,EAAM,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd;AAFI;AAJP,GADwB;AAU/B,EAAA,IAAA,EAAM;AACJ,IAAA,aAAA,EAAe;AACb,MAAA,UAAA,EAAY;AADC,KADX;AAIJ,IAAA,OAAA,EAAS,CAJL;AAKJ,IAAA,KAAA,EAAO,GALH;AAMJ,IAAA,UAAA,EAAY;AACV,MAAA,QAAA,EAAU,GADA;AAEV,MAAA,OAAA,EAAS;AAFC;AANR;AAVyB,CAAjC;AAuBA,IAAM,cAAA,GAAiB,MAAA,CAAO,MAAA,CAAO,GAAd,CAAvB;AAEO,IAAM,QAAA,GAAW,UAAA,CAAiC,SAASA,SAAT,CACvD,KADuD,EAEvD,GAFuD,EAGvD;AA9CF,MAAA,EAAA,EAAA,EAAA;;AA+CE,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,WAAb;AAA0B,OAAG;AAA7B,MAAsC,KAA5C;AACA,QAAM;AACJ,IAAA,MADI;AAEJ,IAAA,eAFI;AAGJ,IAAA,wBAAA,EAA0B;AAHtB,MAIF,cAAA,EAJJ;AAMA,QAAM,SAAA,GAAY,WAAA,CAAY,IAAZ,EAAkB,GAAlB,CAAlB;AACA,QAAM,eAAA,GAAkB,iBAAA,CAAkB,SAAlB,CAAxB;AAEA,QAAM,MAAA,GAAS,aAAA,EAAf;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC,EACE,GAAG,eADL;AAEC,IAAA,KAAA,EAAO;AAAE,MAAA,MAAA,EAAA,CAAQ,EAAA,GAAA,KAAA,CAAM,MAAd,KAAQ,IAAR,GAAQ,EAAR,GAAQ,CAAgB,EAAA,GAAA,MAAA,CAAO,IAAvB,KAAgB,IAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAa;AAAvC,KAFR;AAIC,IAAA,QAAA,EAAA,eAAA,GAAA,CAAC,cAAD,EAAC;AACC,MAAA,QAAA,EAAU,cADX;AAEC,MAAA,OAAA,EAAS,KAFV;AAGC,MAAA,OAAA,EAAS,MAAA,GAAS,OAAT,GAAmB,MAH7B;AAIC,MAAA,KAAA,EAAO;AAAE,QAAA,OAAA,EAAS,CAAX;AAAc,WAAG,MAAA,CAAO;AAAxB,OAJR;AAKE,SAAG,WALL;AAMC,MAAA,SAAA,EAAW,EAAA,CAAG,wBAAH,EAA6B,SAAA,CAAU,SAAvC,CANZ;AAOE,SAAG,SAPL;AAQC,MAAA,QAAA,EAAU,eARX;AASC,MAAA,mBAAA,EAAqB,OAAA,CACnB,QAAA,CAAS,UADU,EAEnB,SAAA,CAAU,mBAFS;AATtB,KAAD;AAJD,GAAD,CADF;AAqBD,CArCuB,CAAjB;AAuCP,QAAA,CAAS,WAAT,GAAuB,UAAvB","sourcesContent":["import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\n\nimport { HTMLMotionProps, motion, Variants } from \"framer-motion\"\nimport { useMenuStyles } from \"./menu\"\nimport { useMenuContext, useMenuList, useMenuPositioner } from \"./use-menu\"\n\nexport interface MenuListProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * Props for the root element that positions the menu.\n   */\n  rootProps?: HTMLChakraProps<\"div\">\n  /**\n   * The framer-motion props to animate the menu list\n   */\n  motionProps?: HTMLMotionProps<\"div\">\n}\n\nconst motionVariants: Variants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\",\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\",\n    },\n  },\n}\n\nconst MenuTransition = chakra(motion.div)\n\nexport const MenuList = forwardRef<MenuListProps, \"div\">(function MenuList(\n  props,\n  ref,\n) {\n  const { rootProps, motionProps, ...rest } = props\n  const {\n    isOpen,\n    onTransitionEnd,\n    unstable__animationState: animated,\n  } = useMenuContext()\n\n  const listProps = useMenuList(rest, ref) as any\n  const positionerProps = useMenuPositioner(rootProps)\n\n  const styles = useMenuStyles()\n\n  return (\n    <chakra.div\n      {...positionerProps}\n      __css={{ zIndex: props.zIndex ?? styles.list?.zIndex }}\n    >\n      <MenuTransition\n        variants={motionVariants}\n        initial={false}\n        animate={isOpen ? \"enter\" : \"exit\"}\n        __css={{ outline: 0, ...styles.list }}\n        {...motionProps}\n        className={cx(\"chakra-menu__menu-list\", listProps.className)}\n        {...listProps}\n        onUpdate={onTransitionEnd}\n        onAnimationComplete={callAll(\n          animated.onComplete,\n          listProps.onAnimationComplete,\n        )}\n      />\n    </chakra.div>\n  )\n})\n\nMenuList.displayName = \"MenuList\"\n"]},"metadata":{},"sourceType":"module"}