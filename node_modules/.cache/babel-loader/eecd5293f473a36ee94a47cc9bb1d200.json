{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\n\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = useCallbackRef(onOpenProp);\n  const handleClose = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = useId();\n  const id = idProp != null ? idProp : `disclosure-${uid}`;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n\n  function getButtonProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return { ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n\n      onClick(event) {\n        var _a;\n\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n\n    };\n  }\n\n  function getDisclosureProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return { ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\n\nexport { useDisclosure };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-use-disclosure/src/index.ts"],"names":["props"],"mappings":";;AAAA,SAAS,cAAT,QAA+B,mCAA/B;AACA,SAAgB,WAAhB,EAA6B,QAA7B,EAAuC,KAAvC,QAAoD,OAApD;;AAkBO,SAAS,aAAT,GAAuD;AAAA,MAAhC,KAAgC,uEAAJ,EAAI;AAC5D,QAAM;AACJ,IAAA,OAAA,EAAS,WADL;AAEJ,IAAA,MAAA,EAAQ,UAFJ;AAGJ,IAAA,MAAA,EAAQ,UAHJ;AAIJ,IAAA,EAAA,EAAI;AAJA,MAKF,KALJ;AAOA,QAAM,UAAA,GAAa,cAAA,CAAe,UAAf,CAAnB;AACA,QAAM,WAAA,GAAc,cAAA,CAAe,WAAf,CAApB;AAEA,QAAM,CAAC,WAAD,EAAc,SAAd,IAA2B,QAAA,CAAS,KAAA,CAAM,aAAN,IAAuB,KAAhC,CAAjC;AAEA,QAAM,MAAA,GAAS,UAAA,KAAe,KAAA,CAAf,GAA2B,UAA3B,GAAwC,WAAvD;AAEA,QAAM,YAAA,GAAe,UAAA,KAAe,KAAA,CAApC;AAEA,QAAM,GAAA,GAAM,KAAA,EAAZ;AACA,QAAM,EAAA,GAAK,MAAA,IAAA,IAAA,GAAA,MAAA,GAAU,cAAc,GAAA,EAAnC;AAEA,QAAM,OAAA,GAAU,WAAA,CAAY,MAAM;AAChC,QAAI,CAAC,YAAL,EAAmB;AACjB,MAAA,SAAA,CAAU,KAAV,CAAA;AACF;;AACA,IAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,EAAA;AACF,GALgB,EAKb,CAAC,YAAD,EAAe,WAAf,CALa,CAAhB;AAOA,QAAM,MAAA,GAAS,WAAA,CAAY,MAAM;AAC/B,QAAI,CAAC,YAAL,EAAmB;AACjB,MAAA,SAAA,CAAU,IAAV,CAAA;AACF;;AACA,IAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,EAAA;AACF,GALe,EAKZ,CAAC,YAAD,EAAe,UAAf,CALY,CAAf;AAOA,QAAM,QAAA,GAAW,WAAA,CAAY,MAAM;AACjC,QAAI,MAAJ,EAAY;AACV,MAAA,OAAA;AACF,KAFA,MAEO;AACL,MAAA,MAAA;AACF;AACF,GANiB,EAMd,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CANc,CAAjB;;AAQA,WAAS,cAAT,GAA0D;AAAA,QAAlCA,MAAkC,uEAAf,EAAe;AACxD,WAAO,EACL,GAAG,MADE;AAEL,uBAAiB,MAFZ;AAGL,uBAAiB,EAHZ;;AAIL,MAAA,OAAA,CAAQ,KAAR,EAAe;AAlErB,YAAA,EAAA;;AAmEQ,SAAA,EAAA,GAAA,MAAA,CAAM,OAAN,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,MAAA,EAAgB,KAAhB,CAAA;AACA,QAAA,QAAA;AACF;;AAPK,KAAP;AASF;;AAEA,WAAS,kBAAT,GAA8D;AAAA,QAAlCA,MAAkC,uEAAf,EAAe;AAC5D,WAAO,EACL,GAAG,MADE;AAEL,MAAA,MAAA,EAAQ,CAAC,MAFJ;AAGL,MAAA;AAHK,KAAP;AAKF;;AAEA,SAAO;AACL,IAAA,MADK;AAEL,IAAA,MAFK;AAGL,IAAA,OAHK;AAIL,IAAA,QAJK;AAKL,IAAA,YALK;AAML,IAAA,cANK;AAOL,IAAA;AAPK,GAAP;AASF","sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport React, { useCallback, useState, useId } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\ntype HTMLProps = React.HTMLAttributes<HTMLElement>\n\n/**\n * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.\n * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure\n */\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const handleOpen = useCallbackRef(onOpenProp)\n  const handleClose = useCallbackRef(onCloseProp)\n\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const isOpen = isOpenProp !== undefined ? isOpenProp : isOpenState\n\n  const isControlled = isOpenProp !== undefined\n\n  const uid = useId()\n  const id = idProp ?? `disclosure-${uid}`\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    handleClose?.()\n  }, [isControlled, handleClose])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    handleOpen?.()\n  }, [isControlled, handleOpen])\n\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      onOpen()\n    }\n  }, [isOpen, onOpen, onClose])\n\n  function getButtonProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props.onClick?.(event)\n        onToggle()\n      },\n    }\n  }\n\n  function getDisclosureProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      hidden: !isOpen,\n      id,\n    }\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}