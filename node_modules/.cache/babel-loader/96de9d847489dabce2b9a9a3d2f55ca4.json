{"ast":null,"code":"import { getAllAffectedNodes } from './utils/all-affected';\nimport { isGuard, isNotAGuard } from './utils/is';\nimport { getTopCommonParent } from './utils/parenting';\nimport { orderByTabIndex } from './utils/tabOrder';\nimport { getFocusables } from './utils/tabUtils';\n/**\n * traverses all related nodes (including groups) returning a list of all nodes(outer and internal) with meta information\n * This is low-level API!\n * @returns list of focusable elements inside a given top(!) node.\n * @see {@link getFocusableNodes} providing a simpler API\n */\n\nexport var expandFocusableNodes = function (topNode) {\n  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);\n  var commonParent = getTopCommonParent(topNode, topNode, entries);\n  var outerNodes = orderByTabIndex(getFocusables([commonParent], true), true, true);\n  var innerElements = getFocusables(entries, false);\n  return outerNodes.map(function (_a) {\n    var node = _a.node,\n        index = _a.index;\n    return {\n      node: node,\n      index: index,\n      lockItem: innerElements.indexOf(node) >= 0,\n      guard: isGuard(node)\n    };\n  });\n};","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/focus-lock/dist/es2015/focusables.js"],"names":["getAllAffectedNodes","isGuard","isNotAGuard","getTopCommonParent","orderByTabIndex","getFocusables","expandFocusableNodes","topNode","entries","filter","commonParent","outerNodes","innerElements","map","_a","node","index","lockItem","indexOf","guard"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,sBAApC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,YAArC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,oBAAoB,GAAG,UAAUC,OAAV,EAAmB;AACjD,MAAIC,OAAO,GAAGR,mBAAmB,CAACO,OAAD,CAAnB,CAA6BE,MAA7B,CAAoCP,WAApC,CAAd;AACA,MAAIQ,YAAY,GAAGP,kBAAkB,CAACI,OAAD,EAAUA,OAAV,EAAmBC,OAAnB,CAArC;AACA,MAAIG,UAAU,GAAGP,eAAe,CAACC,aAAa,CAAC,CAACK,YAAD,CAAD,EAAiB,IAAjB,CAAd,EAAsC,IAAtC,EAA4C,IAA5C,CAAhC;AACA,MAAIE,aAAa,GAAGP,aAAa,CAACG,OAAD,EAAU,KAAV,CAAjC;AACA,SAAOG,UAAU,CAACE,GAAX,CAAe,UAAUC,EAAV,EAAc;AAChC,QAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;AAAA,QAAoBC,KAAK,GAAGF,EAAE,CAACE,KAA/B;AACA,WAAQ;AACJD,MAAAA,IAAI,EAAEA,IADF;AAEJC,MAAAA,KAAK,EAAEA,KAFH;AAGJC,MAAAA,QAAQ,EAAEL,aAAa,CAACM,OAAd,CAAsBH,IAAtB,KAA+B,CAHrC;AAIJI,MAAAA,KAAK,EAAElB,OAAO,CAACc,IAAD;AAJV,KAAR;AAMH,GARM,CAAP;AASH,CAdM","sourcesContent":["import { getAllAffectedNodes } from './utils/all-affected';\nimport { isGuard, isNotAGuard } from './utils/is';\nimport { getTopCommonParent } from './utils/parenting';\nimport { orderByTabIndex } from './utils/tabOrder';\nimport { getFocusables } from './utils/tabUtils';\n/**\n * traverses all related nodes (including groups) returning a list of all nodes(outer and internal) with meta information\n * This is low-level API!\n * @returns list of focusable elements inside a given top(!) node.\n * @see {@link getFocusableNodes} providing a simpler API\n */\nexport var expandFocusableNodes = function (topNode) {\n    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);\n    var commonParent = getTopCommonParent(topNode, topNode, entries);\n    var outerNodes = orderByTabIndex(getFocusables([commonParent], true), true, true);\n    var innerElements = getFocusables(entries, false);\n    return outerNodes.map(function (_a) {\n        var node = _a.node, index = _a.index;\n        return ({\n            node: node,\n            index: index,\n            lockItem: innerElements.indexOf(node) >= 0,\n            guard: isGuard(node),\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}