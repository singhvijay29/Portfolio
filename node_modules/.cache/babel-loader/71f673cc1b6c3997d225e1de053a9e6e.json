{"ast":null,"code":"'use client';\n\nimport { useModalContext } from \"./chunk-MSA2NPQT.mjs\";\nimport { useModalManager } from \"./chunk-CYRBRIA2.mjs\"; // src/modal-focus.tsx\n\nimport { FocusLock } from \"@chakra-ui/focus-lock\";\nimport { usePresence } from \"framer-motion\";\nimport { useEffect } from \"react\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction ModalFocusScope(props) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen\n  } = useModalContext();\n  const [isPresent, safeToRemove] = usePresence();\n  useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove);\n    }\n  }, [isPresent, safeToRemove]);\n  const index = useModalManager(dialogRef, isOpen);\n  return /* @__PURE__ */jsx(FocusLock, {\n    autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef,\n    lockFocusAcrossFrames,\n    children: /* @__PURE__ */jsx(RemoveScroll, {\n      removeScrollBar: !preserveScrollBarGap,\n      allowPinchZoom,\n      enabled: index === 1 && blockScrollOnMount,\n      forwardProps: true,\n      children: props.children\n    })\n  });\n}\n\nexport { ModalFocusScope };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/modal/src/modal-focus.tsx"],"names":[],"mappings":";;;;;AAAA,SAAS,SAAT,QAA0B,uBAA1B;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,SAAT,QAA0B,OAA1B;AACA,SAAS,YAAT,QAA6B,qBAA7B;AA+CM,SAAA,GAAA,QAAA,mBAAA;;AAnCC,SAAS,eAAT,CAAyB,KAAzB,EAAsD;AAC3D,QAAM;AACJ,IAAA,SADI;AAEJ,IAAA,SAFI;AAGJ,IAAA,SAHI;AAIJ,IAAA,eAJI;AAKJ,IAAA,kBALI;AAMJ,IAAA,cANI;AAOJ,IAAA,aAPI;AAQJ,IAAA,kBARI;AASJ,IAAA,oBATI;AAUJ,IAAA,qBAVI;AAWJ,IAAA;AAXI,MAYF,eAAA,EAZJ;AAcA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,WAAA,EAAlC;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,QAAI,CAAC,SAAD,IAAc,YAAlB,EAAgC;AAC9B,MAAA,UAAA,CAAW,YAAX,CAAA;AACF;AACF,GAJA,EAIG,CAAC,SAAD,EAAY,YAAZ,CAJH,CAAA;AAMA,QAAM,KAAA,GAAQ,eAAA,CAAgB,SAAhB,EAA2B,MAA3B,CAAd;AAEA,SACE,eAAA,GAAA,CAAC,SAAD,EAAC;AACC,IAAA,SADD;AAEC,IAAA,UAAA,EAAY,CAAC,SAFd;AAGC,IAAA,eAHD;AAIC,IAAA,aAJD;AAKC,IAAA,YAAA,EAAc,kBALf;AAMC,IAAA,UAAA,EAAY,SANb;AAOC,IAAA,qBAPD;AASC,IAAA,QAAA,EAAA,eAAA,GAAA,CAAC,YAAD,EAAC;AACC,MAAA,eAAA,EAAiB,CAAC,oBADnB;AAEC,MAAA,cAFD;AAIC,MAAA,OAAA,EAAS,KAAA,KAAU,CAAV,IAAe,kBAJzB;AAKC,MAAA,YAAA,EAAY,IALb;AAOE,MAAA,QAAA,EAAA,KAAA,CAAM;AAPR,KAAD;AATD,GAAD,CADF;AAqBF","sourcesContent":["import { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { usePresence } from \"framer-motion\"\nimport { useEffect } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\n\nimport { useModalContext } from \"./modal\"\nimport { useModalManager } from \"./modal-manager\"\n\ninterface ModalFocusScopeProps {\n  /**\n   * @type React.ReactElement\n   */\n  children: React.ReactElement\n}\n\nexport function ModalFocusScope(props: ModalFocusScopeProps) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen,\n  } = useModalContext()\n\n  const [isPresent, safeToRemove] = usePresence()\n\n  useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove)\n    }\n  }, [isPresent, safeToRemove])\n\n  const index = useModalManager(dialogRef, isOpen)\n\n  return (\n    <FocusLock\n      autoFocus={autoFocus}\n      isDisabled={!trapFocus}\n      initialFocusRef={initialFocusRef}\n      finalFocusRef={finalFocusRef}\n      restoreFocus={returnFocusOnClose}\n      contentRef={dialogRef}\n      lockFocusAcrossFrames={lockFocusAcrossFrames}\n    >\n      <RemoveScroll\n        removeScrollBar={!preserveScrollBarGap}\n        allowPinchZoom={allowPinchZoom}\n        // only block scroll for first dialog\n        enabled={index === 1 && blockScrollOnMount}\n        forwardProps\n      >\n        {props.children}\n      </RemoveScroll>\n    </FocusLock>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}