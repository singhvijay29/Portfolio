{"ast":null,"code":"'use client'; // src/use-event-listeners.ts\n\nimport { useCallback, useEffect, useRef } from \"react\";\n\nfunction useEventListeners() {\n  const listeners = useRef( /* @__PURE__ */new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, {\n      type,\n      el,\n      options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  const remove = useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}\n\nexport { useEventListeners };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/clickable/src/use-event-listeners.ts"],"names":[],"mappings":";;AAAA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,MAAjC,QAA+C,OAA/C;;AA6BO,SAAS,iBAAT,GAA6C;AAClD,QAAM,SAAA,GAAY,MAAA,EAAO,eAAA,IAAI,GAAJ,EAAP,CAAlB;AACA,QAAM,gBAAA,GAAmB,SAAA,CAAU,OAAnC;AAEA,QAAM,GAAA,GAAM,WAAA,CAAY,CAAC,EAAD,EAAU,IAAV,EAAqB,QAArB,EAAoC,OAApC,KAAqD;AAC3E,IAAA,SAAA,CAAU,OAAV,CAAkB,GAAlB,CAAsB,QAAtB,EAAgC;AAAE,MAAA,IAAF;AAAQ,MAAA,EAAR;AAAY,MAAA;AAAZ,KAAhC;AACA,IAAA,EAAA,CAAG,gBAAH,CAAoB,IAApB,EAA0B,QAA1B,EAAoC,OAApC;AACF,GAHY,EAGT,EAHS,CAAZ;AAKA,QAAM,MAAA,GAAS,WAAA,CACb,CAAC,EAAD,EAAU,IAAV,EAAqB,QAArB,EAAoC,OAApC,KAAqD;AACnD,IAAA,EAAA,CAAG,mBAAH,CAAuB,IAAvB,EAA6B,QAA7B,EAAuC,OAAvC;AACA,IAAA,SAAA,CAAU,OAAV,CAAkB,MAAlB,CAAyB,QAAzB;AACF,GAJa,EAKb,EALa,CAAf;AAQA,EAAA,SAAA,CACE,MAAM,MAAM;AACV,IAAA,gBAAA,CAAiB,OAAjB,CAAyB,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACvC,MAAA,MAAA,CAAO,KAAA,CAAM,EAAb,EAAiB,KAAA,CAAM,IAAvB,EAA6B,GAA7B,EAAkC,KAAA,CAAM,OAAxC,CAAA;AACD,KAFD;AAGF,GALF,EAME,CAAC,MAAD,EAAS,gBAAT,CANF,CAAA;AASA,SAAO;AAAE,IAAA,GAAF;AAAO,IAAA;AAAP,GAAP;AACF","sourcesContent":["import { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      el.removeEventListener(type, listener, options)\n      listeners.current.delete(listener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}