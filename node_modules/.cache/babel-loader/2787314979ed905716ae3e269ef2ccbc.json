{"ast":null,"code":"'use client';\n\nimport { AvatarImage } from \"./chunk-V2ATFO44.mjs\";\nimport { initials } from \"./chunk-O25PJXSD.mjs\";\nimport { AvatarStylesProvider } from \"./chunk-RD3LQCU3.mjs\";\nimport { GenericAvatarIcon } from \"./chunk-CXYPMOCL.mjs\"; // src/avatar.tsx\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n\n  return /* @__PURE__ */jsx(chakra.span, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-avatar\", props.className),\n    \"data-loaded\": dataAttr(isLoaded),\n    __css: avatarStyles,\n    children: /* @__PURE__ */jsxs(AvatarStylesProvider, {\n      value: styles,\n      children: [/* @__PURE__ */jsx(AvatarImage, {\n        src,\n        srcSet,\n        loading,\n        onLoad: callAllHandlers(onLoadProp, () => {\n          setIsLoaded(true);\n        }),\n        onError,\n        getInitials,\n        name,\n        borderRadius,\n        icon,\n        iconLabel,\n        ignoreFallback,\n        crossOrigin,\n        referrerPolicy\n      }), children]\n    })\n  });\n});\nAvatar.displayName = \"Avatar\";\nexport { baseStyle, Avatar };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/avatar/src/avatar.tsx"],"names":[],"mappings":";;;;;;;AAAA,SACE,MADF,EAEE,UAFF,EAIE,gBAJF,EAOE,mBAPF,QAQO,mBARP;AASA,SAAS,eAAT,EAA0B,EAA1B,EAA8B,QAA9B,QAA8C,yBAA9C;AAMA,SAAS,QAAT,QAAyB,OAAzB;AA6CW,SAAA,GAAA,EA8BL,IA9BK,QAAA,mBAAA;AA3CJ,IAAM,SAAA,GAA+B;AAC1C,EAAA,OAAA,EAAS,aADiC;AAE1C,EAAA,UAAA,EAAY,QAF8B;AAG1C,EAAA,cAAA,EAAgB,QAH0B;AAI1C,EAAA,SAAA,EAAW,QAJ+B;AAK1C,EAAA,aAAA,EAAe,WAL2B;AAM1C,EAAA,UAAA,EAAY,QAN8B;AAO1C,EAAA,QAAA,EAAU,UAPgC;AAQ1C,EAAA,UAAA,EAAY;AAR8B,CAArC;AA8BA,IAAM,MAAA,GAAS,UAAA,CAAgC,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACpE,QAAM,MAAA,GAAS,mBAAA,CAAoB,QAApB,EAA8B,KAA9B,CAAf;AACA,QAAM,CAAC,QAAD,EAAW,WAAX,IAA0B,QAAA,CAAS,KAAT,CAAhC;AAEA,QAAM;AACJ,IAAA,GADI;AAEJ,IAAA,MAFI;AAGJ,IAAA,IAHI;AAIJ,IAAA,UAJI;AAKJ,IAAA,YAAA,GAAe,MALX;AAMJ,IAAA,OANI;AAOJ,IAAA,MAAA,EAAQ,UAPJ;AAQJ,IAAA,WAAA,GAAc,QARV;AASJ,IAAA,IAAA,GAAO,eAAA,GAAA,CAAC,iBAAD,EAAC,EAAD,CATH;AAUJ,IAAA,SAAA,GAAY,SAVR;AAWJ,IAAA,OAXI;AAYJ,IAAA,QAZI;AAaJ,IAAA,WAbI;AAcJ,IAAA,cAdI;AAeJ,IAAA,WAfI;AAgBJ,IAAA,cAhBI;AAiBJ,OAAG;AAjBC,MAkBF,gBAAA,CAAiB,KAAjB,CAlBJ;AAoBA,QAAM,YAAA,GAAkC;AACtC,IAAA,YADsC;AAEtC,IAAA,WAAA,EAAa,UAAA,GAAa,KAAb,GAAqB,KAAA,CAFI;AAGtC,OAAG,SAHmC;AAItC,OAAG,MAAA,CAAO;AAJ4B,GAAxC;;AAOA,MAAI,WAAJ,EAAiB;AACf,IAAA,YAAA,CAAa,WAAb,GAA2B,WAA3B;AACF;;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,IAAR,EAAC;AACC,IAAA,GADD;AAEE,OAAG,IAFL;AAGC,IAAA,SAAA,EAAW,EAAA,CAAG,eAAH,EAAoB,KAAA,CAAM,SAA1B,CAHZ;AAIC,mBAAa,QAAA,CAAS,QAAT,CAJd;AAKC,IAAA,KAAA,EAAO,YALR;AAOC,IAAA,QAAA,EAAA,eAAA,IAAA,CAAC,oBAAD,EAAC;AAAqB,MAAA,KAAA,EAAO,MAA5B;AACC,MAAA,QAAA,EAAA,CAAA,eAAA,GAAA,CAAC,WAAD,EAAC;AACC,QAAA,GADD;AAEC,QAAA,MAFD;AAGC,QAAA,OAHD;AAIC,QAAA,MAAA,EAAQ,eAAA,CAAgB,UAAhB,EAA4B,MAAM;AACxC,UAAA,WAAA,CAAY,IAAZ,CAAA;AACD,SAFO,CAJT;AAOC,QAAA,OAPD;AAQC,QAAA,WARD;AASC,QAAA,IATD;AAUC,QAAA,YAVD;AAWC,QAAA,IAXD;AAYC,QAAA,SAZD;AAaC,QAAA,cAbD;AAcC,QAAA,WAdD;AAeC,QAAA;AAfD,OAAD,CAAA,EAiBC,QAjBD;AADD,KAAD;AAPD,GAAD,CADF;AA8BD,CAjEqB,CAAf;AAmEP,MAAA,CAAO,WAAP,GAAqB,QAArB","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { AvatarStylesProvider } from \"./avatar-context\"\nimport { AvatarImage } from \"./avatar-image\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\nimport { initials } from \"./avatar-name\"\nimport { AvatarOptions } from \"./avatar-types\"\nimport { useState } from \"react\"\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  crossOrigin?: HTMLChakraProps<\"img\">[\"crossOrigin\"]\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = <GenericAvatarIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      data-loaded={dataAttr(isLoaded)}\n      __css={avatarStyles}\n    >\n      <AvatarStylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          srcSet={srcSet}\n          loading={loading}\n          onLoad={callAllHandlers(onLoadProp, () => {\n            setIsLoaded(true)\n          })}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n          crossOrigin={crossOrigin}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </AvatarStylesProvider>\n    </chakra.span>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n"]},"metadata":{},"sourceType":"module"}