{"ast":null,"code":"import { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nclass BaseAnimation {\n  constructor(_ref) {\n    let {\n      autoplay = true,\n      delay = 0,\n      type = \"keyframes\",\n      repeat = 0,\n      repeatDelay = 0,\n      repeatType = \"loop\",\n      ...options\n    } = _ref;\n    // Track whether the animation has been stopped. Stopped animations won't restart.\n    this.isStopped = false;\n    this.hasAttemptedResolve = false;\n    this.options = {\n      autoplay,\n      delay,\n      type,\n      repeat,\n      repeatDelay,\n      repeatType,\n      ...options\n    };\n    this.updateFinishedPromise();\n  }\n  /**\n   * A getter for resolved data. If keyframes are not yet resolved, accessing\n   * this.resolved will synchronously flush all pending keyframe resolvers.\n   * This is a deoptimisation, but at its worst still batches read/writes.\n   */\n\n\n  get resolved() {\n    if (!this._resolved && !this.hasAttemptedResolve) {\n      flushKeyframeResolvers();\n    }\n\n    return this._resolved;\n  }\n  /**\n   * A method to be called when the keyframes resolver completes. This method\n   * will check if its possible to run the animation and, if not, skip it.\n   * Otherwise, it will call initPlayback on the implementing class.\n   */\n\n\n  onKeyframesResolved(keyframes, finalKeyframe) {\n    this.hasAttemptedResolve = true;\n    const {\n      name,\n      type,\n      velocity,\n      delay,\n      onComplete,\n      onUpdate,\n      isGenerator\n    } = this.options;\n    /**\n     * If we can't animate this value with the resolved keyframes\n     * then we should complete it immediately.\n     */\n\n    if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n      // Finish immediately\n      if (instantAnimationState.current || !delay) {\n        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n        this.resolveFinishedPromise();\n        return;\n      } // Finish after a delay\n      else {\n        this.options.duration = 0;\n      }\n    }\n\n    const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n    if (resolvedAnimation === false) return;\n    this._resolved = {\n      keyframes,\n      finalKeyframe,\n      ...resolvedAnimation\n    };\n    this.onPostResolved();\n  }\n\n  onPostResolved() {}\n  /**\n   * Allows the returned animation to be awaited or promise-chained. Currently\n   * resolves when the animation finishes at all but in a future update could/should\n   * reject if its cancels.\n   */\n\n\n  then(resolve, reject) {\n    return this.currentFinishedPromise.then(resolve, reject);\n  }\n\n  updateFinishedPromise() {\n    this.currentFinishedPromise = new Promise(resolve => {\n      this.resolveFinishedPromise = resolve;\n    });\n  }\n\n}\n\nexport { BaseAnimation };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs"],"names":["flushKeyframeResolvers","instantAnimationState","canAnimate","getFinalKeyframe","BaseAnimation","constructor","autoplay","delay","type","repeat","repeatDelay","repeatType","options","isStopped","hasAttemptedResolve","updateFinishedPromise","resolved","_resolved","onKeyframesResolved","keyframes","finalKeyframe","name","velocity","onComplete","onUpdate","isGenerator","current","resolveFinishedPromise","duration","resolvedAnimation","initPlayback","onPostResolved","then","resolve","reject","currentFinishedPromise","Promise"],"mappings":"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","sourcesContent":["import { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nclass BaseAnimation {\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options,\n        };\n        this.updateFinishedPromise();\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n    get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n    onKeyframesResolved(keyframes, finalKeyframe) {\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n                this.resolveFinishedPromise();\n                return;\n            }\n            // Finish after a delay\n            else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false)\n            return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation,\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() { }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n    then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve) => {\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n}\n\nexport { BaseAnimation };\n"]},"metadata":{},"sourceType":"module"}