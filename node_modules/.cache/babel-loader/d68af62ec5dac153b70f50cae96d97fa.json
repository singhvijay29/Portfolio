{"ast":null,"code":"'use client'; // src/use-attr-observer.ts\n\nimport { useEffect } from \"react\";\n\nfunction useAttributeObserver(ref, attributes, fn, enabled) {\n  useEffect(() => {\n    var _a;\n\n    if (!ref.current || !enabled) return;\n    const win = (_a = ref.current.ownerDocument.defaultView) != null ? _a : window;\n    const attrs = Array.isArray(attributes) ? attributes : [attributes];\n    const obs = new win.MutationObserver(changes => {\n      for (const change of changes) {\n        if (change.type === \"attributes\" && change.attributeName && attrs.includes(change.attributeName)) {\n          fn(change);\n        }\n      }\n    });\n    obs.observe(ref.current, {\n      attributes: true,\n      attributeFilter: attrs\n    });\n    return () => obs.disconnect();\n  });\n}\n\nexport { useAttributeObserver };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/number-input/src/use-attr-observer.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,QAA0B,OAA1B;;AAEO,SAAS,oBAAT,CACL,GADK,EAEL,UAFK,EAGL,EAHK,EAIL,OAJK,EAKL;AACA,EAAA,SAAA,CAAU,MAAM;AARlB,QAAA,EAAA;;AASI,QAAI,CAAC,GAAA,CAAI,OAAL,IAAgB,CAAC,OAArB,EAA8B;AAC9B,UAAM,GAAA,GAAA,CAAM,EAAA,GAAA,GAAA,CAAI,OAAJ,CAAY,aAAZ,CAA0B,WAAhC,KAAM,IAAN,GAAM,EAAN,GAA+C,MAArD;AACA,UAAM,KAAA,GAAQ,KAAA,CAAM,OAAN,CAAc,UAAd,IAA4B,UAA5B,GAAyC,CAAC,UAAD,CAAvD;AACA,UAAM,GAAA,GAAM,IAAI,GAAA,CAAI,gBAAR,CAA0B,OAAD,IAAa;AAChD,WAAA,MAAW,MAAX,IAAqB,OAArB,EAA8B;AAC5B,YACE,MAAA,CAAO,IAAP,KAAgB,YAAhB,IACA,MAAA,CAAO,aADP,IAEA,KAAA,CAAM,QAAN,CAAe,MAAA,CAAO,aAAtB,CAHF,EAIE;AACA,UAAA,EAAA,CAAG,MAAH,CAAA;AACF;AACF;AACD,KAVW,CAAZ;AAYA,IAAA,GAAA,CAAI,OAAJ,CAAY,GAAA,CAAI,OAAhB,EAAyB;AAAE,MAAA,UAAA,EAAY,IAAd;AAAoB,MAAA,eAAA,EAAiB;AAArC,KAAzB;AAEA,WAAO,MAAM,GAAA,CAAI,UAAJ,EAAb;AACD,GAnBD,CAAA;AAoBF","sourcesContent":["import { useEffect } from \"react\"\n\nexport function useAttributeObserver(\n  ref: React.RefObject<HTMLElement | null>,\n  attributes: string | string[],\n  fn: (v: MutationRecord) => void,\n  enabled: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current || !enabled) return\n    const win = ref.current.ownerDocument.defaultView ?? window\n    const attrs = Array.isArray(attributes) ? attributes : [attributes]\n    const obs = new win.MutationObserver((changes) => {\n      for (const change of changes) {\n        if (\n          change.type === \"attributes\" &&\n          change.attributeName &&\n          attrs.includes(change.attributeName)\n        ) {\n          fn(change)\n        }\n      }\n    })\n\n    obs.observe(ref.current, { attributes: true, attributeFilter: attrs })\n\n    return () => obs.disconnect()\n  })\n}\n"]},"metadata":{},"sourceType":"module"}