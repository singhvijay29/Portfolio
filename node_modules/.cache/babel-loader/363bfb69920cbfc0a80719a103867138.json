{"ast":null,"code":"'use client';\n\nimport { DescendantsManager } from \"./chunk-FT3H4P66.mjs\";\nimport { cast, useSafeLayoutEffect } from \"./chunk-3A5YOZDU.mjs\"; // src/use-descendant.ts\n\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useRef, useState } from \"react\";\n\nfunction useDescendants() {\n  const descendants = useRef(new DescendantsManager());\n  useSafeLayoutEffect(() => {\n    return () => descendants.current.destroy();\n  });\n  return descendants.current;\n}\n\nvar [DescendantsContextProvider, useDescendantsContext] = createContext({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n});\n\nfunction useDescendant(options) {\n  const descendants = useDescendantsContext();\n  const [index, setIndex] = useState(-1);\n  const ref = useRef(null);\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return;\n      descendants.unregister(ref.current);\n    };\n  }, []);\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    const dataIndex = Number(ref.current.dataset[\"index\"]);\n\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex);\n    }\n  });\n  const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref)\n  };\n}\n\nfunction createDescendantContext() {\n  const ContextProvider = cast(DescendantsContextProvider);\n\n  const _useDescendantsContext = () => cast(useDescendantsContext());\n\n  const _useDescendant = options => useDescendant(options);\n\n  const _useDescendants = () => useDescendants();\n\n  return [// context provider\n  ContextProvider, // call this when you need to read from context\n  _useDescendantsContext, // descendants state information, to be called and passed to `ContextProvider`\n  _useDescendants, // descendant index information\n  _useDescendant];\n}\n\nexport { createDescendantContext };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/descendant/src/use-descendant.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,aAAT,QAA8B,0BAA9B;AACA,SAAS,SAAT,QAA0B,iCAA1B;AACA,SAAS,MAAT,EAAiB,QAAjB,QAAiC,OAAjC;;AAQA,SAAS,cAAT,GAGI;AACF,QAAM,WAAA,GAAc,MAAA,CAAO,IAAI,kBAAJ,EAAP,CAApB;AACA,EAAA,mBAAA,CAAoB,MAAM;AACxB,WAAO,MAAM,WAAA,CAAY,OAAZ,CAAoB,OAApB,EAAb;AACD,GAFD,CAAA;AAGA,SAAO,WAAA,CAAY,OAAnB;AACF;;AAaA,IAAM,CAAC,0BAAD,EAA6B,qBAA7B,IACJ,aAAA,CAAoC;AAClC,EAAA,IAAA,EAAM,qBAD4B;AAElC,EAAA,YAAA,EACE;AAHgC,CAApC,CADF;;AAcA,SAAS,aAAT,CAGE,OAHF,EAGkC;AAChC,QAAM,WAAA,GAAc,qBAAA,EAApB;AACA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAA,CAAS,CAAA,CAAT,CAA1B;AACA,QAAM,GAAA,GAAM,MAAA,CAAU,IAAV,CAAZ;AAEA,EAAA,mBAAA,CAAoB,MAAM;AACxB,WAAO,MAAM;AACX,UAAI,CAAC,GAAA,CAAI,OAAT,EAAkB;AAClB,MAAA,WAAA,CAAY,UAAZ,CAAuB,GAAA,CAAI,OAA3B;AACF,KAHA;AAIF,GALA,EAKG,EALH,CAAA;AAOA,EAAA,mBAAA,CAAoB,MAAM;AACxB,QAAI,CAAC,GAAA,CAAI,OAAT,EAAkB;AAClB,UAAM,SAAA,GAAY,MAAA,CAAO,GAAA,CAAI,OAAJ,CAAY,OAAZ,CAAoB,OAApB,CAAP,CAAlB;;AACA,QAAI,KAAA,IAAS,SAAT,IAAsB,CAAC,MAAA,CAAO,KAAP,CAAa,SAAb,CAA3B,EAAoD;AAClD,MAAA,QAAA,CAAS,SAAT,CAAA;AACF;AACD,GAND,CAAA;AAQA,QAAM,WAAA,GAAc,OAAA,GAChB,IAAA,CAA2B,WAAA,CAAY,QAAZ,CAAqB,OAArB,CAA3B,CADgB,GAEhB,IAAA,CAA2B,WAAA,CAAY,QAAvC,CAFJ;AAIA,SAAO;AACL,IAAA,WADK;AAEL,IAAA,KAFK;AAGL,IAAA,YAAA,EAAc,WAAA,CAAY,cAAZ,CAA2B,GAAA,CAAI,OAA/B,CAHT;AAIL,IAAA,QAAA,EAAU,SAAA,CAAU,WAAV,EAAuB,GAAvB;AAJL,GAAP;AAMF;;AAOO,SAAS,uBAAT,GAGH;AAEF,QAAM,eAAA,GAAkB,IAAA,CAA0B,0BAA1B,CAAxB;;AAEA,QAAM,sBAAA,GAAyB,MAC7B,IAAA,CAA+B,qBAAA,EAA/B,CADF;;AAGA,QAAM,cAAA,GAAkB,OAAD,IACrB,aAAA,CAAoB,OAApB,CADF;;AAGA,QAAM,eAAA,GAAkB,MAAM,cAAA,EAA9B;;AAEA,SAAO,CAAA;AAEL,EAAA,eAFK,EAEL;AAEA,EAAA,sBAJK,EAIL;AAEA,EAAA,eANK,EAML;AAEA,EAAA,cARK,CAAP;AAUF","sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useRef, useState } from \"react\"\nimport { DescendantsManager, DescendantOptions } from \"./descendant\"\nimport { useSafeLayoutEffect, cast } from \"./utils\"\n\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\nfunction useDescendants<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() {\n  const descendants = useRef(new DescendantsManager<T, K>())\n  useSafeLayoutEffect(() => {\n    return () => descendants.current.destroy()\n  })\n  return descendants.current\n}\n\nexport interface UseDescendantsReturn\n  extends ReturnType<typeof useDescendants> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\nconst [DescendantsContextProvider, useDescendantsContext] =\n  createContext<UseDescendantsReturn>({\n    name: \"DescendantsProvider\",\n    errorMessage:\n      \"useDescendantsContext must be used within DescendantsProvider\",\n  })\n\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>(options?: DescendantOptions<K>) {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const dataIndex = Number(ref.current.dataset[\"index\"])\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex)\n    }\n  })\n\n  const refCallback = options\n    ? cast<React.RefCallback<T>>(descendants.register(options))\n    : cast<React.RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext<\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() {\n  type ContextProviderType = React.Provider<DescendantsManager<T, K>>\n  const ContextProvider = cast<ContextProviderType>(DescendantsContextProvider)\n\n  const _useDescendantsContext = () =>\n    cast<DescendantsManager<T, K>>(useDescendantsContext())\n\n  const _useDescendant = (options?: DescendantOptions<K>) =>\n    useDescendant<T, K>(options)\n\n  const _useDescendants = () => useDescendants<T, K>()\n\n  return [\n    // context provider\n    ContextProvider,\n    // call this when you need to read from context\n    _useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    _useDescendants,\n    // descendant index information\n    _useDescendant,\n  ] as const\n}\n"]},"metadata":{},"sourceType":"module"}