{"ast":null,"code":"import * as React from 'react';\nimport { assignRef } from './assignRef';\nimport { useCallbackRef } from './useRef';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nvar currentValues = new WeakMap();\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\n\nexport function useMergeRefs(refs, defaultValue) {\n  var callbackRef = useCallbackRef(defaultValue || null, function (newValue) {\n    return refs.forEach(function (ref) {\n      return assignRef(ref, newValue);\n    });\n  }); // handle refs changes - added or removed\n\n  useIsomorphicLayoutEffect(function () {\n    var oldValue = currentValues.get(callbackRef);\n\n    if (oldValue) {\n      var prevRefs_1 = new Set(oldValue);\n      var nextRefs_1 = new Set(refs);\n      var current_1 = callbackRef.current;\n      prevRefs_1.forEach(function (ref) {\n        if (!nextRefs_1.has(ref)) {\n          assignRef(ref, null);\n        }\n      });\n      nextRefs_1.forEach(function (ref) {\n        if (!prevRefs_1.has(ref)) {\n          assignRef(ref, current_1);\n        }\n      });\n    }\n\n    currentValues.set(callbackRef, refs);\n  }, [refs]);\n  return callbackRef;\n}","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/use-callback-ref/dist/es2015/useMergeRef.js"],"names":["React","assignRef","useCallbackRef","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","currentValues","WeakMap","useMergeRefs","refs","defaultValue","callbackRef","newValue","forEach","ref","oldValue","get","prevRefs_1","Set","nextRefs_1","current_1","current","has","set"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,IAAIC,yBAAyB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCJ,KAAK,CAACK,eAAtC,GAAwDL,KAAK,CAACM,SAA9F;AACA,IAAIC,aAAa,GAAG,IAAIC,OAAJ,EAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,YAA5B,EAA0C;AAC7C,MAAIC,WAAW,GAAGV,cAAc,CAACS,YAAY,IAAI,IAAjB,EAAuB,UAAUE,QAAV,EAAoB;AACvE,WAAOH,IAAI,CAACI,OAAL,CAAa,UAAUC,GAAV,EAAe;AAAE,aAAOd,SAAS,CAACc,GAAD,EAAMF,QAAN,CAAhB;AAAkC,KAAhE,CAAP;AACH,GAF+B,CAAhC,CAD6C,CAI7C;;AACAV,EAAAA,yBAAyB,CAAC,YAAY;AAClC,QAAIa,QAAQ,GAAGT,aAAa,CAACU,GAAd,CAAkBL,WAAlB,CAAf;;AACA,QAAII,QAAJ,EAAc;AACV,UAAIE,UAAU,GAAG,IAAIC,GAAJ,CAAQH,QAAR,CAAjB;AACA,UAAII,UAAU,GAAG,IAAID,GAAJ,CAAQT,IAAR,CAAjB;AACA,UAAIW,SAAS,GAAGT,WAAW,CAACU,OAA5B;AACAJ,MAAAA,UAAU,CAACJ,OAAX,CAAmB,UAAUC,GAAV,EAAe;AAC9B,YAAI,CAACK,UAAU,CAACG,GAAX,CAAeR,GAAf,CAAL,EAA0B;AACtBd,UAAAA,SAAS,CAACc,GAAD,EAAM,IAAN,CAAT;AACH;AACJ,OAJD;AAKAK,MAAAA,UAAU,CAACN,OAAX,CAAmB,UAAUC,GAAV,EAAe;AAC9B,YAAI,CAACG,UAAU,CAACK,GAAX,CAAeR,GAAf,CAAL,EAA0B;AACtBd,UAAAA,SAAS,CAACc,GAAD,EAAMM,SAAN,CAAT;AACH;AACJ,OAJD;AAKH;;AACDd,IAAAA,aAAa,CAACiB,GAAd,CAAkBZ,WAAlB,EAA+BF,IAA/B;AACH,GAlBwB,EAkBtB,CAACA,IAAD,CAlBsB,CAAzB;AAmBA,SAAOE,WAAP;AACH","sourcesContent":["import * as React from 'react';\nimport { assignRef } from './assignRef';\nimport { useCallbackRef } from './useRef';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nvar currentValues = new WeakMap();\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\nexport function useMergeRefs(refs, defaultValue) {\n    var callbackRef = useCallbackRef(defaultValue || null, function (newValue) {\n        return refs.forEach(function (ref) { return assignRef(ref, newValue); });\n    });\n    // handle refs changes - added or removed\n    useIsomorphicLayoutEffect(function () {\n        var oldValue = currentValues.get(callbackRef);\n        if (oldValue) {\n            var prevRefs_1 = new Set(oldValue);\n            var nextRefs_1 = new Set(refs);\n            var current_1 = callbackRef.current;\n            prevRefs_1.forEach(function (ref) {\n                if (!nextRefs_1.has(ref)) {\n                    assignRef(ref, null);\n                }\n            });\n            nextRefs_1.forEach(function (ref) {\n                if (!prevRefs_1.has(ref)) {\n                    assignRef(ref, current_1);\n                }\n            });\n        }\n        currentValues.set(callbackRef, refs);\n    }, [refs]);\n    return callbackRef;\n}\n"]},"metadata":{},"sourceType":"module"}