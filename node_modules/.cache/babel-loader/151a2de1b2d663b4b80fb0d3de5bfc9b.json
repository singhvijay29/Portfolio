{"ast":null,"code":"'use client';\n\nimport { useTabsStyles } from \"./chunk-GTRZJDIL.mjs\";\nimport { useTabPanels } from \"./chunk-NXSBASJ3.mjs\"; // src/tab-panels.tsx\n\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TabPanels = forwardRef(function TabPanels2(props, ref) {\n  const panelsProps = useTabPanels(props);\n  const styles = useTabsStyles();\n  return /* @__PURE__ */jsx(chakra.div, { ...panelsProps,\n    width: \"100%\",\n    ref,\n    className: cx(\"chakra-tabs__tab-panels\", props.className),\n    __css: styles.tabpanels\n  });\n});\nTabPanels.displayName = \"TabPanels\";\nexport { TabPanels };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/tabs/src/tab-panels.tsx"],"names":["TabPanels"],"mappings":";;;;;AAAA,SAAS,EAAT,QAAmB,yBAAnB;AACA,SAA0B,MAA1B,EAAkC,UAAlC,QAAoD,mBAApD;AAuBI,SAAA,GAAA,QAAA,mBAAA;AARG,IAAM,SAAA,GAAY,UAAA,CAAkC,SAASA,UAAT,CACzD,KADyD,EAEzD,GAFyD,EAGzD;AACA,QAAM,WAAA,GAAc,YAAA,CAAa,KAAb,CAApB;AACA,QAAM,MAAA,GAAS,aAAA,EAAf;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC,EACE,GAAG,WADL;AAEC,IAAA,KAAA,EAAM,MAFP;AAGC,IAAA,GAHD;AAIC,IAAA,SAAA,EAAW,EAAA,CAAG,yBAAH,EAA8B,KAAA,CAAM,SAApC,CAJZ;AAKC,IAAA,KAAA,EAAO,MAAA,CAAO;AALf,GAAD,CADF;AASD,CAhBwB,CAAlB;AAkBP,SAAA,CAAU,WAAV,GAAwB,WAAxB","sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\nimport { useTabsStyles } from \"./tabs\"\nimport { useTabPanels } from \"./use-tabs\"\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">(function TabPanels(\n  props,\n  ref,\n) {\n  const panelsProps = useTabPanels(props)\n  const styles = useTabsStyles()\n\n  return (\n    <chakra.div\n      {...panelsProps}\n      width=\"100%\"\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n      __css={styles.tabpanels}\n    />\n  )\n})\n\nTabPanels.displayName = \"TabPanels\"\n"]},"metadata":{},"sourceType":"module"}