{"ast":null,"code":"'use client'; // src/providers.tsx\n\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\n\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */jsxs(EmotionThemeProvider, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\n\nfunction CSSVars(_ref) {\n  let {\n    root = \":host, :root\"\n  } = _ref;\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\n\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\n\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\n\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = useColorMode();\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => {\n      const styleObjectOrFn = get(theme, \"styles.global\");\n      const globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\n\nexport { ThemeProvider, CSSVars, StylesProvider, useStyles, createStylesContext, GlobalStyle };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/system/src/providers.tsx"],"names":[],"mappings":";;AAAA,SAAS,YAAT,QAA6B,uBAA7B;AACA,SAAS,aAAT,QAAmD,wBAAnD;AACA,SAAS,GAAT,EAAc,QAAd,QAAiD,0BAAjD;AACA,SAAS,WAAA,IAAe,GAAxB,EAA6B,OAA7B,QAA4C,kBAA5C;AACA,SACE,MADF,EAGE,aAAA,IAAiB,oBAHnB,QAKO,gBALP;AAMA,SAAS,OAAT,QAAwB,OAAxB;AAUI,SACE,GADF,EAAA,IAAA,QAAA,mBAAA;;AAJG,SAAS,aAAT,CAAuB,KAAvB,EAA+D;AACpE,QAAM;AAAE,IAAA,WAAF;AAAe,IAAA,KAAf;AAAsB,IAAA;AAAtB,MAAmC,KAAzC;AACA,QAAM,aAAA,GAAgB,OAAA,CAAQ,MAAM,QAAA,CAAS,KAAT,CAAd,EAA+B,CAAC,KAAD,CAA/B,CAAtB;AACA,SACE,eAAA,IAAA,CAAC,oBAAD,EAAC;AAAqB,IAAA,KAAA,EAAO,aAA5B;AACC,IAAA,QAAA,EAAA,CAAA,eAAA,GAAA,CAAC,OAAD,EAAC;AAAQ,MAAA,IAAA,EAAM;AAAd,KAAD,CAAA,EACC,QADD;AADD,GAAD,CADF;AAMF;;AAUO,SAAS,OAAT,OAAuE;AAAA,MAAtD;AAAE,IAAA,IAAA,GAAO;AAAT,GAAsD;AAI5E,QAAM,QAAA,GAAW,CAAC,IAAD,EAAO,cAAP,EAAuB,IAAvB,CAA4B,GAA5B,CAAjB;AACA,SAAO,eAAA,GAAA,CAAC,MAAD,EAAC;AAAO,IAAA,MAAA,EAAS,KAAD,KAAiB;AAAE,OAAC,QAAD,GAAY,KAAA,CAAM;AAApB,KAAjB;AAAf,GAAD,CAAP;AACF;;AAaA,IAAM,CAAC,cAAD,EAAiB,SAAjB,IAA8B,aAAA,CAElC;AACA,EAAA,IAAA,EAAM,eADN;AAEA,EAAA,YAAA,EACE;AAHF,CAFkC,CAApC;;AAeO,SAAS,mBAAT,CACL,aADK,EAEqB;AAC1B,SAAO,aAAA,CAAiD;AACtD,IAAA,IAAA,EAAM,GAAG,aAAa,eADgC;AAEtD,IAAA,YAAA,EAAc,kFAAkF,aAAa;AAFvD,GAAjD,CAAP;AAIF;;AAUO,SAAS,WAAT,GAAoC;AACzC,QAAM;AAAE,IAAA;AAAF,MAAgB,YAAA,EAAtB;AACA,SACE,eAAA,GAAA,CAAC,MAAD,EAAC;AACC,IAAA,MAAA,EAAS,KAAD,IAAgB;AACtB,YAAM,eAAA,GAAkB,GAAA,CAAI,KAAJ,EAAW,eAAX,CAAxB;AACA,YAAM,YAAA,GAAe,OAAA,CAAQ,eAAR,EAAyB;AAAE,QAAA,KAAF;AAAS,QAAA;AAAT,OAAzB,CAArB;AACA,UAAI,CAAC,YAAL,EAAmB,OAAO,KAAA,CAAP;AACnB,YAAM,MAAA,GAAS,GAAA,CAAI,YAAJ,CAAA,CAAkB,KAAlB,CAAf;AACA,aAAO,MAAP;AACF;AAPD,GAAD,CADF;AAWF","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { createContext, CreateContextReturn } from \"@chakra-ui/react-utils\"\nimport { css, toCSSVar, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport { useMemo } from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  cssVarsRoot?: string\n}\n\nexport function ThemeProvider(props: ThemeProviderProps): JSX.Element {\n  const { cssVarsRoot, theme, children } = props\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <CSSVars root={cssVarsRoot} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport interface CSSVarsProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  root?: string\n}\n\nexport function CSSVars({ root = \":host, :root\" }: CSSVarsProps): JSX.Element {\n  /**\n   * Append color mode selector to allow semantic tokens to change according to the color mode\n   */\n  const selector = [root, `[data-theme]`].join(\",\")\n  return <Global styles={(theme: any) => ({ [selector]: theme.__cssVars })} />\n}\n\n/**\n * @deprecated - Prefer to use `createStylesContext` to provide better error messages\n *\n * @example\n *\n * ```jsx\n * import { createStylesContext } from \"@chakra-ui/react\"\n *\n * const [StylesProvider, useStyles] = createStylesContext(\"Component\")\n * ```\n */\nconst [StylesProvider, useStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Helper function that creates context with a standardized errorMessage related to the component\n * @param componentName\n * @returns [StylesProvider, useStyles]\n */\nexport function createStylesContext(\n  componentName: string,\n): CreateStyleContextReturn {\n  return createContext<Record<string, SystemStyleObject>>({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `,\n  })\n}\n\nexport type CreateStyleContextReturn = CreateContextReturn<\n  Record<string, SystemStyleObject>\n>\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport function GlobalStyle(): JSX.Element {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}