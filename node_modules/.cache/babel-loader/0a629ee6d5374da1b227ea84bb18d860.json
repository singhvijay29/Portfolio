{"ast":null,"code":"import { warnOnce } from '../../../utils/warn-once.mjs';\nimport { updateScrollInfo } from './info.mjs';\nimport { resolveOffsets } from './offsets/index.mjs';\n\nfunction measure(container) {\n  let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : container;\n  let info = arguments.length > 2 ? arguments[2] : undefined;\n\n  /**\n   * Find inset of target within scrollable container\n   */\n  info.x.targetOffset = 0;\n  info.y.targetOffset = 0;\n\n  if (target !== container) {\n    let node = target;\n\n    while (node && node !== container) {\n      info.x.targetOffset += node.offsetLeft;\n      info.y.targetOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n  }\n\n  info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;\n  info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;\n  info.x.containerLength = container.clientWidth;\n  info.y.containerLength = container.clientHeight;\n  /**\n   * In development mode ensure scroll containers aren't position: static as this makes\n   * it difficult to measure their relative positions.\n   */\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (container && target && target !== container) {\n      warnOnce(getComputedStyle(container).position !== \"static\", \"Please ensure that the container has a non-static position, like 'relative', 'fixed', or 'absolute' to ensure scroll offset is calculated correctly.\");\n    }\n  }\n}\n\nfunction createOnScrollHandler(element, onScroll, info) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return {\n    measure: () => measure(element, options.target, info),\n    update: time => {\n      updateScrollInfo(element, info, time);\n\n      if (options.offset || options.target) {\n        resolveOffsets(element, info, options);\n      }\n    },\n    notify: () => onScroll(info)\n  };\n}\n\nexport { createOnScrollHandler };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/dom/scroll/on-scroll-handler.mjs"],"names":["warnOnce","updateScrollInfo","resolveOffsets","measure","container","target","info","x","targetOffset","y","node","offsetLeft","offsetTop","offsetParent","targetLength","scrollWidth","clientWidth","scrollHeight","clientHeight","containerLength","process","env","NODE_ENV","getComputedStyle","position","createOnScrollHandler","element","onScroll","options","update","time","offset","notify"],"mappings":"AAAA,SAASA,QAAT,QAAyB,8BAAzB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,cAAT,QAA+B,qBAA/B;;AAEA,SAASC,OAAT,CAAiBC,SAAjB,EAAsD;AAAA,MAA1BC,MAA0B,uEAAjBD,SAAiB;AAAA,MAANE,IAAM;;AAClD;AACJ;AACA;AACIA,EAAAA,IAAI,CAACC,CAAL,CAAOC,YAAP,GAAsB,CAAtB;AACAF,EAAAA,IAAI,CAACG,CAAL,CAAOD,YAAP,GAAsB,CAAtB;;AACA,MAAIH,MAAM,KAAKD,SAAf,EAA0B;AACtB,QAAIM,IAAI,GAAGL,MAAX;;AACA,WAAOK,IAAI,IAAIA,IAAI,KAAKN,SAAxB,EAAmC;AAC/BE,MAAAA,IAAI,CAACC,CAAL,CAAOC,YAAP,IAAuBE,IAAI,CAACC,UAA5B;AACAL,MAAAA,IAAI,CAACG,CAAL,CAAOD,YAAP,IAAuBE,IAAI,CAACE,SAA5B;AACAF,MAAAA,IAAI,GAAGA,IAAI,CAACG,YAAZ;AACH;AACJ;;AACDP,EAAAA,IAAI,CAACC,CAAL,CAAOO,YAAP,GACIT,MAAM,KAAKD,SAAX,GAAuBC,MAAM,CAACU,WAA9B,GAA4CV,MAAM,CAACW,WADvD;AAEAV,EAAAA,IAAI,CAACG,CAAL,CAAOK,YAAP,GACIT,MAAM,KAAKD,SAAX,GAAuBC,MAAM,CAACY,YAA9B,GAA6CZ,MAAM,CAACa,YADxD;AAEAZ,EAAAA,IAAI,CAACC,CAAL,CAAOY,eAAP,GAAyBf,SAAS,CAACY,WAAnC;AACAV,EAAAA,IAAI,CAACG,CAAL,CAAOU,eAAP,GAAyBf,SAAS,CAACc,YAAnC;AACA;AACJ;AACA;AACA;;AACI,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,QAAIlB,SAAS,IAAIC,MAAb,IAAuBA,MAAM,KAAKD,SAAtC,EAAiD;AAC7CJ,MAAAA,QAAQ,CAACuB,gBAAgB,CAACnB,SAAD,CAAhB,CAA4BoB,QAA5B,KAAyC,QAA1C,EAAoD,sJAApD,CAAR;AACH;AACJ;AACJ;;AACD,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,QAAxC,EAAkDrB,IAAlD,EAAsE;AAAA,MAAdsB,OAAc,uEAAJ,EAAI;AAClE,SAAO;AACHzB,IAAAA,OAAO,EAAE,MAAMA,OAAO,CAACuB,OAAD,EAAUE,OAAO,CAACvB,MAAlB,EAA0BC,IAA1B,CADnB;AAEHuB,IAAAA,MAAM,EAAGC,IAAD,IAAU;AACd7B,MAAAA,gBAAgB,CAACyB,OAAD,EAAUpB,IAAV,EAAgBwB,IAAhB,CAAhB;;AACA,UAAIF,OAAO,CAACG,MAAR,IAAkBH,OAAO,CAACvB,MAA9B,EAAsC;AAClCH,QAAAA,cAAc,CAACwB,OAAD,EAAUpB,IAAV,EAAgBsB,OAAhB,CAAd;AACH;AACJ,KAPE;AAQHI,IAAAA,MAAM,EAAE,MAAML,QAAQ,CAACrB,IAAD;AARnB,GAAP;AAUH;;AAED,SAASmB,qBAAT","sourcesContent":["import { warnOnce } from '../../../utils/warn-once.mjs';\nimport { updateScrollInfo } from './info.mjs';\nimport { resolveOffsets } from './offsets/index.mjs';\n\nfunction measure(container, target = container, info) {\n    /**\n     * Find inset of target within scrollable container\n     */\n    info.x.targetOffset = 0;\n    info.y.targetOffset = 0;\n    if (target !== container) {\n        let node = target;\n        while (node && node !== container) {\n            info.x.targetOffset += node.offsetLeft;\n            info.y.targetOffset += node.offsetTop;\n            node = node.offsetParent;\n        }\n    }\n    info.x.targetLength =\n        target === container ? target.scrollWidth : target.clientWidth;\n    info.y.targetLength =\n        target === container ? target.scrollHeight : target.clientHeight;\n    info.x.containerLength = container.clientWidth;\n    info.y.containerLength = container.clientHeight;\n    /**\n     * In development mode ensure scroll containers aren't position: static as this makes\n     * it difficult to measure their relative positions.\n     */\n    if (process.env.NODE_ENV !== \"production\") {\n        if (container && target && target !== container) {\n            warnOnce(getComputedStyle(container).position !== \"static\", \"Please ensure that the container has a non-static position, like 'relative', 'fixed', or 'absolute' to ensure scroll offset is calculated correctly.\");\n        }\n    }\n}\nfunction createOnScrollHandler(element, onScroll, info, options = {}) {\n    return {\n        measure: () => measure(element, options.target, info),\n        update: (time) => {\n            updateScrollInfo(element, info, time);\n            if (options.offset || options.target) {\n                resolveOffsets(element, info, options);\n            }\n        },\n        notify: () => onScroll(info),\n    };\n}\n\nexport { createOnScrollHandler };\n"]},"metadata":{},"sourceType":"module"}