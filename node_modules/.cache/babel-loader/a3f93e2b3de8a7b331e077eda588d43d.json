{"ast":null,"code":"'use client'; // src/use-shortcut.ts\n\nimport { useEffect, useRef, useState } from \"react\";\n\nfunction isPrintableCharacter(event) {\n  const {\n    key\n  } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\n\nfunction useShortcut() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    timeout = 300,\n    preventDefault = () => true\n  } = props;\n  const [keys, setKeys] = useState([]);\n  const timeoutRef = useRef();\n\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  const clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n\n  useEffect(() => flush, []);\n\n  function onKeyDown(fn) {\n    return event => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key);\n\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        setKeys(keysCopy);\n        fn(keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n\n  return onKeyDown;\n}\n\nexport { useShortcut };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/menu/src/use-shortcut.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,EAAoB,MAApB,EAA4B,QAA5B,QAA4C,OAA5C;;AAMA,SAAS,oBAAT,CAA8B,KAA9B,EAA0D;AACxD,QAAM;AAAE,IAAA;AAAF,MAAU,KAAhB;AACA,SAAO,GAAA,CAAI,MAAJ,KAAe,CAAf,IAAqB,GAAA,CAAI,MAAJ,GAAa,CAAb,IAAkB,eAAe,IAAf,CAAoB,GAApB,CAA9C;AACF;;AAWO,SAAS,WAAT,GAAmD;AAAA,MAA9B,KAA8B,uEAAJ,EAAI;AACxD,QAAM;AAAE,IAAA,OAAA,GAAU,GAAZ;AAAiB,IAAA,cAAA,GAAiB,MAAM;AAAxC,MAAiD,KAAvD;AAEA,QAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,QAAA,CAAmB,EAAnB,CAAxB;AACA,QAAM,UAAA,GAAa,MAAA,EAAnB;;AAEA,QAAM,KAAA,GAAQ,MAAM;AAClB,QAAI,UAAA,CAAW,OAAf,EAAwB;AACtB,MAAA,YAAA,CAAa,UAAA,CAAW,OAAxB,CAAA;AACA,MAAA,UAAA,CAAW,OAAX,GAAqB,IAArB;AACF;AACF,GALA;;AAOA,QAAM,mBAAA,GAAsB,MAAM;AAChC,IAAA,KAAA;AACA,IAAA,UAAA,CAAW,OAAX,GAAqB,UAAA,CAAW,MAAM;AACpC,MAAA,OAAA,CAAQ,EAAR,CAAA;AACA,MAAA,UAAA,CAAW,OAAX,GAAqB,IAArB;AACF,KAHqB,EAGlB,OAHkB,CAArB;AAIF,GANA;;AAQA,EAAA,SAAA,CAAU,MAAM,KAAhB,EAAuB,EAAvB,CAAA;;AAIA,WAAS,SAAT,CAAmB,EAAnB,EAAiC;AAC/B,WAAQ,KAAD,IAAgC;AACrC,UAAI,KAAA,CAAM,GAAN,KAAc,WAAlB,EAA+B;AAC7B,cAAM,QAAA,GAAW,CAAC,GAAG,IAAJ,CAAjB;AACA,QAAA,QAAA,CAAS,GAAT;AACA,QAAA,OAAA,CAAQ,QAAR,CAAA;AACA;AACF;;AAEA,UAAI,oBAAA,CAAqB,KAArB,CAAJ,EAAiC;AAC/B,cAAM,QAAA,GAAW,IAAA,CAAK,MAAL,CAAY,KAAA,CAAM,GAAlB,CAAjB;;AAEA,YAAI,cAAA,CAAe,KAAf,CAAJ,EAA2B;AACzB,UAAA,KAAA,CAAM,cAAN;AACA,UAAA,KAAA,CAAM,eAAN;AACF;;AAEA,QAAA,OAAA,CAAQ,QAAR,CAAA;AACA,QAAA,EAAA,CAAG,QAAA,CAAS,IAAT,CAAc,EAAd,CAAH,CAAA;AAEA,QAAA,mBAAA;AACF;AACF,KArBA;AAsBF;;AAEA,SAAO,SAAP;AACF","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\n\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\nfunction isPrintableCharacter(event: React.KeyboardEvent) {\n  const { key } = event\n  return key.length === 1 || (key.length > 1 && /[^a-zA-Z0-9]/.test(key))\n}\n\nexport interface UseShortcutProps {\n  timeout?: number\n  preventDefault?: (event: React.KeyboardEvent) => boolean\n}\n\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\nexport function useShortcut(props: UseShortcutProps = {}) {\n  const { timeout = 300, preventDefault = () => true } = props\n\n  const [keys, setKeys] = useState<string[]>([])\n  const timeoutRef = useRef<any>()\n\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = null\n    }\n  }\n\n  const clearKeysAfterDelay = () => {\n    flush()\n    timeoutRef.current = setTimeout(() => {\n      setKeys([])\n      timeoutRef.current = null\n    }, timeout)\n  }\n\n  useEffect(() => flush, [])\n\n  type Callback = (keysSoFar: string) => void\n\n  function onKeyDown(fn: Callback) {\n    return (event: React.KeyboardEvent) => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys]\n        keysCopy.pop()\n        setKeys(keysCopy)\n        return\n      }\n\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key)\n\n        if (preventDefault(event)) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n\n        setKeys(keysCopy)\n        fn(keysCopy.join(\"\"))\n\n        clearKeysAfterDelay()\n      }\n    }\n  }\n\n  return onKeyDown\n}\n"]},"metadata":{},"sourceType":"module"}