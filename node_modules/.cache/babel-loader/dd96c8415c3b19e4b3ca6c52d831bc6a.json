{"ast":null,"code":"'use client';\n\nimport { NativeImage } from \"./chunk-X3PS6RUF.mjs\";\nimport { shouldShowFallbackImage, useImage } from \"./chunk-SPIKMR6I.mjs\"; // src/image.tsx\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\"; // ../../utilities/object-utils/src/omit.ts\n\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n\n  return clone;\n} // src/image.tsx\n\n\nimport { jsx } from \"react/jsx-runtime\";\nvar Image = forwardRef(function Image2(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || // use can opt out of fallback image\n  ignoreFallback || // if the user doesn't provide any kind of fallback we should ignore it\n  !providedFallback;\n  const status = useImage({ ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]))\n  };\n\n  if (showFallbackImage) {\n    if (fallback) return fallback;\n    return /* @__PURE__ */jsx(chakra.img, {\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc,\n      ...shared\n    });\n  }\n\n  return /* @__PURE__ */jsx(chakra.img, {\n    as: NativeImage,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: \"chakra-image\",\n    ...shared\n  });\n});\nImage.displayName = \"Image\";\nexport { Image };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/image/src/image.tsx","/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/utilities/object-utils/src/omit.ts"],"names":["Image"],"mappings":";;;;;AAAA,SACE,MADF,EAGE,UAHF,QAKO,mBALP,C;;ACAO,SAAS,IAAT,CACL,MADK,EAGL;AAAA,MADA,UACA,uEADkB,EAClB;AACA,QAAM,KAAA,GAAiC,MAAA,CAAO,MAAP,CAAc,EAAd,EAAkB,MAAlB,CAAvC;;AACA,OAAA,MAAW,GAAX,IAAkB,UAAlB,EAA8B;AAC5B,QAAI,GAAA,IAAO,KAAX,EAAkB;AAChB,aAAO,KAAA,CAAM,GAAN,CAAP;AACF;AACF;;AACA,SAAO,KAAP;AACF,C;;;ADyHM,SAAA,GAAA,QAAA,mBAAA;AAxDC,IAAM,KAAA,GAAQ,UAAA,CAA8B,SAASA,MAAT,CAAe,KAAf,EAAsB,GAAtB,EAA2B;AAC5E,QAAM;AACJ,IAAA,WADI;AAEJ,IAAA,QAFI;AAGJ,IAAA,GAHI;AAIJ,IAAA,MAJI;AAKJ,IAAA,KALI;AAMJ,IAAA,GANI;AAOJ,IAAA,OAPI;AAQJ,IAAA,cARI;AASJ,IAAA,WATI;AAUJ,IAAA,gBAAA,GAAmB,mBAVf;AAWJ,IAAA,cAXI;AAYJ,OAAG;AAZC,MAaF,KAbJ;AAeA,QAAM,gBAAA,GAAmB,WAAA,KAAgB,KAAA,CAAhB,IAA6B,QAAA,KAAa,KAAA,CAAnE;AAOA,QAAM,yBAAA,GACJ,OAAA,IAAW,IAAX,IAAW;AAEX,EAAA,cAFA,IAEA;AAEA,GAAC,gBALH;AAUA,QAAM,MAAA,GAAS,QAAA,CAAS,EACtB,GAAG,KADmB;AAEtB,IAAA,WAFsB;AAGtB,IAAA,cAAA,EAAgB;AAHM,GAAT,CAAf;AAMA,QAAM,iBAAA,GAAoB,uBAAA,CAAwB,MAAxB,EAAgC,gBAAhC,CAA1B;AAEA,QAAM,MAAA,GAAS;AACb,IAAA,GADa;AAEb,IAAA,SAAA,EAAW,GAFE;AAGb,IAAA,cAAA,EAAgB,KAHH;AAIb,QAAI,yBAAA,GAA4B,IAA5B,GAAmC,IAAA,CAAK,IAAL,EAAW,CAAC,SAAD,EAAY,QAAZ,CAAX,CAAvC;AAJa,GAAf;;AAOA,MAAI,iBAAJ,EAAuB;AAKrB,QAAI,QAAJ,EAAc,OAAO,QAAP;AAEd,WACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC;AACC,MAAA,EAAA,EAAI,WADL;AAEC,MAAA,SAAA,EAAU,2BAFX;AAGC,MAAA,GAAA,EAAK,WAHN;AAIE,SAAG;AAJL,KAAD,CADF;AAQF;;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC;AACC,IAAA,EAAA,EAAI,WADL;AAEC,IAAA,GAFD;AAGC,IAAA,MAHD;AAIC,IAAA,WAJD;AAKC,IAAA,OALD;AAMC,IAAA,cAND;AAOC,IAAA,SAAA,EAAU,cAPX;AAQE,OAAG;AARL,GAAD,CADF;AAYD,CA7EoB,CAAd;AA+EP,KAAA,CAAM,WAAN,GAAoB,OAApB","sourcesContent":["import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}