{"ast":null,"code":"'use client'; // src/progress.utils.tsx\n\nimport { keyframes } from \"@chakra-ui/system\";\n\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\n\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": {\n    left: \"-40%\"\n  },\n  \"100%\": {\n    left: \"100%\"\n  }\n});\nvar stripe = keyframes({\n  from: {\n    backgroundPosition: \"1rem 0\"\n  },\n  to: {\n    backgroundPosition: \"0 0\"\n  }\n});\n\nfunction getProgressProps(options) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\"\n  } = options;\n  const percent = valueToPercent(value, min, max);\n\n  const getAriaValueText = () => {\n    if (value == null) return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role\n    },\n    percent,\n    value\n  };\n}\n\nexport { spin, rotate, progress, stripe, getProgressProps };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/progress/src/progress.utils.tsx"],"names":[],"mappings":";;AAAA,SAAS,SAAT,QAA0B,mBAA1B;;AAEA,SAAS,cAAT,CAAwB,KAAxB,EAAuC,GAAvC,EAAoD,GAApD,EAAiE;AAC/D,SAAA,CAAS,KAAA,GAAQ,GAAjB,IAAwB,GAAxB,IAAgC,GAAA,GAAM,GAAtC,CAAA;AACF;;AAIO,IAAM,IAAA,GAAiB,SAAA,CAAU;AACtC,QAAM;AACJ,IAAA,eAAA,EAAiB,QADb;AAEJ,IAAA,gBAAA,EAAkB;AAFd,GADgC;AAKtC,SAAO;AACL,IAAA,eAAA,EAAiB,UADZ;AAEL,IAAA,gBAAA,EAAkB;AAFb,GAL+B;AAStC,UAAQ;AACN,IAAA,eAAA,EAAiB,UADX;AAEN,IAAA,gBAAA,EAAkB;AAFZ;AAT8B,CAAV,CAAvB;AAeA,IAAM,MAAA,GAAmB,SAAA,CAAU;AACxC,QAAM;AACJ,IAAA,SAAA,EAAW;AADP,GADkC;AAIxC,UAAQ;AACN,IAAA,SAAA,EAAW;AADL;AAJgC,CAAV,CAAzB;AASA,IAAM,QAAA,GAAqB,SAAA,CAAU;AAC1C,QAAM;AAAE,IAAA,IAAA,EAAM;AAAR,GADoC;AAE1C,UAAQ;AAAE,IAAA,IAAA,EAAM;AAAR;AAFkC,CAAV,CAA3B;AAKA,IAAM,MAAA,GAAmB,SAAA,CAAU;AACxC,EAAA,IAAA,EAAM;AAAE,IAAA,kBAAA,EAAoB;AAAtB,GADkC;AAExC,EAAA,EAAA,EAAI;AAAE,IAAA,kBAAA,EAAoB;AAAtB;AAFoC,CAAV,CAAzB;;AAmBA,SAAS,gBAAT,CAA0B,OAA1B,EAA4D;AACjE,QAAM;AACJ,IAAA,KAAA,GAAQ,CADJ;AAEJ,IAAA,GAFI;AAGJ,IAAA,GAHI;AAIJ,IAAA,SAJI;AAKJ,IAAA,YALI;AAMJ,IAAA,eANI;AAOJ,IAAA,IAAA,GAAO;AAPH,MAQF,OARJ;AAUA,QAAM,OAAA,GAAU,cAAA,CAAe,KAAf,EAAsB,GAAtB,EAA2B,GAA3B,CAAhB;;AAEA,QAAM,gBAAA,GAAmB,MAAM;AAC7B,QAAI,KAAA,IAAS,IAAb,EAAmB,OAAO,KAAA,CAAP;AACnB,WAAO,OAAO,YAAP,KAAwB,UAAxB,GACH,YAAA,CAAa,KAAb,EAAoB,OAApB,CADG,GAEH,SAFJ;AAGF,GALA;;AAOA,SAAO;AACL,IAAA,IAAA,EAAM;AACJ,4BAAsB,eAAA,GAAkB,EAAlB,GAAuB,KAAA,CADzC;AAEJ,uBAAiB,GAFb;AAGJ,uBAAiB,GAHb;AAIJ,uBAAiB,eAAA,GAAkB,KAAA,CAAlB,GAA8B,KAJ3C;AAKJ,wBAAkB,gBAAA,EALd;AAMJ,MAAA;AANI,KADD;AASL,IAAA,OATK;AAUL,IAAA;AAVK,GAAP;AAYF","sourcesContent":["import { keyframes } from \"@chakra-ui/system\"\n\nfunction valueToPercent(value: number, min: number, max: number) {\n  return ((value - min) * 100) / (max - min)\n}\n\ntype Keyframe = ReturnType<typeof keyframes>\n\nexport const spin: Keyframe = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\",\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\",\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\",\n  },\n})\n\nexport const rotate: Keyframe = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\nexport const progress: Keyframe = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" },\n})\n\nexport const stripe: Keyframe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" },\n})\n\nexport interface GetProgressPropsOptions {\n  value?: number\n  min: number\n  max: number\n  valueText?: string\n  getValueText?(value: number, percent: number): string\n  isIndeterminate?: boolean\n  role?: React.AriaRole\n}\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nexport function getProgressProps(options: GetProgressPropsOptions) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\",\n  } = options\n\n  const percent = valueToPercent(value, min, max)\n\n  const getAriaValueText = () => {\n    if (value == null) return undefined\n    return typeof getValueText === \"function\"\n      ? getValueText(value, percent)\n      : valueText\n  }\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role,\n    },\n    percent,\n    value,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}