{"ast":null,"code":"'use client';\n\nimport { Skeleton } from \"./chunk-GOJLRND4.mjs\"; // src/skeleton-text.tsx\n\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction range(count) {\n  return Array(count).fill(1).map((_, index) => index + 1);\n}\n\nvar defaultNoOfLines = 3;\n\nvar SkeletonText = props => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props;\n  const noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  const numbers = range(noOfLinesValue);\n\n  const getWidth = index => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n\n    return \"100%\";\n  };\n\n  const _className = cx(\"chakra-skeleton__group\", className);\n\n  return /* @__PURE__ */jsx(chakra.div, {\n    className: _className,\n    ...rest,\n    children: numbers.map((number, index) => {\n      if (isLoaded && index > 0) {\n        return null;\n      }\n\n      const sizeProps = isLoaded ? null : {\n        mb: number === numbers.length ? \"0\" : spacing,\n        width: getWidth(number),\n        height: skeletonHeight\n      };\n      return /* @__PURE__ */jsx(Skeleton, {\n        startColor,\n        endColor,\n        isLoaded,\n        fadeDuration,\n        speed,\n        variant,\n        size,\n        colorScheme,\n        ...sizeProps,\n        // allows animating the children\n        children: index === 0 ? children : void 0\n      }, numbers.length.toString() + number);\n    })\n  });\n};\n\nSkeletonText.displayName = \"SkeletonText\";\nexport { SkeletonText };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/skeleton/src/skeleton-text.tsx"],"names":[],"mappings":";;;;AAAA,SAAS,kBAAT,QAAmC,wBAAnC;AACA,SAAS,MAAT,QAAuB,mBAAvB;AACA,SAAS,EAAT,QAAmB,yBAAnB;AAyEU,SAAA,GAAA,QAAA,mBAAA;;AAtEV,SAAS,KAAT,CAAe,KAAf,EAA8B;AAC5B,SAAO,KAAA,CAAM,KAAN,CAAA,CACJ,IADI,CACC,CADD,EAEJ,GAFI,CAEA,CAAC,CAAD,EAAI,KAAJ,KAAc,KAAA,GAAQ,CAFtB,CAAP;AAGF;;AASA,IAAM,gBAAA,GAAmB,CAAzB;;AAOO,IAAM,YAAA,GAA6C,KAAD,IAAW;AAClE,QAAM;AACJ,IAAA,SAAA,GAAY,gBADR;AAEJ,IAAA,OAAA,GAAU,QAFN;AAGJ,IAAA,cAAA,GAAiB,QAHb;AAIJ,IAAA,SAJI;AAKJ,IAAA,UALI;AAMJ,IAAA,QANI;AAOJ,IAAA,QAPI;AAQJ,IAAA,YARI;AASJ,IAAA,KATI;AAUJ,IAAA,OAVI;AAWJ,IAAA,IAXI;AAYJ,IAAA,WAZI;AAaJ,IAAA,QAbI;AAcJ,OAAG;AAdC,MAeF,KAfJ;AAiBA,QAAM,cAAA,GACJ,kBAAA,CACE,OAAO,SAAP,KAAqB,QAArB,GAAgC,CAAC,SAAD,CAAhC,GAA8C,SADhD,CAAA,IAEK,gBAHP;AAIA,QAAM,OAAA,GAAU,KAAA,CAAM,cAAN,CAAhB;;AAEA,QAAM,QAAA,GAAY,KAAD,IAAmB;AAClC,QAAI,cAAA,GAAiB,CAArB,EAAwB;AACtB,aAAO,KAAA,KAAU,OAAA,CAAQ,MAAlB,GAA2B,KAA3B,GAAmC,MAA1C;AACF;;AACA,WAAO,MAAP;AACF,GALA;;AAOA,QAAM,UAAA,GAAa,EAAA,CAAG,wBAAH,EAA6B,SAA7B,CAAnB;;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC;AAAW,IAAA,SAAA,EAAW,UAAtB;AAAmC,OAAG,IAAtC;AACE,IAAA,QAAA,EAAA,OAAA,CAAQ,GAAR,CAAY,CAAC,MAAD,EAAS,KAAT,KAAmB;AAC9B,UAAI,QAAA,IAAY,KAAA,GAAQ,CAAxB,EAA2B;AAEzB,eAAO,IAAP;AACF;;AAEA,YAAM,SAAA,GAAY,QAAA,GACd,IADc,GAEd;AACE,QAAA,EAAA,EAAI,MAAA,KAAW,OAAA,CAAQ,MAAnB,GAA4B,GAA5B,GAAkC,OADxC;AAEE,QAAA,KAAA,EAAO,QAAA,CAAS,MAAT,CAFT;AAGE,QAAA,MAAA,EAAQ;AAHV,OAFJ;AAQA,aACE,eAAA,GAAA,CAAC,QAAD,EAAC;AAEC,QAAA,UAFD;AAGC,QAAA,QAHD;AAIC,QAAA,QAJD;AAKC,QAAA,YALD;AAMC,QAAA,KAND;AAOC,QAAA,OAPD;AAQC,QAAA,IARD;AASC,QAAA,WATD;AAUE,WAAG,SAVL;AAUK;AAIF,QAAA,QAAA,EAAA,KAAA,KAAU,CAAV,GAAc,QAAd,GAAyB,KAAA;AAd5B,OAAD,EACO,OAAA,CAAQ,MAAR,CAAe,QAAf,KAA4B,MADnC,CADF;AAmBD,KAjCA;AADF,GAAD,CADF;AAsCF,CAvEO;;AAyEP,YAAA,CAAa,WAAb,GAA2B,cAA3B","sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport { chakra } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { SkeletonProps, Skeleton } from \"./skeleton\"\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\nconst defaultNoOfLines = 3\n/**\n * `SkeletonText` is used to display the loading state in the form of text.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            variant={variant}\n            size={size}\n            colorScheme={colorScheme}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nSkeletonText.displayName = \"SkeletonText\"\n"]},"metadata":{},"sourceType":"module"}