{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\n\nfunction getErrorMessage(hook, provider) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`;\n}\n\nfunction createContext() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue\n  } = options;\n  const Context = createReactContext(defaultValue);\n  Context.displayName = name;\n\n  function useContext() {\n    var _a;\n\n    const context = useReactContext(Context);\n\n    if (!context && strict) {\n      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context];\n}\n\nexport { createContext };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-context/src/index.ts"],"names":[],"mappings":";;AAAA,SACE,aAAA,IAAiB,kBADnB,EAEE,UAAA,IAAc,eAFhB,QAGO,OAHP;;AAoBA,SAAS,eAAT,CAAyB,IAAzB,EAAuC,QAAvC,EAAyD;AACvD,SAAO,GAAG,IAAA,sEAA0E,QAAA,EAApF;AACF;;AAEO,SAAS,aAAT,GAAiE;AAAA,MAAvC,OAAuC,uEAAJ,EAAI;AACtE,QAAM;AACJ,IAAA,IADI;AAEJ,IAAA,MAAA,GAAS,IAFL;AAGJ,IAAA,QAAA,GAAW,YAHP;AAIJ,IAAA,YAAA,GAAe,UAJX;AAKJ,IAAA,YALI;AAMJ,IAAA;AANI,MAOF,OAPJ;AASA,QAAM,OAAA,GAAU,kBAAA,CAAkC,YAAlC,CAAhB;AAEA,EAAA,OAAA,CAAQ,WAAR,GAAsB,IAAtB;;AAEA,WAAS,UAAT,GAAsB;AAtCxB,QAAA,EAAA;;AAuCI,UAAM,OAAA,GAAU,eAAA,CAAgB,OAAhB,CAAhB;;AAEA,QAAI,CAAC,OAAD,IAAY,MAAhB,EAAwB;AACtB,YAAM,KAAA,GAAQ,IAAI,KAAJ,CACZ,YAAA,IAAA,IAAA,GAAA,YAAA,GAAgB,eAAA,CAAgB,QAAhB,EAA0B,YAA1B,CADJ,CAAd;AAGA,MAAA,KAAA,CAAM,IAAN,GAAa,cAAb;AACA,OAAA,EAAA,GAAA,KAAA,CAAM,iBAAN,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,KAAA,EAA0B,KAA1B,EAAiC,UAAjC,CAAA;AACA,YAAM,KAAN;AACF;;AAEA,WAAO,OAAP;AACF;;AAEA,SAAO,CAAC,OAAA,CAAQ,QAAT,EAAmB,UAAnB,EAA+B,OAA/B,CAAP;AACF","sourcesContent":["import {\n  createContext as createReactContext,\n  useContext as useReactContext,\n} from \"react\"\n\nexport interface CreateContextOptions<T> {\n  strict?: boolean\n  hookName?: string\n  providerName?: string\n  errorMessage?: string\n  name?: string\n  defaultValue?: T\n}\n\nexport type CreateContextReturn<T> = [\n  React.Provider<T>,\n  () => T,\n  React.Context<T>,\n]\n\nfunction getErrorMessage(hook: string, provider: string) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`\n}\n\nexport function createContext<T>(options: CreateContextOptions<T> = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue,\n  } = options\n\n  const Context = createReactContext<T | undefined>(defaultValue)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = useReactContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(\n        errorMessage ?? getErrorMessage(hookName, providerName),\n      )\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<T>\n}\n"]},"metadata":{},"sourceType":"module"}