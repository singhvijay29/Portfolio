{"ast":null,"code":"import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n  const {\n    willChange\n  } = next;\n\n  for (const key in next) {\n    const nextValue = next[key];\n    const prevValue = prev[key];\n\n    if (isMotionValue(nextValue)) {\n      /**\n       * If this is a motion value found in props or style, we want to add it\n       * to our visual element's motion value map.\n       */\n      element.addValue(key, nextValue);\n\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n      }\n      /**\n       * Check the version of the incoming motion value with this version\n       * and warn against mismatches.\n       */\n\n\n      if (process.env.NODE_ENV === \"development\") {\n        warnOnce(nextValue.version === \"11.2.10\", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.2.10 may not work as expected.`);\n      }\n    } else if (isMotionValue(prevValue)) {\n      /**\n       * If we're swapping from a motion value to a static value,\n       * create a new motion value from that\n       */\n      element.addValue(key, motionValue(nextValue, {\n        owner: element\n      }));\n\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.remove(key);\n      }\n    } else if (prevValue !== nextValue) {\n      /**\n       * If this is a flat value that has changed, update the motion value\n       * or create one if it doesn't exist. We only want to do this if we're\n       * not handling the value with our animation state.\n       */\n      if (element.hasValue(key)) {\n        const existingValue = element.getValue(key);\n\n        if (existingValue.liveStyle === true) {\n          existingValue.jump(nextValue);\n        } else if (!existingValue.hasAnimated) {\n          existingValue.set(nextValue);\n        }\n      } else {\n        const latestValue = element.getStaticValue(key);\n        element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, {\n          owner: element\n        }));\n      }\n    }\n  } // Handle removed values\n\n\n  for (const key in prev) {\n    if (next[key] === undefined) element.removeValue(key);\n  }\n\n  return next;\n}\n\nexport { updateMotionValuesFromProps };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs"],"names":["isWillChangeMotionValue","warnOnce","motionValue","isMotionValue","updateMotionValuesFromProps","element","next","prev","willChange","key","nextValue","prevValue","addValue","add","process","env","NODE_ENV","version","owner","remove","hasValue","existingValue","getValue","liveStyle","jump","hasAnimated","set","latestValue","getStaticValue","undefined","removeValue"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,oCAAxC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,aAAT,QAA8B,uCAA9B;;AAEA,SAASC,2BAAT,CAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,IAApD,EAA0D;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAiBF,IAAvB;;AACA,OAAK,MAAMG,GAAX,IAAkBH,IAAlB,EAAwB;AACpB,UAAMI,SAAS,GAAGJ,IAAI,CAACG,GAAD,CAAtB;AACA,UAAME,SAAS,GAAGJ,IAAI,CAACE,GAAD,CAAtB;;AACA,QAAIN,aAAa,CAACO,SAAD,CAAjB,EAA8B;AAC1B;AACZ;AACA;AACA;AACYL,MAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBC,SAAtB;;AACA,UAAIV,uBAAuB,CAACQ,UAAD,CAA3B,EAAyC;AACrCA,QAAAA,UAAU,CAACK,GAAX,CAAeJ,GAAf;AACH;AACD;AACZ;AACA;AACA;;;AACY,UAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCf,QAAAA,QAAQ,CAACS,SAAS,CAACO,OAAV,KAAsB,SAAvB,EAAmC,4CAA2CP,SAAS,CAACO,OAAQ,yCAAhG,CAAR;AACH;AACJ,KAhBD,MAiBK,IAAId,aAAa,CAACQ,SAAD,CAAjB,EAA8B;AAC/B;AACZ;AACA;AACA;AACYN,MAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBP,WAAW,CAACQ,SAAD,EAAY;AAAEQ,QAAAA,KAAK,EAAEb;AAAT,OAAZ,CAAjC;;AACA,UAAIL,uBAAuB,CAACQ,UAAD,CAA3B,EAAyC;AACrCA,QAAAA,UAAU,CAACW,MAAX,CAAkBV,GAAlB;AACH;AACJ,KATI,MAUA,IAAIE,SAAS,KAAKD,SAAlB,EAA6B;AAC9B;AACZ;AACA;AACA;AACA;AACY,UAAIL,OAAO,CAACe,QAAR,CAAiBX,GAAjB,CAAJ,EAA2B;AACvB,cAAMY,aAAa,GAAGhB,OAAO,CAACiB,QAAR,CAAiBb,GAAjB,CAAtB;;AACA,YAAIY,aAAa,CAACE,SAAd,KAA4B,IAAhC,EAAsC;AAClCF,UAAAA,aAAa,CAACG,IAAd,CAAmBd,SAAnB;AACH,SAFD,MAGK,IAAI,CAACW,aAAa,CAACI,WAAnB,EAAgC;AACjCJ,UAAAA,aAAa,CAACK,GAAd,CAAkBhB,SAAlB;AACH;AACJ,OARD,MASK;AACD,cAAMiB,WAAW,GAAGtB,OAAO,CAACuB,cAAR,CAAuBnB,GAAvB,CAApB;AACAJ,QAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBP,WAAW,CAACyB,WAAW,KAAKE,SAAhB,GAA4BF,WAA5B,GAA0CjB,SAA3C,EAAsD;AAAEQ,UAAAA,KAAK,EAAEb;AAAT,SAAtD,CAAjC;AACH;AACJ;AACJ,GApDqD,CAqDtD;;;AACA,OAAK,MAAMI,GAAX,IAAkBF,IAAlB,EAAwB;AACpB,QAAID,IAAI,CAACG,GAAD,CAAJ,KAAcoB,SAAlB,EACIxB,OAAO,CAACyB,WAAR,CAAoBrB,GAApB;AACP;;AACD,SAAOH,IAAP;AACH;;AAED,SAASF,2BAAT","sourcesContent":["import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"11.2.10\", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.2.10 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n"]},"metadata":{},"sourceType":"module"}