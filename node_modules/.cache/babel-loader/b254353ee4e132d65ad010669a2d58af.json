{"ast":null,"code":"'use client'; // src/chakra-provider.tsx\n\nimport { ChakraProvider as BaseChakraProvider } from \"@chakra-ui/provider\";\nimport { theme as defaultTheme, baseTheme } from \"@chakra-ui/theme\";\nimport { ToastProvider, ToastOptionProvider } from \"@chakra-ui/toast\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\n\nvar createChakraProvider = providerTheme => {\n  return function ChakraProvider2(_ref) {\n    let {\n      children,\n      theme = providerTheme,\n      toastOptions,\n      ...restProps\n    } = _ref;\n    return /* @__PURE__ */jsxs(BaseChakraProvider, {\n      theme,\n      ...restProps,\n      children: [/* @__PURE__ */jsx(ToastOptionProvider, {\n        value: toastOptions == null ? void 0 : toastOptions.defaultOptions,\n        children\n      }), /* @__PURE__ */jsx(ToastProvider, { ...toastOptions\n      })]\n    });\n  };\n};\n\nvar ChakraProvider = createChakraProvider(defaultTheme);\nvar ChakraBaseProvider = createChakraProvider(baseTheme);\nexport { ChakraProvider, ChakraBaseProvider };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react/src/chakra-provider.tsx"],"names":["ChakraProvider"],"mappings":";;AAAA,SACE,cAAA,IAAkB,kBADpB,QAGO,qBAHP;AAIA,SAAS,KAAA,IAAS,YAAlB,EAAgC,SAAhC,QAAwD,kBAAxD;AACA,SACE,aADF,EAGE,mBAHF,QAIO,kBAJP;AAwBM,SACE,GADF,EAAA,IAAA,QAAA,mBAAA;;AAVN,IAAM,oBAAA,GACJ,aAD2B,IAExB;AACH,SAAO,SAASA,eAAT,OAKiB;AAAA,QALO;AAC7B,MAAA,QAD6B;AAE7B,MAAA,KAAA,GAAQ,aAFqB;AAG7B,MAAA,YAH6B;AAI7B,SAAG;AAJ0B,KAKP;AACtB,WACE,eAAA,IAAA,CAAC,kBAAD,EAAC;AAAmB,MAAA,KAAnB;AAAkC,SAAG,SAArC;AACC,MAAA,QAAA,EAAA,CAAA,eAAA,GAAA,CAAC,mBAAD,EAAC;AAAoB,QAAA,KAAA,EAAO,YAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAc,cAAzC;AACE,QAAA;AADF,OAAD,CAAA,EAGA,eAAA,GAAA,CAAC,aAAD,EAAC,EAAe,GAAG;AAAlB,OAAD,CAHA;AADD,KAAD,CADF;AAQF,GAdA;AAeF,CAlBA;;AAoBO,IAAM,cAAA,GAAiB,oBAAA,CAAqB,YAArB,CAAvB;AACA,IAAM,kBAAA,GAAqB,oBAAA,CAAqB,SAArB,CAA3B","sourcesContent":["import {\n  ChakraProvider as BaseChakraProvider,\n  ChakraProviderProps as BaseChakraProviderProps,\n} from \"@chakra-ui/provider\"\nimport { theme as defaultTheme, baseTheme, Theme } from \"@chakra-ui/theme\"\nimport {\n  ToastProvider,\n  ToastProviderProps,\n  ToastOptionProvider,\n} from \"@chakra-ui/toast\"\nimport { Dict } from \"@chakra-ui/utils\"\n\nexport interface ChakraProviderProps extends BaseChakraProviderProps {\n  /**\n   * Provide defaults for `useToast()` usages for `ChakraProvider`s children\n   */\n  toastOptions?: ToastProviderProps\n}\n\nconst createChakraProvider = (\n  providerTheme: Theme | (Omit<Theme, \"components\"> & { components: Dict }),\n) => {\n  return function ChakraProvider({\n    children,\n    theme = providerTheme,\n    toastOptions,\n    ...restProps\n  }: ChakraProviderProps) {\n    return (\n      <BaseChakraProvider theme={theme} {...restProps}>\n        <ToastOptionProvider value={toastOptions?.defaultOptions}>\n          {children}\n        </ToastOptionProvider>\n        <ToastProvider {...toastOptions} />\n      </BaseChakraProvider>\n    )\n  }\n}\n\nexport const ChakraProvider = createChakraProvider(defaultTheme)\nexport const ChakraBaseProvider = createChakraProvider(baseTheme)\n"]},"metadata":{},"sourceType":"module"}