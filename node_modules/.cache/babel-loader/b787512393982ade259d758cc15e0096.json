{"ast":null,"code":"'use client';\n\nimport { useFormControlContext } from \"./chunk-DFWC5MHP.mjs\"; // src/use-form-control.ts\n\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\n\nfunction useFormControl(props) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props);\n  return { ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  };\n}\n\nfunction useFormControlProps(props) {\n  var _a, _b, _c;\n\n  const field = useFormControlContext();\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props;\n  const labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : [];\n\n  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {\n    labelIds.push(field.feedbackId);\n  }\n\n  if (field == null ? void 0 : field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n\n  return { ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || void 0,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  };\n}\n\nexport { useFormControl, useFormControlProps };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/form-control/src/use-form-control.ts"],"names":[],"mappings":"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","sourcesContent":["import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}