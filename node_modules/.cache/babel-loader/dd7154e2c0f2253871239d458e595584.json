{"ast":null,"code":"import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = key => !isValidMotionProp(key);\n\nfunction loadExternalIsValidProp(isValidProp) {\n  if (!isValidProp) return; // Explicitly filter our events\n\n  shouldForward = key => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\n\n\ntry {\n  /**\n   * We attempt to import this package but require won't be defined in esm environments, in that case\n   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n   * in favour of explicit injection.\n   */\n  loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {// We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\n\nfunction filterProps(props, isDom, forwardMotionProps) {\n  const filteredProps = {};\n\n  for (const key in props) {\n    /**\n     * values is considered a valid prop by Emotion, so if it's present\n     * this will be rendered out to the DOM unless explicitly filtered.\n     *\n     * We check the type as it could be used with the `feColorMatrix`\n     * element, which we support.\n     */\n    if (key === \"values\" && typeof props.values === \"object\") continue;\n\n    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners\n    props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n      filteredProps[key] = props[key];\n    }\n  }\n\n  return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs"],"names":["isValidMotionProp","shouldForward","key","loadExternalIsValidProp","isValidProp","startsWith","require","default","_a","filterProps","props","isDom","forwardMotionProps","filteredProps","values"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sCAAlC;;AAEA,IAAIC,aAAa,GAAIC,GAAD,IAAS,CAACF,iBAAiB,CAACE,GAAD,CAA/C;;AACA,SAASC,uBAAT,CAAiCC,WAAjC,EAA8C;AAC1C,MAAI,CAACA,WAAL,EACI,OAFsC,CAG1C;;AACAH,EAAAA,aAAa,GAAIC,GAAD,IAASA,GAAG,CAACG,UAAJ,CAAe,IAAf,IAAuB,CAACL,iBAAiB,CAACE,GAAD,CAAzC,GAAiDE,WAAW,CAACF,GAAD,CAArF;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI;AACA;AACJ;AACA;AACA;AACA;AACIC,EAAAA,uBAAuB,CAACG,OAAO,CAAC,wBAAD,CAAP,CAAkCC,OAAnC,CAAvB;AACH,CAPD,CAQA,OAAOC,EAAP,EAAW,CACP;AACH;;AACD,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,kBAAnC,EAAuD;AACnD,QAAMC,aAAa,GAAG,EAAtB;;AACA,OAAK,MAAMX,GAAX,IAAkBQ,KAAlB,EAAyB;AACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACQ,QAAIR,GAAG,KAAK,QAAR,IAAoB,OAAOQ,KAAK,CAACI,MAAb,KAAwB,QAAhD,EACI;;AACJ,QAAIb,aAAa,CAACC,GAAD,CAAb,IACCU,kBAAkB,KAAK,IAAvB,IAA+BZ,iBAAiB,CAACE,GAAD,CADjD,IAEC,CAACS,KAAD,IAAU,CAACX,iBAAiB,CAACE,GAAD,CAF7B,IAGA;AACCQ,IAAAA,KAAK,CAAC,WAAD,CAAL,IACGR,GAAG,CAACG,UAAJ,CAAe,QAAf,CALR,EAKmC;AAC/BQ,MAAAA,aAAa,CAACX,GAAD,CAAb,GACIQ,KAAK,CAACR,GAAD,CADT;AAEH;AACJ;;AACD,SAAOW,aAAP;AACH;;AAED,SAASJ,WAAT,EAAsBN,uBAAtB","sourcesContent":["import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n"]},"metadata":{},"sourceType":"module"}