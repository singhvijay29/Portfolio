{"ast":null,"code":"'use client';\n\nimport { modalManager, useModalManager } from \"./chunk-CYRBRIA2.mjs\"; // src/use-modal.ts\n\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\n\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = useRef(null);\n  const overlayRef = useRef(null);\n  const [dialogId, headerId, bodyId] = useIds(id, `chakra-modal`, `chakra-modal--header`, `chakra-modal--body`);\n  useAriaHidden(dialogRef, isOpen && useInert);\n  const index = useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = useRef(null);\n  const onMouseDown = useCallback(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const getDialogProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      role: \"dialog\",\n      ...props2,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : void 0,\n      \"aria-describedby\": bodyMounted ? bodyId : void 0,\n      onClick: callAllHandlers(props2.onClick, event => event.stopPropagation())\n    };\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  const onOverlayClick = useCallback(event => {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!modalManager.isTopModal(dialogRef.current)) return;\n\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  const getDialogContainerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props2.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)\n    };\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index\n  };\n}\n\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  useEffect(() => {\n    if (!ref.current || !shouldHide) return void 0;\n    return hideOthers(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\n\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\n\nexport { useModal, useAriaHidden };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/modal/src/use-modal.ts"],"names":["props"],"mappings":"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","sourcesContent":["import { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { hideOthers } from \"aria-hidden\"\n\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { modalManager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   * @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook used to manage multiple or nested modals\n   */\n  const index = useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: React.MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: React.MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!modalManager.isTopModal(dialogRef.current)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: React.RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  // save current ref in a local var to trigger the effect on identity change\n  const currentElement = ref.current\n\n  useEffect(() => {\n    // keep using `ref.current` inside the effect\n    // it may have changed during render and the execution of the effect\n    if (!ref.current || !shouldHide) return undefined\n\n    return hideOthers(ref.current)\n  }, [shouldHide, ref, currentElement])\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n"]},"metadata":{},"sourceType":"module"}