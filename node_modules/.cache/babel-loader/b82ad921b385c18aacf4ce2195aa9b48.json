{"ast":null,"code":"'use client';\n\nimport { useTabsStyles } from \"./chunk-GTRZJDIL.mjs\";\nimport { useTabIndicator } from \"./chunk-NXSBASJ3.mjs\"; // src/tab-indicator.tsx\n\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TabIndicator = forwardRef(function TabIndicator2(props, ref) {\n  const indicatorStyle = useTabIndicator();\n  const style = { ...props.style,\n    ...indicatorStyle\n  };\n  const styles = useTabsStyles();\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    ...props,\n    className: cx(\"chakra-tabs__tab-indicator\", props.className),\n    style,\n    __css: styles.indicator\n  });\n});\nTabIndicator.displayName = \"TabIndicator\";\nexport { TabIndicator };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/tabs/src/tab-indicator.tsx"],"names":["TabIndicator"],"mappings":";;;;;AAAA,SAAS,EAAT,QAAmB,yBAAnB;AACA,SAA0B,MAA1B,EAAkC,UAAlC,QAAoD,mBAApD;AAwBM,SAAA,GAAA,QAAA,mBAAA;AAXC,IAAM,YAAA,GAAe,UAAA,CAC1B,SAASA,aAAT,CAAsB,KAAtB,EAA6B,GAA7B,EAAkC;AAChC,QAAM,cAAA,GAAiB,eAAA,EAAvB;AACA,QAAM,KAAA,GAAQ,EACZ,GAAG,KAAA,CAAM,KADG;AAEZ,OAAG;AAFS,GAAd;AAKA,QAAM,MAAA,GAAS,aAAA,EAAf;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC;AACC,IAAA,GADD;AAEE,OAAG,KAFL;AAGC,IAAA,SAAA,EAAW,EAAA,CAAG,4BAAH,EAAiC,KAAA,CAAM,SAAvC,CAHZ;AAIC,IAAA,KAJD;AAKC,IAAA,KAAA,EAAO,MAAA,CAAO;AALf,GAAD,CADF;AASF,CAnB0B,CAArB;AAsBP,YAAA,CAAa,WAAb,GAA2B,cAA3B","sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\nimport { useTabsStyles } from \"./tabs\"\nimport { useTabIndicator } from \"./use-tabs\"\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  function TabIndicator(props, ref) {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useTabsStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nTabIndicator.displayName = \"TabIndicator\"\n"]},"metadata":{},"sourceType":"module"}