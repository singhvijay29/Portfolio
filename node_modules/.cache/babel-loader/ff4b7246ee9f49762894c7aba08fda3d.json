{"ast":null,"code":"'use client'; // src/use-checkbox-group.ts\n\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\n\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\n\nfunction useCheckboxGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return { ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\n\nexport { useCheckboxGroup };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/checkbox/src/use-checkbox-group.ts"],"names":["props"],"mappings":";;AAAA,SAAS,cAAT,QAA+B,mCAA/B;AACA,SAAS,oBAAT,QAAqC,yCAArC;AACA,SAAS,QAAT,QAAyB,yBAAzB;AACA,SAAS,WAAT,QAA4B,OAA5B;;AAGA,SAAS,YAAT,CAAsB,KAAtB,EAAyE;AACvE,SAAO,KAAA,IAAS,QAAA,CAAS,KAAT,CAAT,IAA4B,QAAA,CAAS,KAAA,CAAM,MAAf,CAAnC;AACF;;AAWO,SAAS,gBAAT,GAA6D;AAAA,MAAnC,KAAmC,uEAAJ,EAAI;AAClE,QAAM;AACJ,IAAA,YADI;AAEJ,IAAA,KAAA,EAAO,SAFH;AAGJ,IAAA,QAHI;AAIJ,IAAA,UAJI;AAKJ,IAAA;AALI,MAMF,KANJ;AAQA,QAAM,YAAA,GAAe,cAAA,CAAe,QAAf,CAArB;AAEA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,oBAAA,CAAqB;AAC7C,IAAA,KAAA,EAAO,SADsC;AAE7C,IAAA,YAAA,EAAc,YAAA,IAAgB,EAFe;AAG7C,IAAA,QAAA,EAAU;AAHmC,GAArB,CAA1B;AAMA,QAAM,YAAA,GAAe,WAAA,CAClB,YAAD,IAAgC;AAC9B,QAAI,CAAC,KAAL,EAAY;AAEZ,UAAM,SAAA,GAAY,YAAA,CAAa,YAAb,CAAA,GACd,YAAA,CAAa,MAAb,CAAoB,OADN,GAEd,CAAC,KAAA,CAAM,QAAN,CAAe,YAAf,CAFL;AAIA,UAAM,aAAA,GAAgB,YAAA,CAAa,YAAb,CAAA,GAClB,YAAA,CAAa,MAAb,CAAoB,KADF,GAElB,YAFJ;AAIA,UAAM,SAAA,GAAY,SAAA,GACd,CAAC,GAAG,KAAJ,EAAW,aAAX,CADc,GAEd,KAAA,CAAM,MAAN,CAAc,CAAD,IAAO,MAAA,CAAO,CAAP,CAAA,KAAc,MAAA,CAAO,aAAP,CAAlC,CAFJ;AAIA,IAAA,QAAA,CAAS,SAAT,CAAA;AACF,GAjBmB,EAkBnB,CAAC,QAAD,EAAW,KAAX,CAlBmB,CAArB;AAqBA,QAAM,gBAAA,GAAmB,WAAA,CACvB,YAAqC;AAAA,QAApCA,MAAoC,uEAAP,EAAO;AACnC,UAAM,UAAA,GAAa,QAAA,GAAW,SAAX,GAAuB,WAA1C;AACA,WAAO,EACL,GAAG,MADE;AAEL,OAAC,UAAD,GAAc,KAAA,CAAM,IAAN,CAAY,GAAD,IAAS,MAAA,CAAOA,MAAAA,CAAM,KAAb,CAAA,KAAwB,MAAA,CAAO,GAAP,CAA5C,CAFT;AAGL,MAAA,QAAA,EAAU;AAHL,KAAP;AAKF,GARuB,EASvB,CAAC,YAAD,EAAe,QAAf,EAAyB,KAAzB,CATuB,CAAzB;AAYA,SAAO;AACL,IAAA,KADK;AAEL,IAAA,UAFK;AAGL,IAAA,QAAA,EAAU,YAHL;AAIL,IAAA,QAJK;AAKL,IAAA;AALK,GAAP;AAOF","sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useCallback } from \"react\"\nimport { EventOrValue, UseCheckboxGroupProps } from \"./checkbox-types\"\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-checkbox-group\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Record<string, any> = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.some((val) => String(props.value) === String(val)),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"]},"metadata":{},"sourceType":"module"}