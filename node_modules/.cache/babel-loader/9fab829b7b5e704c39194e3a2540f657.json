{"ast":null,"code":"'use client';\n\nimport { useSafeLayoutEffect } from \"./chunk-724WJZW4.mjs\"; // src/use-dimensions.ts\n\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useRef, useState } from \"react\";\n\nfunction useDimensions(ref, observe) {\n  const [dimensions, setDimensions] = useState(null);\n  const rafId = useRef();\n  useSafeLayoutEffect(() => {\n    function measure() {\n      const node = ref.current;\n      if (!node) return;\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n\n    measure();\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [observe]);\n  return dimensions;\n}\n\nexport { useDimensions };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-dimensions.ts"],"names":[],"mappings":";;;;AAAA,SAAS,MAAT,QAAiC,kBAAjC;AACA,SAAS,MAAT,EAAiB,QAAjB,QAAiC,OAAjC;;AAeO,SAAS,aAAT,CACL,GADK,EAEL,OAFK,EAGL;AACA,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAA,CAA0B,IAA1B,CAApC;AACA,QAAM,KAAA,GAAQ,MAAA,EAAd;AAEA,EAAA,mBAAA,CAAoB,MAAM;AACxB,aAAS,OAAT,GAAmB;AACjB,YAAM,IAAA,GAAO,GAAA,CAAI,OAAjB;AACA,UAAI,CAAC,IAAL,EAAW;AACX,MAAA,KAAA,CAAM,OAAN,GAAgB,qBAAA,CAAsB,MAAM;AAC1C,cAAM,QAAA,GAAW,MAAA,CAAO,IAAP,CAAjB;AACA,QAAA,aAAA,CAAc,QAAd,CAAA;AACD,OAHe,CAAhB;AAIF;;AAEA,IAAA,OAAA;;AAEA,QAAI,OAAJ,EAAa;AACX,MAAA,MAAA,CAAO,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC;AACA,MAAA,MAAA,CAAO,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC;AACF;;AAEA,WAAO,MAAM;AACX,UAAI,OAAJ,EAAa;AACX,QAAA,MAAA,CAAO,mBAAP,CAA2B,QAA3B,EAAqC,OAArC;AACA,QAAA,MAAA,CAAO,mBAAP,CAA2B,QAA3B,EAAqC,OAArC;AACF;;AAEA,UAAI,KAAA,CAAM,OAAV,EAAmB;AACjB,QAAA,oBAAA,CAAqB,KAAA,CAAM,OAA3B,CAAA;AACF;AACF,KATA;AAUF,GA3BA,EA2BG,CAAC,OAAD,CA3BH,CAAA;AA6BA,SAAO,UAAP;AACF","sourcesContent":["import { getBox, BoxModel } from \"@chakra-ui/utils\"\nimport { useRef, useState } from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n *\n * @deprecated use the `useSize` hook instead\n *\n * ```jsx\n * import { useSize } from \"@chakra-ui/react-use-size\"\n * ```\n */\nexport function useDimensions(\n  ref: React.RefObject<HTMLElement>,\n  observe?: boolean,\n) {\n  const [dimensions, setDimensions] = useState<BoxModel | null>(null)\n  const rafId = useRef<number>()\n\n  useSafeLayoutEffect(() => {\n    function measure() {\n      const node = ref.current\n      if (!node) return\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node)\n        setDimensions(boxModel)\n      })\n    }\n\n    measure()\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure)\n      window.addEventListener(\"scroll\", measure)\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure)\n        window.removeEventListener(\"scroll\", measure)\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [observe])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}