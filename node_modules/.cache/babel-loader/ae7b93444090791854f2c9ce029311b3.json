{"ast":null,"code":"'use client'; // src/focus-lock.tsx\n\nimport ReactFocusLock from \"react-focus-lock\";\nimport { getAllFocusable } from \"@chakra-ui/dom-utils\";\nimport { useCallback } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nvar _a;\n\nvar FocusTrap = (_a = ReactFocusLock.default) != null ? _a : ReactFocusLock;\n\nvar FocusLock = props => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames\n  } = props;\n  const onActivation = useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      const focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        requestAnimationFrame(() => {\n          var _a2;\n\n          (_a2 = contentRef.current) == null ? void 0 : _a2.focus();\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  const onDeactivation = useCallback(() => {\n    var _a2;\n\n    (_a2 = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a2.focus();\n  }, [finalFocusRef]);\n  const returnFocus = restoreFocus && !finalFocusRef;\n  return /* @__PURE__ */jsx(FocusTrap, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus,\n    autoFocus,\n    disabled: isDisabled,\n    onActivation,\n    onDeactivation,\n    returnFocus,\n    children\n  });\n};\n\nFocusLock.displayName = \"FocusLock\";\nvar focus_lock_default = FocusLock;\nexport { FocusLock, focus_lock_default };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/focus-lock/src/focus-lock.tsx"],"names":[],"mappings":";;AAAA,OAAO,cAAP,MAA2B,kBAA3B;AACA,SAAS,eAAT,QAAgC,sBAAhC;AACA,SAAS,WAAT,QAA4B,OAA5B;AA+FI,SAAA,GAAA,QAAA,mBAAA;;AAjGJ,IAAA,EAAA;;AAIA,IAAM,SAAA,GAAA,CACH,EAAA,GAAA,cAAA,CAAuB,OADpB,KACH,IADG,GACH,EADG,GAC+B,cADrC;;AA4DO,IAAM,SAAA,GAAuC,KAAD,IAAW;AAC5D,QAAM;AACJ,IAAA,eADI;AAEJ,IAAA,aAFI;AAGJ,IAAA,UAHI;AAIJ,IAAA,YAJI;AAKJ,IAAA,QALI;AAMJ,IAAA,UANI;AAOJ,IAAA,SAPI;AAQJ,IAAA,eARI;AASJ,IAAA;AATI,MAUF,KAVJ;AAYA,QAAM,YAAA,GAAe,WAAA,CAAY,MAAM;AACrC,QAAI,eAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAiB,OAArB,EAA8B;AAC5B,MAAA,eAAA,CAAgB,OAAhB,CAAwB,KAAxB;AACF,KAFA,MAEA,IAAW,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAY,OAAvB,EAAgC;AAC9B,YAAM,UAAA,GAAa,eAAA,CAAgB,UAAA,CAAW,OAA3B,CAAnB;;AACA,UAAI,UAAA,CAAW,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,QAAA,qBAAA,CAAsB,MAAM;AAnFpC,cAAA,GAAA;;AAoFU,WAAA,GAAA,GAAA,UAAA,CAAW,OAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAoB,KAApB,EAAA;AACD,SAFD,CAAA;AAGF;AACF;AACF,GAXqB,EAWlB,CAAC,eAAD,EAAkB,UAAlB,CAXkB,CAArB;AAaA,QAAM,cAAA,GAAiB,WAAA,CAAY,MAAM;AA1F3C,QAAA,GAAA;;AA2FI,KAAA,GAAA,GAAA,aAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAe,OAAf,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAwB,KAAxB,EAAA;AACF,GAFuB,EAEpB,CAAC,aAAD,CAFoB,CAAvB;AAIA,QAAM,WAAA,GAAc,YAAA,IAAgB,CAAC,aAArC;AAEA,SACE,eAAA,GAAA,CAAC,SAAD,EAAC;AACC,IAAA,UAAA,EAAY,qBADb;AAEC,IAAA,eAFD;AAGC,IAAA,SAHD;AAIC,IAAA,QAAA,EAAU,UAJX;AAKC,IAAA,YALD;AAMC,IAAA,cAND;AAOC,IAAA,WAPD;AASE,IAAA;AATF,GAAD,CADF;AAaF,CA7CO;;AA+CP,SAAA,CAAU,WAAV,GAAwB,WAAxB;AAEA,IAAO,kBAAA,GAAQ,SAAf","sourcesContent":["import ReactFocusLock from \"react-focus-lock\"\nimport { getAllFocusable } from \"@chakra-ui/dom-utils\"\nimport { useCallback } from \"react\"\n\nconst FocusTrap: typeof ReactFocusLock =\n  (ReactFocusLock as any).default ?? ReactFocusLock\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\nexport interface FocusLockProps {\n  /**\n   * `ref` of the element to receive focus initially\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * `ref` of the element to return focus to when `FocusLock`\n   * unmounts\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of the wrapper for which the focus-lock wraps\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be restored to the element that\n   * triggered the `FocusLock` once it unmounts\n   *\n   * @default false\n   */\n  restoreFocus?: boolean\n  /**\n   * The component to render\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, focus trapping will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the first focusable element within the `children`\n   * will auto-focused once `FocusLock` mounts\n   *\n   * @default false\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, disables text selections inside, and outside focus lock\n   *\n   * @default false\n   */\n  persistentFocus?: boolean\n  /**\n   * Enables aggressive focus capturing within iframes.\n   * - If `true`: keep focus in the lock, no matter where lock is active\n   * - If `false`:  allows focus to move outside of iframe\n   *\n   * @default false\n   */\n  lockFocusAcrossFrames?: boolean\n}\n\nexport const FocusLock: React.FC<FocusLockProps> = (props) => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames,\n  } = props\n\n  const onActivation = useCallback(() => {\n    if (initialFocusRef?.current) {\n      initialFocusRef.current.focus()\n    } else if (contentRef?.current) {\n      const focusables = getAllFocusable(contentRef.current)\n      if (focusables.length === 0) {\n        requestAnimationFrame(() => {\n          contentRef.current?.focus()\n        })\n      }\n    }\n  }, [initialFocusRef, contentRef])\n\n  const onDeactivation = useCallback(() => {\n    finalFocusRef?.current?.focus()\n  }, [finalFocusRef])\n\n  const returnFocus = restoreFocus && !finalFocusRef\n\n  return (\n    <FocusTrap\n      crossFrame={lockFocusAcrossFrames}\n      persistentFocus={persistentFocus}\n      autoFocus={autoFocus}\n      disabled={isDisabled}\n      onActivation={onActivation}\n      onDeactivation={onDeactivation}\n      returnFocus={returnFocus}\n    >\n      {children}\n    </FocusTrap>\n  )\n}\n\nFocusLock.displayName = \"FocusLock\"\n\nexport default FocusLock\n"]},"metadata":{},"sourceType":"module"}