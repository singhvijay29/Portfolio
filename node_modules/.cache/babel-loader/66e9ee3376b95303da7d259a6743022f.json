{"ast":null,"code":"'use client';\n\nimport { MenuDescendantsProvider, MenuProvider, useMenu } from \"./chunk-SANI5SUM.mjs\"; // src/menu.tsx\n\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { omitThemingProps, useMultiStyleConfig, useTheme } from \"@chakra-ui/system\";\nimport { runIfFn } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [MenuStylesProvider, useMenuStyles] = createContext({\n  name: `MenuStylesContext`,\n  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\" `\n});\n\nvar Menu = props => {\n  const {\n    children\n  } = props;\n  const styles = useMultiStyleConfig(\"Menu\", props);\n  const ownProps = omitThemingProps(props);\n  const {\n    direction\n  } = useTheme();\n  const {\n    descendants,\n    ...ctx\n  } = useMenu({ ...ownProps,\n    direction\n  });\n  const context = useMemo(() => ctx, [ctx]);\n  const {\n    isOpen,\n    onClose,\n    forceUpdate\n  } = context;\n  return /* @__PURE__ */jsx(MenuDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx(MenuProvider, {\n      value: context,\n      children: /* @__PURE__ */jsx(MenuStylesProvider, {\n        value: styles,\n        children: runIfFn(children, {\n          isOpen,\n          onClose,\n          forceUpdate\n        })\n      })\n    })\n  });\n};\n\nMenu.displayName = \"Menu\";\nexport { useMenuStyles, Menu };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/menu/src/menu.tsx"],"names":[],"mappings":";;;;AAAA,SAAS,aAAT,QAA8B,0BAA9B;AACA,SACE,gBADF,EAIE,mBAJF,EAKE,QALF,QAMO,mBANP;AAOA,SAAS,OAAT,QAAwB,yBAAxB;AACA,SAAS,OAAT,QAAwB,OAAxB;AA+CQ,SAAA,GAAA,QAAA,mBAAA;AAvCR,IAAM,CAAC,kBAAD,EAAqB,aAArB,IAAsC,aAAA,CAE1C;AACA,EAAA,IAAA,EAAM,mBADN;AAEA,EAAA,YAAA,EAAc;AAFd,CAF0C,CAA5C;;AAyBO,IAAM,IAAA,GAA6B,KAAD,IAAW;AAClD,QAAM;AAAE,IAAA;AAAF,MAAe,KAArB;AAEA,QAAM,MAAA,GAAS,mBAAA,CAAoB,MAApB,EAA4B,KAA5B,CAAf;AACA,QAAM,QAAA,GAAW,gBAAA,CAAiB,KAAjB,CAAjB;AACA,QAAM;AAAE,IAAA;AAAF,MAAgB,QAAA,EAAtB;AACA,QAAM;AAAE,IAAA,WAAF;AAAe,OAAG;AAAlB,MAA0B,OAAA,CAAQ,EAAE,GAAG,QAAL;AAAe,IAAA;AAAf,GAAR,CAAhC;AACA,QAAM,OAAA,GAAU,OAAA,CAAQ,MAAM,GAAd,EAAmB,CAAC,GAAD,CAAnB,CAAhB;AAEA,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA,OAAV;AAAmB,IAAA;AAAnB,MAAmC,OAAzC;AAEA,SACE,eAAA,GAAA,CAAC,uBAAD,EAAC;AAAwB,IAAA,KAAA,EAAO,WAA/B;AACC,IAAA,QAAA,EAAA,eAAA,GAAA,CAAC,YAAD,EAAC;AAAa,MAAA,KAAA,EAAO,OAApB;AACC,MAAA,QAAA,EAAA,eAAA,GAAA,CAAC,kBAAD,EAAC;AAAmB,QAAA,KAAA,EAAO,MAA1B;AACE,QAAA,QAAA,EAAA,OAAA,CAAQ,QAAR,EAAkB;AAAE,UAAA,MAAF;AAAU,UAAA,OAAV;AAAmB,UAAA;AAAnB,SAAlB;AADF,OAAD;AADD,KAAD;AADD,GAAD,CADF;AASF,CApBO;;AAsBP,IAAA,CAAK,WAAL,GAAmB,MAAnB","sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport {\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport {\n  MenuDescendantsProvider,\n  MenuProvider,\n  useMenu,\n  UseMenuProps,\n} from \"./use-menu\"\n\nconst [MenuStylesProvider, useMenuStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `MenuStylesContext`,\n  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\" `,\n})\n\nexport { useMenuStyles }\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode)\n\nexport interface MenuProps extends UseMenuProps, ThemingProps<\"Menu\"> {\n  children: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Menu provides context, state, and focus management\n * to its sub-components. It doesn't render any DOM node.\n *\n * @see Docs https://chakra-ui.com/docs/components/menu\n */\nexport const Menu: React.FC<MenuProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig(\"Menu\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  const { descendants, ...ctx } = useMenu({ ...ownProps, direction })\n  const context = useMemo(() => ctx, [ctx])\n\n  const { isOpen, onClose, forceUpdate } = context\n\n  return (\n    <MenuDescendantsProvider value={descendants}>\n      <MenuProvider value={context}>\n        <MenuStylesProvider value={styles}>\n          {runIfFn(children, { isOpen, onClose, forceUpdate })}\n        </MenuStylesProvider>\n      </MenuProvider>\n    </MenuDescendantsProvider>\n  )\n}\n\nMenu.displayName = \"Menu\"\n"]},"metadata":{},"sourceType":"module"}