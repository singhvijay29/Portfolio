{"ast":null,"code":"import { fromEntries } from \"./chunk-YTQ3XZ3T.mjs\";\nimport { getLastItem } from \"./chunk-YTAYUX3P.mjs\";\nimport { isNumber, isObject } from \"./chunk-Y5FGD7DM.mjs\"; // src/breakpoint.ts\n\nfunction analyzeCSSValue(value) {\n  const num = parseFloat(value.toString());\n  const unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n}\n\nfunction px(value) {\n  if (value == null) return value;\n  const {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || isNumber(value) ? `${value}px` : value;\n}\n\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\n\nvar sortBps = breakpoints => fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\n\nfunction normalize(breakpoints) {\n  const sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\n\nfunction keys(breakpoints) {\n  const value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\n\nfunction subtract(value) {\n  var _a;\n\n  if (!value) return value;\n  value = (_a = px(value)) != null ? _a : value;\n  const factor = value.endsWith(\"px\") ? -0.02 : -0.01;\n  return isNumber(value) ? `${value + factor}` : value.replace(/(\\d+\\.?\\d*)/u, m => `${parseFloat(m) + factor}`);\n}\n\nfunction toMediaQueryString(min, max) {\n  const query = [\"@media screen\"];\n  if (min) query.push(\"and\", `(min-width: ${px(min)})`);\n  if (max) query.push(\"and\", `(max-width: ${px(max)})`);\n  return query.join(\" \");\n}\n\nfunction analyzeBreakpoints(breakpoints) {\n  var _a;\n\n  if (!breakpoints) return null;\n  breakpoints.base = (_a = breakpoints.base) != null ? _a : \"0px\";\n  const normalized = normalize(breakpoints);\n  const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map((_ref, index, entry) => {\n    let [breakpoint, minW] = _ref;\n\n    var _a2;\n\n    let [, maxW] = (_a2 = entry[index + 1]) != null ? _a2 : [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n\n  const _keys = keys(breakpoints);\n\n  const _keysArr = Array.from(_keys.values());\n\n  return {\n    keys: _keys,\n    normalized,\n\n    isResponsive(test) {\n      const keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every(key => _keys.has(key));\n    },\n\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [null, ...normalized.map(minW => toMediaQueryString(minW)).slice(1)],\n\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n\n      const result = _keysArr.map(bp => {\n        var _a2;\n\n        return (_a2 = test[bp]) != null ? _a2 : null;\n      });\n\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n\n      return result;\n    },\n\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n\n  };\n}\n\nexport { px, toMediaQueryString, analyzeBreakpoints };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs"],"names":["fromEntries","getLastItem","isNumber","isObject","analyzeCSSValue","value","num","parseFloat","toString","unit","replace","String","unitless","px","sortByBreakpointValue","a","b","parseInt","sortBps","breakpoints","Object","entries","sort","normalize","sorted","assign","values","keys","Set","subtract","_a","factor","endsWith","m","toMediaQueryString","min","max","query","push","join","analyzeBreakpoints","base","normalized","queries","map","index","entry","breakpoint","minW","_a2","maxW","_minW","maxWQuery","minWQuery","minMaxQuery","_keys","_keysArr","Array","from","isResponsive","test","keys2","length","every","key","has","asObject","asArray","details","media","slice","toArrayValue","Error","result","bp","pop","toObjectValue","isArray","reduce","acc"],"mappings":"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","sourcesContent":["import {\n  fromEntries\n} from \"./chunk-YTQ3XZ3T.mjs\";\nimport {\n  getLastItem\n} from \"./chunk-YTAYUX3P.mjs\";\nimport {\n  isNumber,\n  isObject\n} from \"./chunk-Y5FGD7DM.mjs\";\n\n// src/breakpoint.ts\nfunction analyzeCSSValue(value) {\n  const num = parseFloat(value.toString());\n  const unit = value.toString().replace(String(num), \"\");\n  return { unitless: !unit, value: num, unit };\n}\nfunction px(value) {\n  if (value == null)\n    return value;\n  const { unitless } = analyzeCSSValue(value);\n  return unitless || isNumber(value) ? `${value}px` : value;\n}\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nvar sortBps = (breakpoints) => fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\nfunction normalize(breakpoints) {\n  const sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints) {\n  const value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\nfunction subtract(value) {\n  var _a;\n  if (!value)\n    return value;\n  value = (_a = px(value)) != null ? _a : value;\n  const factor = value.endsWith(\"px\") ? -0.02 : -0.01;\n  return isNumber(value) ? `${value + factor}` : value.replace(/(\\d+\\.?\\d*)/u, (m) => `${parseFloat(m) + factor}`);\n}\nfunction toMediaQueryString(min, max) {\n  const query = [\"@media screen\"];\n  if (min)\n    query.push(\"and\", `(min-width: ${px(min)})`);\n  if (max)\n    query.push(\"and\", `(max-width: ${px(max)})`);\n  return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints) {\n  var _a;\n  if (!breakpoints)\n    return null;\n  breakpoints.base = (_a = breakpoints.base) != null ? _a : \"0px\";\n  const normalized = normalize(breakpoints);\n  const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {\n    var _a2;\n    let [, maxW] = (_a2 = entry[index + 1]) != null ? _a2 : [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n  const _keys = keys(breakpoints);\n  const _keysArr = Array.from(_keys.values());\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test) {\n      const keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every((key) => _keys.has(key));\n    },\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [\n      null,\n      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)\n    ],\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n      const result = _keysArr.map((bp) => {\n        var _a2;\n        return (_a2 = test[bp]) != null ? _a2 : null;\n      });\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n      return result;\n    },\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index];\n        if (key != null && value != null)\n          acc[key] = value;\n        return acc;\n      }, {});\n    }\n  };\n}\n\nexport {\n  px,\n  toMediaQueryString,\n  analyzeBreakpoints\n};\n"]},"metadata":{},"sourceType":"module"}