{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useEffect } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\n\nfunction useEventListener(target, event, handler, options) {\n  const listener = useCallbackRef(handler);\n  useEffect(() => {\n    const node = typeof target === \"function\" ? target() : target != null ? target : document;\n    if (!handler || !node) return;\n    node.addEventListener(event, listener, options);\n    return () => {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, target, options, listener, handler]);\n  return () => {\n    const node = typeof target === \"function\" ? target() : target != null ? target : document;\n    node == null ? void 0 : node.removeEventListener(event, listener, options);\n  };\n}\n\nexport { useEventListener };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-use-event-listener/src/index.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,QAA0B,OAA1B;AACA,SAAS,cAAT,QAA+B,mCAA/B;;AAuBO,SAAS,gBAAT,CACL,MADK,EAEL,KAFK,EAGL,OAHK,EAIL,OAJK,EAKL;AACA,QAAM,QAAA,GAAW,cAAA,CAAe,OAAf,CAAjB;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,UAAM,IAAA,GAAO,OAAO,MAAP,KAAkB,UAAlB,GAA+B,MAAA,EAA/B,GAA0C,MAAA,IAAA,IAAA,GAAA,MAAA,GAAU,QAAjE;AAEA,QAAI,CAAC,OAAD,IAAY,CAAC,IAAjB,EAAuB;AAEvB,IAAA,IAAA,CAAK,gBAAL,CAAsB,KAAtB,EAA6B,QAA7B,EAAuC,OAAvC;AACA,WAAO,MAAM;AACX,MAAA,IAAA,CAAK,mBAAL,CAAyB,KAAzB,EAAgC,QAAhC,EAA0C,OAA1C;AACF,KAFA;AAGF,GATA,EASG,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,OAAnC,CATH,CAAA;AAWA,SAAO,MAAM;AACX,UAAM,IAAA,GAAO,OAAO,MAAP,KAAkB,UAAlB,GAA+B,MAAA,EAA/B,GAA0C,MAAA,IAAA,IAAA,GAAA,MAAA,GAAU,QAAjE;AACA,IAAA,IAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAM,mBAAN,CAA0B,KAA1B,EAAiC,QAAjC,EAA2C,OAA3C,CAAA;AACF,GAHA;AAIF","sourcesContent":["import { useEffect } from \"react\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\n\ntype Target = EventTarget | null | (() => EventTarget | null)\ntype Options = boolean | AddEventListenerOptions\n\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  target: Target,\n  event: K,\n  handler?: (event: DocumentEventMap[K]) => void,\n  options?: Options,\n): VoidFunction\nexport function useEventListener<K extends keyof WindowEventMap>(\n  target: Target,\n  event: K,\n  handler?: (event: WindowEventMap[K]) => void,\n  options?: Options,\n): VoidFunction\nexport function useEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  target: Target,\n  event: K,\n  handler?: (event: GlobalEventHandlersEventMap[K]) => void,\n  options?: Options,\n): VoidFunction\nexport function useEventListener(\n  target: Target,\n  event: string,\n  handler: ((event: Event) => void) | undefined,\n  options?: Options,\n) {\n  const listener = useCallbackRef(handler)\n\n  useEffect(() => {\n    const node = typeof target === \"function\" ? target() : target ?? document\n\n    if (!handler || !node) return\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, target, options, listener, handler])\n\n  return () => {\n    const node = typeof target === \"function\" ? target() : target ?? document\n    node?.removeEventListener(event, listener, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}