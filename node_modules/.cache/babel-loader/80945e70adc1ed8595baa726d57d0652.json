{"ast":null,"code":"const notify = node => !node.isLayoutDirty && node.willUpdate(false);\n\nfunction nodeGroup() {\n  const nodes = new Set();\n  const subscriptions = new WeakMap();\n\n  const dirtyAll = () => nodes.forEach(notify);\n\n  return {\n    add: node => {\n      nodes.add(node);\n      subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n    },\n    remove: node => {\n      nodes.delete(node);\n      const unsubscribe = subscriptions.get(node);\n\n      if (unsubscribe) {\n        unsubscribe();\n        subscriptions.delete(node);\n      }\n\n      dirtyAll();\n    },\n    dirty: dirtyAll\n  };\n}\n\nexport { nodeGroup };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/projection/node/group.mjs"],"names":["notify","node","isLayoutDirty","willUpdate","nodeGroup","nodes","Set","subscriptions","WeakMap","dirtyAll","forEach","add","set","addEventListener","remove","delete","unsubscribe","get","dirty"],"mappings":"AAAA,MAAMA,MAAM,GAAIC,IAAD,IAAU,CAACA,IAAI,CAACC,aAAN,IAAuBD,IAAI,CAACE,UAAL,CAAgB,KAAhB,CAAhD;;AACA,SAASC,SAAT,GAAqB;AACjB,QAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,QAAMC,aAAa,GAAG,IAAIC,OAAJ,EAAtB;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,OAAN,CAAcV,MAAd,CAAvB;;AACA,SAAO;AACHW,IAAAA,GAAG,EAAGV,IAAD,IAAU;AACXI,MAAAA,KAAK,CAACM,GAAN,CAAUV,IAAV;AACAM,MAAAA,aAAa,CAACK,GAAd,CAAkBX,IAAlB,EAAwBA,IAAI,CAACY,gBAAL,CAAsB,YAAtB,EAAoCJ,QAApC,CAAxB;AACH,KAJE;AAKHK,IAAAA,MAAM,EAAGb,IAAD,IAAU;AACdI,MAAAA,KAAK,CAACU,MAAN,CAAad,IAAb;AACA,YAAMe,WAAW,GAAGT,aAAa,CAACU,GAAd,CAAkBhB,IAAlB,CAApB;;AACA,UAAIe,WAAJ,EAAiB;AACbA,QAAAA,WAAW;AACXT,QAAAA,aAAa,CAACQ,MAAd,CAAqBd,IAArB;AACH;;AACDQ,MAAAA,QAAQ;AACX,KAbE;AAcHS,IAAAA,KAAK,EAAET;AAdJ,GAAP;AAgBH;;AAED,SAASL,SAAT","sourcesContent":["const notify = (node) => !node.isLayoutDirty && node.willUpdate(false);\nfunction nodeGroup() {\n    const nodes = new Set();\n    const subscriptions = new WeakMap();\n    const dirtyAll = () => nodes.forEach(notify);\n    return {\n        add: (node) => {\n            nodes.add(node);\n            subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n        },\n        remove: (node) => {\n            nodes.delete(node);\n            const unsubscribe = subscriptions.get(node);\n            if (unsubscribe) {\n                unsubscribe();\n                subscriptions.delete(node);\n            }\n            dirtyAll();\n        },\n        dirty: dirtyAll,\n    };\n}\n\nexport { nodeGroup };\n"]},"metadata":{},"sourceType":"module"}