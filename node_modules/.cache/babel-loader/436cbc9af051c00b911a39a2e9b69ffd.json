{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useEffect, useState } from \"react\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\";\n\nfunction useAnimationState(props) {\n  const {\n    isOpen,\n    ref\n  } = props;\n  const [mounted, setMounted] = useState(isOpen);\n  const [once, setOnce] = useState(false);\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(() => ref.current, \"animationend\", () => {\n    setMounted(isOpen);\n  });\n  const hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n\n    onComplete() {\n      var _a;\n\n      const win = getOwnerWindow(ref.current);\n      const evt = new win.CustomEvent(\"animationend\", {\n        bubbles: true\n      });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n\n  };\n}\n\nexport { useAnimationState };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-use-animation-state/src/index.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,gBAAT,QAAiC,qCAAjC;AACA,SAAS,cAAT,QAA+B,sBAA/B;;AAMO,SAAS,iBAAT,CAA2B,KAA3B,EAA0D;AAC/D,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,MAAkB,KAAxB;AAEA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAA,CAAS,MAAT,CAA9B;AACA,QAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,QAAA,CAAS,KAAT,CAAxB;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,QAAI,CAAC,IAAL,EAAW;AACT,MAAA,UAAA,CAAW,MAAX,CAAA;AACA,MAAA,OAAA,CAAQ,IAAR,CAAA;AACF;AACF,GALA,EAKG,CAAC,MAAD,EAAS,IAAT,EAAe,OAAf,CALH,CAAA;AAOA,EAAA,gBAAA,CACE,MAAM,GAAA,CAAI,OADZ,EAEE,cAFF,EAGE,MAAM;AACJ,IAAA,UAAA,CAAW,MAAX,CAAA;AACF,GALF,CAAA;AAQA,QAAM,MAAA,GAAS,MAAA,GAAS,KAAT,GAAiB,CAAC,OAAjC;AAEA,SAAO;AACL,IAAA,OAAA,EAAS,CAAC,MADL;;AAEL,IAAA,UAAA,GAAa;AAjCjB,UAAA,EAAA;;AAkCM,YAAM,GAAA,GAAM,cAAA,CAAe,GAAA,CAAI,OAAnB,CAAZ;AACA,YAAM,GAAA,GAAM,IAAI,GAAA,CAAI,WAAR,CAAoB,cAApB,EAAoC;AAAE,QAAA,OAAA,EAAS;AAAX,OAApC,CAAZ;AACA,OAAA,EAAA,GAAA,GAAA,CAAI,OAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAa,aAAb,CAA2B,GAA3B,CAAA;AACF;;AANK,GAAP;AAQF","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\"\nexport type UseAnimationStateProps = {\n  isOpen: boolean\n  ref: React.RefObject<HTMLElement>\n}\n\nexport function useAnimationState(props: UseAnimationStateProps) {\n  const { isOpen, ref } = props\n\n  const [mounted, setMounted] = useState(isOpen)\n  const [once, setOnce] = useState(false)\n\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen)\n      setOnce(true)\n    }\n  }, [isOpen, once, mounted])\n\n  useEventListener(\n    () => ref.current,\n    \"animationend\",\n    () => {\n      setMounted(isOpen)\n    },\n  )\n\n  const hidden = isOpen ? false : !mounted\n\n  return {\n    present: !hidden,\n    onComplete() {\n      const win = getOwnerWindow(ref.current)\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true })\n      ref.current?.dispatchEvent(evt)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}