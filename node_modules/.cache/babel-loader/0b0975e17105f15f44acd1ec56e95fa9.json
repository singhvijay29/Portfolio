{"ast":null,"code":"import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n  for (const key in source) {\n    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nfunction useInitialMotionValues(_ref, visualState, isStatic) {\n  let {\n    transformTemplate\n  } = _ref;\n  return useMemo(() => {\n    const state = createHtmlRenderState();\n    buildHTMLStyles(state, visualState, {\n      enableHardwareAcceleration: !isStatic\n    }, transformTemplate);\n    return Object.assign({}, state.vars, state.style);\n  }, [visualState]);\n}\n\nfunction useStyle(props, visualState, isStatic) {\n  const styleProp = props.style || {};\n  const style = {};\n  /**\n   * Copy non-Motion Values straight into style\n   */\n\n  copyRawValuesOnly(style, styleProp, props);\n  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n  return style;\n}\n\nfunction useHTMLProps(props, visualState, isStatic) {\n  // The `any` isn't ideal but it is the type of createElement props argument\n  const htmlProps = {};\n  const style = useStyle(props, visualState, isStatic);\n\n  if (props.drag && props.dragListener !== false) {\n    // Disable the ghost element when a user drags\n    htmlProps.draggable = false; // Disable text selection\n\n    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\"; // Disable scrolling on the draggable direction\n\n    style.touchAction = props.drag === true ? \"none\" : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n  }\n\n  if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) {\n    htmlProps.tabIndex = 0;\n  }\n\n  htmlProps.style = style;\n  return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/html/use-props.mjs"],"names":["useMemo","isForcedMotionValue","isMotionValue","buildHTMLStyles","createHtmlRenderState","copyRawValuesOnly","target","source","props","key","useInitialMotionValues","visualState","isStatic","transformTemplate","state","enableHardwareAcceleration","Object","assign","vars","style","useStyle","styleProp","useHTMLProps","htmlProps","drag","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","undefined","onTap","onTapStart","whileTap"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,+CAApC;AACA,SAASC,aAAT,QAA8B,uCAA9B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,qBAAT,QAAsC,iCAAtC;;AAEA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,KAA3C,EAAkD;AAC9C,OAAK,MAAMC,GAAX,IAAkBF,MAAlB,EAA0B;AACtB,QAAI,CAACL,aAAa,CAACK,MAAM,CAACE,GAAD,CAAP,CAAd,IAA+B,CAACR,mBAAmB,CAACQ,GAAD,EAAMD,KAAN,CAAvD,EAAqE;AACjEF,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAcF,MAAM,CAACE,GAAD,CAApB;AACH;AACJ;AACJ;;AACD,SAASC,sBAAT,OAAuDC,WAAvD,EAAoEC,QAApE,EAA8E;AAAA,MAA9C;AAAEC,IAAAA;AAAF,GAA8C;AAC1E,SAAOb,OAAO,CAAC,MAAM;AACjB,UAAMc,KAAK,GAAGV,qBAAqB,EAAnC;AACAD,IAAAA,eAAe,CAACW,KAAD,EAAQH,WAAR,EAAqB;AAAEI,MAAAA,0BAA0B,EAAE,CAACH;AAA/B,KAArB,EAAgEC,iBAAhE,CAAf;AACA,WAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAK,CAACI,IAAxB,EAA8BJ,KAAK,CAACK,KAApC,CAAP;AACH,GAJa,EAIX,CAACR,WAAD,CAJW,CAAd;AAKH;;AACD,SAASS,QAAT,CAAkBZ,KAAlB,EAAyBG,WAAzB,EAAsCC,QAAtC,EAAgD;AAC5C,QAAMS,SAAS,GAAGb,KAAK,CAACW,KAAN,IAAe,EAAjC;AACA,QAAMA,KAAK,GAAG,EAAd;AACA;AACJ;AACA;;AACId,EAAAA,iBAAiB,CAACc,KAAD,EAAQE,SAAR,EAAmBb,KAAnB,CAAjB;AACAQ,EAAAA,MAAM,CAACC,MAAP,CAAcE,KAAd,EAAqBT,sBAAsB,CAACF,KAAD,EAAQG,WAAR,EAAqBC,QAArB,CAA3C;AACA,SAAOO,KAAP;AACH;;AACD,SAASG,YAAT,CAAsBd,KAAtB,EAA6BG,WAA7B,EAA0CC,QAA1C,EAAoD;AAChD;AACA,QAAMW,SAAS,GAAG,EAAlB;AACA,QAAMJ,KAAK,GAAGC,QAAQ,CAACZ,KAAD,EAAQG,WAAR,EAAqBC,QAArB,CAAtB;;AACA,MAAIJ,KAAK,CAACgB,IAAN,IAAchB,KAAK,CAACiB,YAAN,KAAuB,KAAzC,EAAgD;AAC5C;AACAF,IAAAA,SAAS,CAACG,SAAV,GAAsB,KAAtB,CAF4C,CAG5C;;AACAP,IAAAA,KAAK,CAACQ,UAAN,GACIR,KAAK,CAACS,gBAAN,GACIT,KAAK,CAACU,kBAAN,GACI,MAHZ,CAJ4C,CAQ5C;;AACAV,IAAAA,KAAK,CAACW,WAAN,GACItB,KAAK,CAACgB,IAAN,KAAe,IAAf,GACM,MADN,GAEO,OAAMhB,KAAK,CAACgB,IAAN,KAAe,GAAf,GAAqB,GAArB,GAA2B,GAAI,EAHhD;AAIH;;AACD,MAAIhB,KAAK,CAACuB,QAAN,KAAmBC,SAAnB,KACCxB,KAAK,CAACyB,KAAN,IAAezB,KAAK,CAAC0B,UAArB,IAAmC1B,KAAK,CAAC2B,QAD1C,CAAJ,EACyD;AACrDZ,IAAAA,SAAS,CAACQ,QAAV,GAAqB,CAArB;AACH;;AACDR,EAAAA,SAAS,CAACJ,KAAV,GAAkBA,KAAlB;AACA,SAAOI,SAAP;AACH;;AAED,SAASlB,iBAAT,EAA4BiB,YAA5B","sourcesContent":["import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n"]},"metadata":{},"sourceType":"module"}