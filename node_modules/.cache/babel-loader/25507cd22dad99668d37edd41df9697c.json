{"ast":null,"code":"'use client'; // src/switch.tsx\n\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  const styles = useMultiStyleConfig(\"Switch\", props);\n  const {\n    spacing = \"0.5rem\",\n    children,\n    ...ownProps\n  } = omitThemingProps(props);\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  const containerStyles = useMemo(() => ({\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    lineHeight: 0,\n    ...styles.container\n  }), [styles.container]);\n  const trackStyles = useMemo(() => ({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\",\n    ...styles.track\n  }), [styles.track]);\n  const labelStyles = useMemo(() => ({\n    userSelect: \"none\",\n    marginStart: spacing,\n    ...styles.label\n  }), [spacing, styles.label]);\n  return /* @__PURE__ */jsxs(chakra.label, { ...getRootProps(),\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles,\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-switch__input\",\n      ...getInputProps({}, ref)\n    }), /* @__PURE__ */jsx(chakra.span, { ...getCheckboxProps(),\n      className: \"chakra-switch__track\",\n      __css: trackStyles,\n      children: /* @__PURE__ */jsx(chakra.span, {\n        __css: styles.thumb,\n        className: \"chakra-switch__thumb\",\n        ...getIndicatorProps()\n      })\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-switch__label\",\n      ...getLabelProps(),\n      __css: labelStyles,\n      children\n    })]\n  });\n});\nSwitch.displayName = \"Switch\";\nexport { Switch };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/switch/src/switch.tsx"],"names":["Switch"],"mappings":";;AAAA,SAAS,WAAT,QAA8C,qBAA9C;AACA,SAAS,EAAT,QAAmB,yBAAnB;AACA,SACE,MADF,EAEE,UAFF,EAIE,gBAJF,EAQE,mBARF,QASO,mBATP;AAUA,SAAS,OAAT,QAAwB,OAAxB;AAqEI,SAKE,GALF,EAAA,IAAA,QAAA,mBAAA;AAjDG,IAAM,MAAA,GAAS,UAAA,CAAiC,SAASA,OAAT,CACrD,KADqD,EAErD,GAFqD,EAGrD;AACA,QAAM,MAAA,GAAS,mBAAA,CAAoB,QAApB,EAA8B,KAA9B,CAAf;AAEA,QAAM;AAAE,IAAA,OAAA,GAAU,QAAZ;AAAsB,IAAA,QAAtB;AAAgC,OAAG;AAAnC,MAAgD,gBAAA,CAAiB,KAAjB,CAAtD;AAEA,QAAM;AACJ,IAAA,iBADI;AAEJ,IAAA,aAFI;AAGJ,IAAA,gBAHI;AAIJ,IAAA,YAJI;AAKJ,IAAA;AALI,MAMF,WAAA,CAAY,QAAZ,CANJ;AAQA,QAAM,eAAA,GAAqC,OAAA,CACzC,OAAO;AACL,IAAA,OAAA,EAAS,cADJ;AAEL,IAAA,QAAA,EAAU,UAFL;AAGL,IAAA,aAAA,EAAe,QAHV;AAIL,IAAA,UAAA,EAAY,CAJP;AAKL,OAAG,MAAA,CAAO;AALL,GAAP,CADyC,EAQzC,CAAC,MAAA,CAAO,SAAR,CARyC,CAA3C;AAWA,QAAM,WAAA,GAAiC,OAAA,CACrC,OAAO;AACL,IAAA,OAAA,EAAS,aADJ;AAEL,IAAA,UAAA,EAAY,CAFP;AAGL,IAAA,cAAA,EAAgB,YAHX;AAIL,IAAA,SAAA,EAAW,aAJN;AAKL,IAAA,MAAA,EAAQ,SALH;AAML,OAAG,MAAA,CAAO;AANL,GAAP,CADqC,EASrC,CAAC,MAAA,CAAO,KAAR,CATqC,CAAvC;AAYA,QAAM,WAAA,GAAiC,OAAA,CACrC,OAAO;AACL,IAAA,UAAA,EAAY,MADP;AAEL,IAAA,WAAA,EAAa,OAFR;AAGL,OAAG,MAAA,CAAO;AAHL,GAAP,CADqC,EAMrC,CAAC,OAAD,EAAU,MAAA,CAAO,KAAjB,CANqC,CAAvC;AASA,SACE,eAAA,IAAA,CAAC,MAAA,CAAO,KAAR,EAAC,EACE,GAAG,YAAA,EADL;AAEC,IAAA,SAAA,EAAW,EAAA,CAAG,eAAH,EAAoB,KAAA,CAAM,SAA1B,CAFZ;AAGC,IAAA,KAAA,EAAO,eAHR;AAKC,IAAA,QAAA,EAAA,CAAA,eAAA,GAAA,CAAC,OAAD,EAAC;AAAM,MAAA,SAAA,EAAU,sBAAhB;AAAwC,SAAG,aAAA,CAAc,EAAd,EAAkB,GAAlB;AAA3C,KAAD,CAAA,EACA,eAAA,GAAA,CAAC,MAAA,CAAO,IAAR,EAAC,EACE,GAAG,gBAAA,EADL;AAEC,MAAA,SAAA,EAAU,sBAFX;AAGC,MAAA,KAAA,EAAO,WAHR;AAKC,MAAA,QAAA,EAAA,eAAA,GAAA,CAAC,MAAA,CAAO,IAAR,EAAC;AACC,QAAA,KAAA,EAAO,MAAA,CAAO,KADf;AAEC,QAAA,SAAA,EAAU,sBAFX;AAGE,WAAG,iBAAA;AAHL,OAAD;AALD,KAAD,CADA,EAYC,QAAA,IACC,eAAA,GAAA,CAAC,MAAA,CAAO,IAAR,EAAC;AACC,MAAA,SAAA,EAAU,sBADX;AAEE,SAAG,aAAA,EAFL;AAGC,MAAA,KAAA,EAAO,WAHR;AAKE,MAAA;AALF,KAAD,CAbF;AALD,GAAD,CADF;AA6BD,CA7EqB,CAAf;AA+EP,MAAA,CAAO,WAAP,GAAqB,QAArB","sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, keyof UseCheckboxProps>,\n    ThemingProps<\"Switch\"> {\n  /**\n   * The spacing between the switch and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\n/**\n * The `Switch` component is used as an alternative for the checkbox component for switching between \"enabled\" and \"disabled\" states.\n *\n * @see Docs https://chakra-ui.com/docs/components/switch\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/switch/\n */\nexport const Switch = forwardRef<SwitchProps, \"input\">(function Switch(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props)\n\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps,\n  } = useCheckbox(ownProps)\n\n  const containerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0,\n      ...styles.container,\n    }),\n    [styles.container],\n  )\n\n  const trackStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track,\n    }),\n    [styles.track],\n  )\n\n  const labelStyles: SystemStyleObject = useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label,\n    }),\n    [spacing, styles.label],\n  )\n\n  return (\n    <chakra.label\n      {...getRootProps()}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={containerStyles}\n    >\n      <input className=\"chakra-switch__input\" {...getInputProps({}, ref)} />\n      <chakra.span\n        {...getCheckboxProps()}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          {...getIndicatorProps()}\n        />\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-switch__label\"\n          {...getLabelProps()}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nSwitch.displayName = \"Switch\"\n"]},"metadata":{},"sourceType":"module"}