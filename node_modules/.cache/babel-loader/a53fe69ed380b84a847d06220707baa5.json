{"ast":null,"code":"'use client';\n\nimport { Button } from \"./chunk-UVUR7MCU.mjs\"; // src/icon-button.tsx\n\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar IconButton = forwardRef((props, ref) => {\n  const {\n    icon,\n    children,\n    isRound,\n    \"aria-label\": ariaLabel,\n    ...rest\n  } = props;\n  const element = icon || children;\n\n  const _children = isValidElement(element) ? cloneElement(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n\n  return /* @__PURE__ */jsx(Button, {\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : void 0,\n    ref,\n    \"aria-label\": ariaLabel,\n    ...rest,\n    children: _children\n  });\n});\nIconButton.displayName = \"IconButton\";\nexport { IconButton };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/button/src/icon-button.tsx"],"names":[],"mappings":";;;;AAAA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,YAAT,EAAuB,cAAvB,QAA6C,OAA7C;AAmDM,SAAA,GAAA,QAAA,mBAAA;AAhBC,IAAM,UAAA,GAAa,UAAA,CACxB,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACd,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA,QAAR;AAAkB,IAAA,OAAlB;AAA2B,kBAAc,SAAzC;AAAoD,OAAG;AAAvD,MAAgE,KAAtE;AAKA,QAAM,OAAA,GAAU,IAAA,IAAQ,QAAxB;;AACA,QAAM,SAAA,GAAY,cAAA,CAAe,OAAf,CAAA,GACd,YAAA,CAAa,OAAb,EAA6B;AAC3B,mBAAe,IADY;AAE3B,IAAA,SAAA,EAAW;AAFgB,GAA7B,CADc,GAKd,IALJ;;AAOA,SACE,eAAA,GAAA,CAAC,MAAD,EAAC;AACC,IAAA,OAAA,EAAQ,GADT;AAEC,IAAA,YAAA,EAAc,OAAA,GAAU,MAAV,GAAmB,KAAA,CAFlC;AAGC,IAAA,GAHD;AAIC,kBAAY,SAJb;AAKE,OAAG,IALL;AAOE,IAAA,QAAA,EAAA;AAPF,GAAD,CADF;AAWF,CA1BwB,CAAnB;AA6BP,UAAA,CAAW,WAAX,GAAyB,YAAzB","sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n"]},"metadata":{},"sourceType":"module"}