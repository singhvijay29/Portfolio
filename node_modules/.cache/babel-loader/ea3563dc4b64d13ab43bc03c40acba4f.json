{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\n\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\n\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue);\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef(next => {\n    const setter = next;\n    const nextValue = typeof next === \"function\" ? setter(value) : next;\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\n\nexport { useControllableProp, useControllableState };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-use-controllable-state/src/index.ts"],"names":[],"mappings":";;AAAA,SAAS,OAAT,EAAkB,QAAlB,QAAkC,OAAlC;AACA,SAAS,cAAT,QAA+B,mCAA/B;;AAOO,SAAS,mBAAT,CAAgC,IAAhC,EAAqD,KAArD,EAA+D;AACpE,QAAM,UAAA,GAAa,OAAO,IAAP,KAAgB,WAAnC;AACA,QAAM,KAAA,GAAQ,UAAA,GAAa,IAAb,GAAoB,KAAlC;AACA,SAAO,OAAA,CAAsB,MAAM,CAAC,UAAD,EAAa,KAAb,CAA5B,EAAiD,CAAC,UAAD,EAAa,KAAb,CAAjD,CAAP;AACF;;AAcO,SAAS,oBAAT,CAAiC,KAAjC,EAAsE;AAC3E,QAAM;AACJ,IAAA,KAAA,EAAO,SADH;AAEJ,IAAA,YAFI;AAGJ,IAAA,QAHI;AAIJ,IAAA,YAAA,GAAe,CAAC,IAAD,EAAO,IAAP,KAAgB,IAAA,KAAS;AAJpC,MAKF,KALJ;AAOA,QAAM,YAAA,GAAe,cAAA,CAAe,QAAf,CAArB;AACA,QAAM,gBAAA,GAAmB,cAAA,CAAe,YAAf,CAAzB;AAEA,QAAM,CAAC,iBAAD,EAAoB,oBAApB,IAA4C,QAAA,CAAS,YAAT,CAAlD;AACA,QAAM,UAAA,GAAa,SAAA,KAAc,KAAA,CAAjC;AACA,QAAM,KAAA,GAAQ,UAAA,GAAa,SAAb,GAAyB,iBAAvC;AAEA,QAAM,QAAA,GAAW,cAAA,CACd,IAAD,IAAmC;AACjC,UAAM,MAAA,GAAS,IAAf;AACA,UAAM,SAAA,GAAY,OAAO,IAAP,KAAgB,UAAhB,GAA6B,MAAA,CAAO,KAAP,CAA7B,GAA6C,IAA/D;;AAEA,QAAI,CAAC,gBAAA,CAAiB,KAAjB,EAAwB,SAAxB,CAAL,EAAyC;AACvC;AACF;;AAEA,QAAI,CAAC,UAAL,EAAiB;AACf,MAAA,oBAAA,CAAqB,SAArB,CAAA;AACF;;AAEA,IAAA,YAAA,CAAa,SAAb,CAAA;AACF,GAde,EAef,CAAC,UAAD,EAAa,YAAb,EAA2B,KAA3B,EAAkC,gBAAlC,CAfe,CAAjB;AAkBA,SAAO,CAAC,KAAD,EAAQ,QAAR,CAAP;AACF","sourcesContent":["import { useMemo, useState } from \"react\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\n\n/**\n * Given a prop value and state value, the useControllableProp hook is used to determine whether a component is controlled or uncontrolled, and also returns the computed value.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollableprop\n */\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const controlled = typeof prop !== \"undefined\"\n  const value = controlled ? prop : state\n  return useMemo<[boolean, T]>(() => [controlled, value], [controlled, value])\n}\n\nexport interface UseControllableStateProps<T> {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * The `useControllableState` hook returns the state and function that updates the state, just like React.useState does.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollablestate\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue as T)\n  const controlled = valueProp !== undefined\n  const value = controlled ? valueProp : uncontrolledState\n\n  const setValue = useCallbackRef(\n    (next: React.SetStateAction<T>) => {\n      const setter = next as (prevState?: T) => T\n      const nextValue = typeof next === \"function\" ? setter(value) : next\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!controlled) {\n        setUncontrolledState(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [controlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, setValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}