{"ast":null,"code":"'use client';\n\nimport { useEventListeners } from \"./chunk-VDSXRTOE.mjs\"; // src/use-clickable.ts\n\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useState } from \"react\";\n\nfunction isValidElement(event) {\n  const element = event.target;\n  const {\n    tagName,\n    isContentEditable\n  } = element;\n  return tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true;\n}\n\nfunction useClickable() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props;\n  const [isButton, setIsButton] = useState(true);\n  const [isPressed, setIsPressed] = useState(false);\n  const listeners = useEventListeners();\n\n  const refCallback = node => {\n    if (!node) return;\n\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false);\n    }\n  };\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;\n  const trulyDisabled = isDisabled && !isFocusable;\n  const handleClick = useCallback(event => {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    const self = event.currentTarget;\n    self.focus();\n    onClick == null ? void 0 : onClick(event);\n  }, [isDisabled, onClick]);\n  const onDocumentKeyUp = useCallback(e => {\n    if (isPressed && isValidElement(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsPressed(false);\n      listeners.remove(document, \"keyup\", onDocumentKeyUp, false);\n    }\n  }, [isPressed, listeners]);\n  const handleKeyDown = useCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    if (isDisabled || event.defaultPrevented || event.metaKey) {\n      return;\n    }\n\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\";\n    const shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(true);\n    }\n\n    if (shouldClickOnEnter) {\n      event.preventDefault();\n      const self = event.currentTarget;\n      self.click();\n    }\n\n    listeners.add(document, \"keyup\", onDocumentKeyUp, false);\n  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);\n  const handleKeyUp = useCallback(event => {\n    onKeyUp == null ? void 0 : onKeyUp(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) return;\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    const shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(false);\n      const self = event.currentTarget;\n      self.click();\n    }\n  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);\n  const onDocumentMouseUp = useCallback(event => {\n    if (event.button !== 0) return;\n    setIsPressed(false);\n    listeners.remove(document, \"mouseup\", onDocumentMouseUp, false);\n  }, [listeners]);\n  const handleMouseDown = useCallback(event => {\n    if (event.button !== 0) return;\n\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    if (!isButton) {\n      setIsPressed(true);\n    }\n\n    const target = event.currentTarget;\n    target.focus({\n      preventScroll: true\n    });\n    listeners.add(document, \"mouseup\", onDocumentMouseUp, false);\n    onMouseDown == null ? void 0 : onMouseDown(event);\n  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);\n  const handleMouseUp = useCallback(event => {\n    if (event.button !== 0) return;\n\n    if (!isButton) {\n      setIsPressed(false);\n    }\n\n    onMouseUp == null ? void 0 : onMouseUp(event);\n  }, [onMouseUp, isButton]);\n  const handleMouseOver = useCallback(event => {\n    if (isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [isDisabled, onMouseOver]);\n  const handleMouseLeave = useCallback(event => {\n    if (isPressed) {\n      event.preventDefault();\n      setIsPressed(false);\n    }\n\n    onMouseLeave == null ? void 0 : onMouseLeave(event);\n  }, [isPressed, onMouseLeave]);\n  const ref = mergeRefs(htmlRef, refCallback);\n\n  if (isButton) {\n    return { ...htmlProps,\n      ref,\n      type: \"button\",\n      \"aria-disabled\": trulyDisabled ? void 0 : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave\n    };\n  }\n\n  return { ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? \"true\" : void 0,\n    tabIndex: trulyDisabled ? void 0 : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave\n  };\n}\n\nexport { useClickable };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/clickable/src/use-clickable.ts"],"names":[],"mappings":"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","sourcesContent":["import { dataAttr } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useEventListeners } from \"./use-event-listeners\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseClickableProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * If `true`, the element will be disabled.\n   * It will set the `disabled` HTML attribute\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and isDisabled, the element will\n   * have only `aria-disabled` set to `true`\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * Whether or not trigger click on pressing `Enter`.\n   *\n   * @default true\n   */\n  clickOnEnter?: boolean\n  /**\n   * Whether or not trigger click on pressing `Space`.\n   *\n   * @default true\n   */\n  clickOnSpace?: boolean\n  /**\n   * The ref for the element\n   */\n  ref?: React.Ref<HTMLElement>\n}\n\nfunction isValidElement(event: KeyboardEvent): boolean {\n  const element = event.target as HTMLElement\n  const { tagName, isContentEditable } = element\n  return (\n    tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true\n  )\n}\n\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\nexport function useClickable(props: UseClickableProps = {}) {\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props\n  /**\n   * We'll use this to track if the element is a button element\n   */\n  const [isButton, setIsButton] = useState(true)\n\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n  const [isPressed, setIsPressed] = useState(false)\n\n  const listeners = useEventListeners()\n\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n  const refCallback = (node: any) => {\n    if (!node) return\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false)\n    }\n  }\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      const self = event.currentTarget as HTMLElement\n      self.focus()\n      onClick?.(event)\n    },\n    [isDisabled, onClick],\n  )\n\n  const onDocumentKeyUp = useCallback(\n    (e: KeyboardEvent) => {\n      if (isPressed && isValidElement(e)) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        setIsPressed(false)\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        listeners.remove(document, \"keyup\", onDocumentKeyUp, false)\n      }\n    },\n    [isPressed, listeners],\n  )\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyDown?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) {\n        return\n      }\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\"\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(true)\n      }\n\n      if (shouldClickOnEnter) {\n        event.preventDefault()\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n\n      listeners.add(document, \"keyup\", onDocumentKeyUp, false)\n    },\n    [\n      isDisabled,\n      isButton,\n      onKeyDown,\n      clickOnEnter,\n      clickOnSpace,\n      listeners,\n      onDocumentKeyUp,\n    ],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyUp?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) return\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(false)\n\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [clickOnSpace, isButton, isDisabled, onKeyUp],\n  )\n\n  const onDocumentMouseUp = useCallback(\n    (event: MouseEvent) => {\n      if (event.button !== 0) return\n      setIsPressed(false)\n      listeners.remove(document, \"mouseup\", onDocumentMouseUp, false)\n    },\n    [listeners],\n  )\n\n  const handleMouseDown = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (event.button !== 0) return\n\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      if (!isButton) {\n        setIsPressed(true)\n      }\n\n      const target = event.currentTarget as HTMLElement\n      target.focus({ preventScroll: true })\n\n      listeners.add(document, \"mouseup\", onDocumentMouseUp, false)\n\n      onMouseDown?.(event)\n    },\n    [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp],\n  )\n\n  const handleMouseUp = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (event.button !== 0) return\n\n      if (!isButton) {\n        setIsPressed(false)\n      }\n\n      onMouseUp?.(event)\n    },\n    [onMouseUp, isButton],\n  )\n\n  const handleMouseOver = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      onMouseOver?.(event)\n    },\n    [isDisabled, onMouseOver],\n  )\n\n  const handleMouseLeave = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isPressed) {\n        event.preventDefault()\n        setIsPressed(false)\n      }\n      onMouseLeave?.(event)\n    },\n    [isPressed, onMouseLeave],\n  )\n\n  const ref = mergeRefs(htmlRef, refCallback)\n\n  if (isButton) {\n    return {\n      ...htmlProps,\n      ref,\n      type: \"button\" as React.ButtonHTMLAttributes<any>[\"type\"],\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave,\n    }\n  }\n\n  return {\n    ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? (\"true\" as const) : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave,\n  }\n}\n\nexport type UseClickableReturn = ReturnType<typeof useClickable>\n"]},"metadata":{},"sourceType":"module"}