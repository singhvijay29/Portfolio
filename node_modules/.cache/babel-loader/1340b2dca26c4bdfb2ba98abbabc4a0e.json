{"ast":null,"code":"// src/anatomy.ts\nfunction anatomy(name) {\n  let map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let called = false;\n\n  function assert() {\n    if (!called) {\n      called = true;\n      return;\n    }\n\n    throw new Error(\"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\");\n  }\n\n  function parts() {\n    assert();\n\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    for (const part of values) {\n      ;\n      map[part] = toPart(part);\n    }\n\n    return anatomy(name, map);\n  }\n\n  function extend() {\n    for (var _len2 = arguments.length, parts2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      parts2[_key2] = arguments[_key2];\n    }\n\n    for (const part of parts2) {\n      if (part in map) continue;\n      map[part] = toPart(part);\n    }\n\n    return anatomy(name, map);\n  }\n\n  function selectors() {\n    const value = Object.fromEntries(Object.entries(map).map(_ref => {\n      let [key, part] = _ref;\n      return [key, part.selector];\n    }));\n    return value;\n  }\n\n  function classnames() {\n    const value = Object.fromEntries(Object.entries(map).map(_ref2 => {\n      let [key, part] = _ref2;\n      return [key, part.className];\n    }));\n    return value;\n  }\n\n  function toPart(part) {\n    const el = [\"container\", \"root\"].includes(part != null ? part : \"\") ? [name] : [name, part];\n    const attr = el.filter(Boolean).join(\"__\");\n    const className = `chakra-${attr}`;\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part\n    };\n    return partObj;\n  }\n\n  const __type = {};\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n\n    get keys() {\n      return Object.keys(map);\n    },\n\n    __type\n  };\n}\n\nexport { anatomy };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/anatomy/src/anatomy.ts"],"names":["parts"],"mappings":";AAIO,SAAS,OAAT,CACL,IADK,EAGO;AAAA,MADZ,GACY,uEADN,EACM;AACZ,MAAI,MAAA,GAAS,KAAb;;AAMA,WAAS,MAAT,GAAkB;AAChB,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,MAAA,GAAS,IAAT;AACA;AACF;;AAEA,UAAM,IAAI,KAAJ,CACJ,qFADI,CAAN;AAGF;;AAKA,WAAS,KAAT,GAAiD;AAC/C,IAAA,MAAA;;AAD+C,sCAAb,MAAa;AAAb,MAAA,MAAa;AAAA;;AAE/C,SAAA,MAAW,IAAX,IAAmB,MAAnB,EAA2B;AACzB;AAAE,MAAA,GAAA,CAAY,IAAZ,CAAA,GAAoB,MAAA,CAAO,IAAP,CAApB;AACJ;;AACA,WAAO,OAAA,CAAQ,IAAR,EAAc,GAAd,CAAP;AACF;;AAKA,WAAS,MAAT,GAAiD;AAAA,uCAAZA,MAAY;AAAZA,MAAAA,MAAY;AAAA;;AAC/C,SAAA,MAAW,IAAX,IAAmBA,MAAnB,EAA0B;AACxB,UAAI,IAAA,IAAQ,GAAZ,EAAiB;AACf,MAAA,GAAA,CAAY,IAAZ,CAAA,GAAoB,MAAA,CAAO,IAAP,CAApB;AACJ;;AACA,WAAO,OAAA,CAAQ,IAAR,EAAc,GAAd,CAAP;AACF;;AAKA,WAAS,SAAT,GAAqB;AACnB,UAAM,KAAA,GAAQ,MAAA,CAAO,WAAP,CACZ,MAAA,CAAO,OAAP,CAAe,GAAf,EAAoB,GAApB,CAAwB;AAAA,UAAC,CAAC,GAAD,EAAM,IAAN,CAAD;AAAA,aAAiB,CAAC,GAAD,EAAO,IAAA,CAAa,QAApB,CAAjB;AAAA,KAAxB,CADY,CAAd;AAGA,WAAO,KAAP;AACF;;AAKA,WAAS,UAAT,GAAsB;AACpB,UAAM,KAAA,GAAQ,MAAA,CAAO,WAAP,CACZ,MAAA,CAAO,OAAP,CAAe,GAAf,EAAoB,GAApB,CAAwB;AAAA,UAAC,CAAC,GAAD,EAAM,IAAN,CAAD;AAAA,aAAiB,CAAC,GAAD,EAAO,IAAA,CAAa,SAApB,CAAjB;AAAA,KAAxB,CADY,CAAd;AAGA,WAAO,KAAP;AACF;;AAKA,WAAS,MAAT,CAAgB,IAAhB,EAA8B;AAC5B,UAAM,EAAA,GAAK,CAAC,WAAD,EAAc,MAAd,EAAsB,QAAtB,CAA+B,IAAA,IAAA,IAAA,GAAA,IAAA,GAAQ,EAAvC,IACP,CAAC,IAAD,CADO,GAEP,CAAC,IAAD,EAAO,IAAP,CAFJ;AAGA,UAAM,IAAA,GAAO,EAAA,CAAG,MAAH,CAAU,OAAV,EAAmB,IAAnB,CAAwB,IAAxB,CAAb;AACA,UAAM,SAAA,GAAY,UAAU,IAAI,EAAhC;AAEA,UAAM,OAAA,GAAU;AACd,MAAA,SADc;AAEd,MAAA,QAAA,EAAU,IAAI,SAAS,EAFT;AAGd,MAAA,QAAA,EAAU,MAAM;AAHF,KAAhB;AAMA,WAAO,OAAP;AACF;;AAKA,QAAM,MAAA,GAAS,EAAf;AAEA,SAAO;AACL,IAAA,KADK;AAEL,IAAA,MAFK;AAGL,IAAA,MAHK;AAIL,IAAA,SAJK;AAKL,IAAA,UALK;;AAML,QAAI,IAAJ,GAAgB;AACd,aAAO,MAAA,CAAO,IAAP,CAAY,GAAZ,CAAP;AACF,KARK;;AASL,IAAA;AATK,GAAP;AAWF","sourcesContent":["/**\n * Used to define the anatomy/parts of a component in a way that provides\n * a consistent API for `className`, css selector and `theming`.\n */\nexport function anatomy<T extends string = string>(\n  name: string,\n  map = {} as Record<T, Part>,\n): Anatomy<T> {\n  let called = false\n\n  /**\n   * Prevents user from calling `.parts` multiple times.\n   * It should only be called once.\n   */\n  function assert() {\n    if (!called) {\n      called = true\n      return\n    }\n\n    throw new Error(\n      \"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\",\n    )\n  }\n\n  /**\n   * Add the core parts of the components\n   */\n  function parts<V extends string>(...values: V[]) {\n    assert()\n    for (const part of values) {\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<V>, \"parts\">\n  }\n\n  /**\n   * Extend the component anatomy to includes new parts\n   */\n  function extend<U extends string>(...parts: U[]) {\n    for (const part of parts) {\n      if (part in map) continue\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<T | U>, \"parts\">\n  }\n\n  /**\n   * Get all selectors for the component anatomy\n   */\n  function selectors() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).selector]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Get all classNames for the component anatomy\n   */\n  function classnames() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).className]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Creates the part object for the given part\n   */\n  function toPart(part: string) {\n    const el = [\"container\", \"root\"].includes(part ?? \"\")\n      ? [name]\n      : [name, part]\n    const attr = el.filter(Boolean).join(\"__\")\n    const className = `chakra-${attr}`\n\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part,\n    }\n\n    return partObj as typeof partObj & string\n  }\n\n  /**\n   * Used to get the derived type of the anatomy\n   */\n  const __type = {} as T\n\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n    get keys(): T[] {\n      return Object.keys(map) as T[]\n    },\n    __type,\n  }\n}\n\ntype Part = {\n  className: string\n  selector: string\n  toString: () => string\n}\n\ntype Anatomy<T extends string> = {\n  parts: <V extends string>(...values: V[]) => Omit<Anatomy<V>, \"parts\">\n  toPart: (part: string) => Part\n  extend: <U extends string>(...parts: U[]) => Omit<Anatomy<T | U>, \"parts\">\n  selectors: () => Record<T, string>\n  classnames: () => Record<T, string>\n  keys: T[]\n  __type: T\n}\n"]},"metadata":{},"sourceType":"module"}