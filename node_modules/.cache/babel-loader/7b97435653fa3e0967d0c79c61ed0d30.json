{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\n\nfunction isRefObject(val) {\n  return \"current\" in val;\n}\n\nvar isDom = () => typeof window !== \"undefined\";\n\nfunction getPlatform() {\n  var _a;\n\n  const agent = navigator.userAgentData;\n  return (_a = agent == null ? void 0 : agent.platform) != null ? _a : navigator.platform;\n}\n\nvar vn = v => isDom() && v.test(navigator.vendor);\n\nvar pt = v => isDom() && v.test(getPlatform());\n\nvar isApple = () => pt(/mac|iphone|ipad|ipod/i);\n\nvar isSafari = () => isApple() && vn(/apple/i);\n\nfunction useFocusOnPointerDown(props) {\n  const {\n    ref,\n    elements,\n    enabled\n  } = props;\n\n  const doc = () => {\n    var _a, _b;\n\n    return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n  };\n\n  useEventListener(doc, \"pointerdown\", event => {\n    if (!isSafari() || !enabled) return;\n    const target = event.target;\n    const els = elements != null ? elements : [ref];\n    const isValidTarget = els.some(elementOrRef => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return (el == null ? void 0 : el.contains(target)) || el === target;\n    });\n\n    if (doc().activeElement !== target && isValidTarget) {\n      event.preventDefault();\n      target.focus();\n    }\n  });\n}\n\nexport { useFocusOnPointerDown };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/react-use-focus-on-pointer-down/src/index.ts"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,qCAAjC;;AAQA,SAAS,WAAT,CAAqB,GAArB,EAAwD;AACtD,SAAO,aAAa,GAApB;AACF;;AAEA,IAAM,KAAA,GAAQ,MAAM,OAAO,MAAP,KAAkB,WAAtC;;AACA,SAAS,WAAT,GAAuB;AAbvB,MAAA,EAAA;;AAcE,QAAM,KAAA,GAAS,SAAA,CAAkB,aAAjC;AACA,SAAA,CAAO,EAAA,GAAA,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAO,QAAd,KAAO,IAAP,GAAO,EAAP,GAA0B,SAAA,CAAU,QAApC;AACF;;AACA,IAAM,EAAA,GAAM,CAAD,IAAe,KAAA,MAAW,CAAA,CAAE,IAAF,CAAO,SAAA,CAAU,MAAjB,CAArC;;AACA,IAAM,EAAA,GAAM,CAAD,IAAe,KAAA,MAAW,CAAA,CAAE,IAAF,CAAO,WAAA,EAAP,CAArC;;AACA,IAAM,OAAA,GAAU,MAAM,EAAA,CAAG,uBAAH,CAAtB;;AACA,IAAM,QAAA,GAAW,MAAM,OAAA,MAAa,EAAA,CAAG,QAAH,CAApC;;AAWO,SAAS,qBAAT,CAA+B,KAA/B,EAAgE;AACrE,QAAM;AAAE,IAAA,GAAF;AAAO,IAAA,QAAP;AAAiB,IAAA;AAAjB,MAA6B,KAAnC;;AAEA,QAAM,GAAA,GAAM,MAAG;AAlCjB,QAAA,EAAA,EAAA,EAAA;;AAkCoB,WAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAI,OAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAa,aAAb,KAAA,IAAA,GAAA,EAAA,GAA8B,QAA9B;AAA8B,GAAhD;;AAEA,EAAA,gBAAA,CAAiB,GAAjB,EAAsB,aAAtB,EAAsC,KAAD,IAAW;AAC9C,QAAI,CAAC,QAAA,EAAD,IAAe,CAAC,OAApB,EAA6B;AAC7B,UAAM,MAAA,GAAS,KAAA,CAAM,MAArB;AAEA,UAAM,GAAA,GAAM,QAAA,IAAA,IAAA,GAAA,QAAA,GAAY,CAAC,GAAD,CAAxB;AACA,UAAM,aAAA,GAAgB,GAAA,CAAI,IAAJ,CAAU,YAAD,IAAkB;AAC/C,YAAM,EAAA,GAAK,WAAA,CAAY,YAAZ,CAAA,GAA4B,YAAA,CAAa,OAAzC,GAAmD,YAA9D;AACA,aAAA,CAAO,EAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAI,QAAJ,CAAa,MAAb,CAAP,KAA+B,EAAA,KAAO,MAAtC;AACD,KAHqB,CAAtB;;AAKA,QAAI,GAAA,GAAM,aAAN,KAAwB,MAAxB,IAAkC,aAAtC,EAAqD;AACnD,MAAA,KAAA,CAAM,cAAN;AACA,MAAA,MAAA,CAAO,KAAP;AACF;AACD,GAdD,CAAA;AAeF","sourcesContent":["import { useEventListener } from \"@chakra-ui/react-use-event-listener\"\n\nexport interface UseFocusOnMouseDownProps {\n  enabled?: boolean\n  ref: React.RefObject<HTMLElement>\n  elements?: Array<React.RefObject<HTMLElement> | HTMLElement | null>\n}\n\nfunction isRefObject(val: any): val is { current: any } {\n  return \"current\" in val\n}\n\nconst isDom = () => typeof window !== \"undefined\"\nfunction getPlatform() {\n  const agent = (navigator as any).userAgentData\n  return agent?.platform ?? navigator.platform\n}\nconst vn = (v: RegExp) => isDom() && v.test(navigator.vendor)\nconst pt = (v: RegExp) => isDom() && v.test(getPlatform())\nconst isApple = () => pt(/mac|iphone|ipad|ipod/i)\nconst isSafari = () => isApple() && vn(/apple/i)\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { ref, elements, enabled } = props\n\n  const doc = () => ref.current?.ownerDocument ?? document\n\n  useEventListener(doc, \"pointerdown\", (event) => {\n    if (!isSafari() || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return el?.contains(target) || el === target\n    })\n\n    if (doc().activeElement !== target && isValidTarget) {\n      event.preventDefault()\n      target.focus()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}