{"ast":null,"code":"'use client';\n\nimport { useUpdateEffect } from \"./chunk-6WEF4DIO.mjs\";\nimport { useEventListener } from \"./chunk-7JEV5YKL.mjs\";\nimport { useSafeLayoutEffect } from \"./chunk-724WJZW4.mjs\"; // src/use-focus-on-show.ts\n\nimport { contains, focus, getAllFocusable, isRefObject } from \"@chakra-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\n\nfunction useFocusOnShow(target) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  const {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  const element = isRefObject(target) ? target.current : target;\n  const autoFocusValue = shouldFocus && visible;\n  const autoFocusRef = useRef(autoFocusValue);\n  const lastVisibleRef = useRef(visible);\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return;\n    autoFocusRef.current = false;\n    if (contains(element, document.activeElement)) return;\n\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll,\n        nextTick: true\n      });\n    } else {\n      const tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll,\n          nextTick: true\n        });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}\n\nexport { useFocusOnShow };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-focus-on-show.ts"],"names":[],"mappings":";;;;;;AAAA,SACE,QADF,EAEE,KAFF,EAIE,eAJF,EAKE,WALF,QAMO,kBANP;AAOA,SAAS,WAAT,EAAsB,MAAtB,QAAoC,OAApC;AAYA,IAAM,cAAA,GAAwC;AAC5C,EAAA,aAAA,EAAe,IAD6B;AAE5C,EAAA,WAAA,EAAa;AAF+B,CAA9C;;AAKO,SAAS,cAAT,CACL,MADK,EAGL;AAAA,MADA,OACA,uEADU,cACV;AACA,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,aAAZ;AAA2B,IAAA,WAA3B;AAAwC,IAAA;AAAxC,MAAoD,OAA1D;AACA,QAAM,OAAA,GAAU,WAAA,CAAY,MAAZ,CAAA,GAAsB,MAAA,CAAO,OAA7B,GAAuC,MAAvD;AACA,QAAM,cAAA,GAAiB,WAAA,IAAe,OAAtC;AACA,QAAM,YAAA,GAAe,MAAA,CAAO,cAAP,CAArB;AACA,QAAM,cAAA,GAAiB,MAAA,CAAO,OAAP,CAAvB;AAEA,EAAA,mBAAA,CAAoB,MAAM;AACxB,QAAI,CAAC,cAAA,CAAe,OAAhB,IAA2B,OAA/B,EAAwC;AACtC,MAAA,YAAA,CAAa,OAAb,GAAuB,cAAvB;AACF;;AACA,IAAA,cAAA,CAAe,OAAf,GAAyB,OAAzB;AACF,GALA,EAKG,CAAC,OAAD,EAAU,cAAV,CALH,CAAA;AAOA,QAAM,OAAA,GAAU,WAAA,CAAY,MAAM;AAChC,QAAI,CAAC,OAAD,IAAY,CAAC,OAAb,IAAwB,CAAC,YAAA,CAAa,OAA1C,EAAmD;AACnD,IAAA,YAAA,CAAa,OAAb,GAAuB,KAAvB;AAEA,QAAI,QAAA,CAAS,OAAT,EAAkB,QAAA,CAAS,aAA3B,CAAJ,EAA8D;;AAE9D,QAAI,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,OAAd,EAAuB;AACrB,MAAA,KAAA,CAAM,QAAA,CAAS,OAAf,EAAwB;AAAE,QAAA,aAAF;AAAiB,QAAA,QAAA,EAAU;AAA3B,OAAxB,CAAA;AACF,KAFA,MAEO;AACL,YAAM,WAAA,GAAc,eAAA,CAAgB,OAAhB,CAApB;;AACA,UAAI,WAAA,CAAY,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,QAAA,KAAA,CAAM,WAAA,CAAY,CAAZ,CAAN,EAAsB;AAAE,UAAA,aAAF;AAAiB,UAAA,QAAA,EAAU;AAA3B,SAAtB,CAAA;AACF;AACF;AACF,GAdgB,EAcb,CAAC,OAAD,EAAU,aAAV,EAAyB,OAAzB,EAAkC,QAAlC,CAda,CAAhB;AAgBA,EAAA,eAAA,CAAgB,MAAM;AACpB,IAAA,OAAA;AACF,GAFA,EAEG,CAAC,OAAD,CAFH,CAAA;AAIA,EAAA,gBAAA,CAAiB,eAAjB,EAAkC,OAAlC,EAA2C,OAA3C,CAAA;AACF","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useRef } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = isRefObject(target) ? target.current : target\n  const autoFocusValue = shouldFocus && visible\n  const autoFocusRef = useRef(autoFocusValue)\n  const lastVisibleRef = useRef(visible)\n\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue\n    }\n    lastVisibleRef.current = visible\n  }, [visible, autoFocusValue])\n\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return\n    autoFocusRef.current = false\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll, nextTick: true })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll, nextTick: true })\n      }\n    }\n  }, [visible, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"]},"metadata":{},"sourceType":"module"}