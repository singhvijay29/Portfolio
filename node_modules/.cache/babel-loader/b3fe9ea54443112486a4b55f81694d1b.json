{"ast":null,"code":"'use client'; // src/form-control.tsx\n\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useId, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [FormControlStylesProvider, useFormControlStyles] = createContext({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `\n});\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\n\nfunction useFormControlProvider(props) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n  const uuid = useId();\n  const id = idProp || `field-${uuid}`;\n  const labelId = `${id}-label`;\n  const feedbackId = `${id}-feedback`;\n  const helpTextId = `${id}-helptext`;\n  const [hasFeedbackText, setHasFeedbackText] = useState(false);\n  const [hasHelpText, setHasHelpText] = useState(false);\n  const [isFocused, setFocus] = useState(false);\n  const getHelpTextProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      id: helpTextId,\n      ...props2,\n\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setHasHelpText(true);\n      })\n    };\n  }, [helpTextId]);\n  const getLabelProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props2.id !== void 0 ? props2.id : labelId,\n      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id\n    };\n  }, [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);\n  const getErrorMessageProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      id: feedbackId,\n      ...props2,\n\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setHasFeedbackText(true);\n      }),\n      \"aria-live\": \"polite\"\n    };\n  }, [feedbackId]);\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly)\n    };\n  }, [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly]);\n  const getRequiredIndicatorProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props2.children || \"*\"\n    };\n  }, []);\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps\n  };\n}\n\nvar FormControl = forwardRef(function FormControl2(props, ref) {\n  const styles = useMultiStyleConfig(\"Form\", props);\n  const ownProps = omitThemingProps(props);\n  const {\n    getRootProps,\n    htmlProps: _,\n    ...context\n  } = useFormControlProvider(ownProps);\n  const className = cx(\"chakra-form-control\", props.className);\n  return /* @__PURE__ */jsx(FormControlProvider, {\n    value: context,\n    children: /* @__PURE__ */jsx(FormControlStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(chakra.div, { ...getRootProps({}, ref),\n        className,\n        __css: styles[\"container\"]\n      })\n    })\n  });\n});\nFormControl.displayName = \"FormControl\";\nvar FormHelperText = forwardRef(function FormHelperText2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  const className = cx(\"chakra-form__helper-text\", props.className);\n  return /* @__PURE__ */jsx(chakra.div, { ...(field == null ? void 0 : field.getHelpTextProps(props, ref)),\n    __css: styles.helperText,\n    className\n  });\n});\nFormHelperText.displayName = \"FormHelperText\";\nexport { useFormControlStyles, useFormControlContext, FormControl, FormHelperText };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/form-control/src/form-control.tsx"],"names":["props","FormControl","FormHelperText"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"]},"metadata":{},"sourceType":"module"}