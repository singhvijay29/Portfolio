{"ast":null,"code":"'use client'; // src/use-why-update.ts\n\nimport { useEffect, useRef } from \"react\";\n\nfunction useWhyDidYouUpdate(name, props) {\n  const previousProps = useRef();\n  useEffect(() => {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current,\n        ...props\n      });\n      const changesObj = {};\n      allKeys.forEach(key => {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj);\n      }\n    }\n\n    previousProps.current = props;\n  });\n}\n\nexport { useWhyDidYouUpdate };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-why-update.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,EAAoB,MAApB,QAAkC,OAAlC;;AAEO,SAAS,kBAAT,CAA4B,IAA5B,EAA0C,KAA1C,EAAsD;AAC3D,QAAM,aAAA,GAAgB,MAAA,EAAtB;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,QAAI,aAAA,CAAc,OAAlB,EAA2B;AACzB,YAAM,OAAA,GAAU,MAAA,CAAO,IAAP,CAAY,EAAE,GAAG,aAAA,CAAc,OAAnB;AAA4B,WAAG;AAA/B,OAAZ,CAAhB;AACA,YAAM,UAAA,GAAkC,EAAxC;AACA,MAAA,OAAA,CAAQ,OAAR,CAAiB,GAAD,IAAS;AACvB,YAAI,aAAA,CAAc,OAAd,CAAsB,GAAtB,MAA+B,KAAA,CAAM,GAAN,CAAnC,EAA+C;AAC7C,UAAA,UAAA,CAAW,GAAX,CAAA,GAAkB;AAChB,YAAA,IAAA,EAAM,aAAA,CAAc,OAAd,CAAsB,GAAtB,CADU;AAEhB,YAAA,EAAA,EAAI,KAAA,CAAM,GAAN;AAFY,WAAlB;AAIF;AACD,OAPD;;AASA,UAAI,MAAA,CAAO,IAAP,CAAY,UAAZ,EAAwB,MAA5B,EAAoC;AAClC,QAAA,OAAA,CAAQ,GAAR,CAAY,sBAAZ,EAAoC,IAApC,EAA0C,UAA1C;AACF;AACF;;AAEA,IAAA,aAAA,CAAc,OAAd,GAAwB,KAAxB;AACD,GAnBD,CAAA;AAoBF","sourcesContent":["import { useEffect, useRef } from \"react\"\n\nexport function useWhyDidYouUpdate(name: string, props: any) {\n  const previousProps = useRef<any>()\n\n  useEffect(() => {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current, ...props })\n      const changesObj: Record<string, any> = {}\n      allKeys.forEach((key) => {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key],\n          }\n        }\n      })\n\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj)\n      }\n    }\n\n    previousProps.current = props\n  })\n}\n"]},"metadata":{},"sourceType":"module"}