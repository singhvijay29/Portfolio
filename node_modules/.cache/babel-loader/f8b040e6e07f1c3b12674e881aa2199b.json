{"ast":null,"code":"import { sizes_default } from \"./chunk-NJCYBKFH.mjs\";\nimport { runIfFn } from \"./chunk-UV3F75RF.mjs\"; // src/components/avatar.ts\n\nimport { avatarAnatomy as parts } from \"@chakra-ui/anatomy\";\nimport { createMultiStyleConfigHelpers, cssVar, defineStyle } from \"@chakra-ui/styled-system\";\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\";\nvar {\n  definePartsStyle,\n  defineMultiStyleConfig\n} = createMultiStyleConfigHelpers(parts.keys);\nvar $border = cssVar(\"avatar-border-color\");\nvar $bg = cssVar(\"avatar-bg\");\nvar $fs = cssVar(\"avatar-font-size\");\nvar $size = cssVar(\"avatar-size\");\nvar baseStyleBadge = defineStyle({\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference,\n  [$border.variable]: \"white\",\n  _dark: {\n    [$border.variable]: \"colors.gray.800\"\n  }\n});\nvar baseStyleExcessLabel = defineStyle({\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\",\n  [$bg.variable]: \"colors.gray.200\",\n  _dark: {\n    [$bg.variable]: \"colors.whiteAlpha.400\"\n  }\n});\nvar baseStyleContainer = defineStyle(props => {\n  const {\n    name,\n    theme\n  } = props;\n  const bg = name ? randomColor({\n    string: name\n  }) : \"colors.gray.400\";\n  const isBgDark = isDark(bg)(theme);\n  let color = \"white\";\n  if (!isBgDark) color = \"gray.800\";\n  return {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": {\n      [$bg.variable]: bg\n    },\n    [$border.variable]: \"colors.white\",\n    _dark: {\n      [$border.variable]: \"colors.gray.800\"\n    }\n  };\n});\nvar baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\"\n});\nvar baseStyle = definePartsStyle(props => ({\n  badge: runIfFn(baseStyleBadge, props),\n  excessLabel: runIfFn(baseStyleExcessLabel, props),\n  container: runIfFn(baseStyleContainer, props),\n  label: baseStyleLabel\n}));\n\nfunction getSize(size) {\n  const themeSize = size !== \"100%\" ? sizes_default[size] : void 0;\n  return definePartsStyle({\n    container: {\n      [$size.variable]: themeSize != null ? themeSize : size,\n      [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`\n    },\n    excessLabel: {\n      [$size.variable]: themeSize != null ? themeSize : size,\n      [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`\n    }\n  });\n}\n\nvar sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\")\n};\nvar avatarTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\"\n  }\n});\nexport { avatarTheme };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/theme/src/components/avatar.ts"],"names":[],"mappings":"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","sourcesContent":["import { avatarAnatomy as parts } from \"@chakra-ui/anatomy\"\nimport {\n  createMultiStyleConfigHelpers,\n  cssVar,\n  defineStyle,\n} from \"@chakra-ui/styled-system\"\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\nimport { runIfFn } from \"../utils/run-if-fn\"\n\nconst { definePartsStyle, defineMultiStyleConfig } =\n  createMultiStyleConfigHelpers(parts.keys)\n\nconst $border = cssVar(\"avatar-border-color\")\nconst $bg = cssVar(\"avatar-bg\")\nconst $fs = cssVar(\"avatar-font-size\")\nconst $size = cssVar(\"avatar-size\")\n\nconst baseStyleBadge = defineStyle({\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference,\n  [$border.variable]: \"white\",\n  _dark: {\n    [$border.variable]: \"colors.gray.800\",\n  },\n})\n\nconst baseStyleExcessLabel = defineStyle({\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\",\n  [$bg.variable]: \"colors.gray.200\",\n  _dark: {\n    [$bg.variable]: \"colors.whiteAlpha.400\",\n  },\n})\n\nconst baseStyleContainer = defineStyle((props) => {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"colors.gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  return {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": {\n      [$bg.variable]: bg,\n    },\n    [$border.variable]: \"colors.white\",\n    _dark: {\n      [$border.variable]: \"colors.gray.800\",\n    },\n  }\n})\n\nconst baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\",\n})\n\nconst baseStyle = definePartsStyle((props) => ({\n  badge: runIfFn(baseStyleBadge, props),\n  excessLabel: runIfFn(baseStyleExcessLabel, props),\n  container: runIfFn(baseStyleContainer, props),\n  label: baseStyleLabel,\n}))\n\nfunction getSize(size: keyof typeof themeSizes | \"100%\") {\n  const themeSize = size !== \"100%\" ? themeSizes[size] : undefined\n  return definePartsStyle({\n    container: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n  })\n}\n\nconst sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\"),\n}\n\nexport const avatarTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\",\n  },\n})\n"]},"metadata":{},"sourceType":"module"}