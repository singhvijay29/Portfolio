{"ast":null,"code":"function calcInset(element, container) {\n  const inset = {\n    x: 0,\n    y: 0\n  };\n  let current = element;\n\n  while (current && current !== container) {\n    if (current instanceof HTMLElement) {\n      inset.x += current.offsetLeft;\n      inset.y += current.offsetTop;\n      current = current.offsetParent;\n    } else if (current.tagName === \"svg\") {\n      /**\n       * This isn't an ideal approach to measuring the offset of <svg /> tags.\n       * It would be preferable, given they behave like HTMLElements in most ways\n       * to use offsetLeft/Top. But these don't exist on <svg />. Likewise we\n       * can't use .getBBox() like most SVG elements as these provide the offset\n       * relative to the SVG itself, which for <svg /> is usually 0x0.\n       */\n      const svgBoundingBox = current.getBoundingClientRect();\n      current = current.parentElement;\n      const parentBoundingBox = current.getBoundingClientRect();\n      inset.x += svgBoundingBox.left - parentBoundingBox.left;\n      inset.y += svgBoundingBox.top - parentBoundingBox.top;\n    } else if (current instanceof SVGGraphicsElement) {\n      const {\n        x,\n        y\n      } = current.getBBox();\n      inset.x += x;\n      inset.y += y;\n      let svg = null;\n      let parent = current.parentNode;\n\n      while (!svg) {\n        if (parent.tagName === \"svg\") {\n          svg = parent;\n        }\n\n        parent = current.parentNode;\n      }\n\n      current = svg;\n    } else {\n      break;\n    }\n  }\n\n  return inset;\n}\n\nexport { calcInset };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/dom/scroll/offsets/inset.mjs"],"names":["calcInset","element","container","inset","x","y","current","HTMLElement","offsetLeft","offsetTop","offsetParent","tagName","svgBoundingBox","getBoundingClientRect","parentElement","parentBoundingBox","left","top","SVGGraphicsElement","getBBox","svg","parent","parentNode"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,OAAnB,EAA4BC,SAA5B,EAAuC;AACnC,QAAMC,KAAK,GAAG;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAd;AACA,MAAIC,OAAO,GAAGL,OAAd;;AACA,SAAOK,OAAO,IAAIA,OAAO,KAAKJ,SAA9B,EAAyC;AACrC,QAAII,OAAO,YAAYC,WAAvB,EAAoC;AAChCJ,MAAAA,KAAK,CAACC,CAAN,IAAWE,OAAO,CAACE,UAAnB;AACAL,MAAAA,KAAK,CAACE,CAAN,IAAWC,OAAO,CAACG,SAAnB;AACAH,MAAAA,OAAO,GAAGA,OAAO,CAACI,YAAlB;AACH,KAJD,MAKK,IAAIJ,OAAO,CAACK,OAAR,KAAoB,KAAxB,EAA+B;AAChC;AACZ;AACA;AACA;AACA;AACA;AACA;AACY,YAAMC,cAAc,GAAGN,OAAO,CAACO,qBAAR,EAAvB;AACAP,MAAAA,OAAO,GAAGA,OAAO,CAACQ,aAAlB;AACA,YAAMC,iBAAiB,GAAGT,OAAO,CAACO,qBAAR,EAA1B;AACAV,MAAAA,KAAK,CAACC,CAAN,IAAWQ,cAAc,CAACI,IAAf,GAAsBD,iBAAiB,CAACC,IAAnD;AACAb,MAAAA,KAAK,CAACE,CAAN,IAAWO,cAAc,CAACK,GAAf,GAAqBF,iBAAiB,CAACE,GAAlD;AACH,KAbI,MAcA,IAAIX,OAAO,YAAYY,kBAAvB,EAA2C;AAC5C,YAAM;AAAEd,QAAAA,CAAF;AAAKC,QAAAA;AAAL,UAAWC,OAAO,CAACa,OAAR,EAAjB;AACAhB,MAAAA,KAAK,CAACC,CAAN,IAAWA,CAAX;AACAD,MAAAA,KAAK,CAACE,CAAN,IAAWA,CAAX;AACA,UAAIe,GAAG,GAAG,IAAV;AACA,UAAIC,MAAM,GAAGf,OAAO,CAACgB,UAArB;;AACA,aAAO,CAACF,GAAR,EAAa;AACT,YAAIC,MAAM,CAACV,OAAP,KAAmB,KAAvB,EAA8B;AAC1BS,UAAAA,GAAG,GAAGC,MAAN;AACH;;AACDA,QAAAA,MAAM,GAAGf,OAAO,CAACgB,UAAjB;AACH;;AACDhB,MAAAA,OAAO,GAAGc,GAAV;AACH,KAbI,MAcA;AACD;AACH;AACJ;;AACD,SAAOjB,KAAP;AACH;;AAED,SAASH,SAAT","sourcesContent":["function calcInset(element, container) {\n    const inset = { x: 0, y: 0 };\n    let current = element;\n    while (current && current !== container) {\n        if (current instanceof HTMLElement) {\n            inset.x += current.offsetLeft;\n            inset.y += current.offsetTop;\n            current = current.offsetParent;\n        }\n        else if (current.tagName === \"svg\") {\n            /**\n             * This isn't an ideal approach to measuring the offset of <svg /> tags.\n             * It would be preferable, given they behave like HTMLElements in most ways\n             * to use offsetLeft/Top. But these don't exist on <svg />. Likewise we\n             * can't use .getBBox() like most SVG elements as these provide the offset\n             * relative to the SVG itself, which for <svg /> is usually 0x0.\n             */\n            const svgBoundingBox = current.getBoundingClientRect();\n            current = current.parentElement;\n            const parentBoundingBox = current.getBoundingClientRect();\n            inset.x += svgBoundingBox.left - parentBoundingBox.left;\n            inset.y += svgBoundingBox.top - parentBoundingBox.top;\n        }\n        else if (current instanceof SVGGraphicsElement) {\n            const { x, y } = current.getBBox();\n            inset.x += x;\n            inset.y += y;\n            let svg = null;\n            let parent = current.parentNode;\n            while (!svg) {\n                if (parent.tagName === \"svg\") {\n                    svg = parent;\n                }\n                parent = current.parentNode;\n            }\n            current = svg;\n        }\n        else {\n            break;\n        }\n    }\n    return inset;\n}\n\nexport { calcInset };\n"]},"metadata":{},"sourceType":"module"}