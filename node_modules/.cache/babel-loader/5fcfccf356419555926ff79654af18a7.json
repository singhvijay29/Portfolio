{"ast":null,"code":"'use client'; // src/input-group.tsx\n\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [InputGroupStylesProvider, useInputGroupStyles] = createContext({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `\n});\nvar InputGroup = forwardRef(function InputGroup2(props, ref) {\n  const styles = useMultiStyleConfig(\"Input\", props);\n  const {\n    children,\n    className,\n    ...rest\n  } = omitThemingProps(props);\n\n  const _className = cx(\"chakra-input__group\", className);\n\n  const groupStyles = {};\n  const validChildren = getValidChildren(children);\n  const input = styles.field;\n  validChildren.forEach(child => {\n    var _a, _b;\n\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = (_a = input.height) != null ? _a : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = (_b = input.height) != null ? _b : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  const clones = validChildren.map(child => {\n    var _a, _b;\n\n    const theming = compact({\n      size: ((_a = child.props) == null ? void 0 : _a.size) || props.size,\n      variant: ((_b = child.props) == null ? void 0 : _b.variant) || props.variant\n    });\n    return child.type.id !== \"Input\" ? cloneElement(child, theming) : cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /* @__PURE__ */jsx(chakra.div, {\n    className: _className,\n    ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\",\n      // Parts of inputs override z-index to ensure that they stack correctly on each other\n      // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n      isolation: \"isolate\",\n      ...styles.group\n    },\n    \"data-group\": true,\n    ...rest,\n    children: /* @__PURE__ */jsx(InputGroupStylesProvider, {\n      value: styles,\n      children: clones\n    })\n  });\n});\nInputGroup.displayName = \"InputGroup\";\nexport { useInputGroupStyles, InputGroup };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/input/src/input-group.tsx"],"names":["InputGroup"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n"]},"metadata":{},"sourceType":"module"}