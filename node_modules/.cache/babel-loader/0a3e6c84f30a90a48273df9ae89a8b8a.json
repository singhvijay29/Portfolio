{"ast":null,"code":"'use client'; // src/use-editable.ts\n\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\n\nfunction useEditable() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props;\n  const onEditProp = useCallbackRef(onEditCallback);\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  const [isEditing, setIsEditing] = useState(defaultIsEditing);\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const [prevValue, setPrevValue] = useState(value);\n  const inputRef = useRef(null);\n  const previewRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const cancelButtonRef = useRef(null);\n  const submitButtonRef = useRef(null);\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  const isInteractive = !isEditing && !isDisabled;\n  useSafeLayoutEffect(() => {\n    var _a, _b;\n\n    if (isEditing) {\n      (_a = inputRef.current) == null ? void 0 : _a.focus();\n      if (selectAllOnFocus) (_b = inputRef.current) == null ? void 0 : _b.select();\n    }\n  }, []);\n  useUpdateEffect(() => {\n    var _a, _b, _c, _d;\n\n    if (!isEditing) {\n      if (finalFocusRef) {\n        (_a = finalFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        (_b = editButtonRef.current) == null ? void 0 : _b.focus();\n      }\n\n      return;\n    }\n\n    (_c = inputRef.current) == null ? void 0 : _c.focus();\n\n    if (selectAllOnFocus) {\n      (_d = inputRef.current) == null ? void 0 : _d.select();\n    }\n\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value);\n  }, [value]);\n  const onCancel = useCallback(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [onCancelProp, onBlurProp, setValue, prevValue]);\n  const onSubmit = useCallback(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [value, onSubmitProp, onBlurProp, prevValue]);\n  useEffect(() => {\n    if (isEditing) return;\n    const inputEl = inputRef.current;\n\n    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {\n      inputEl == null ? void 0 : inputEl.blur();\n    }\n  }, [isEditing]);\n  const onChange = useCallback(event => {\n    setValue(event.currentTarget.value);\n  }, [setValue]);\n  const onKeyDown = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel,\n      Enter: event2 => {\n        if (!event2.shiftKey && !event2.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    const action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  const onKeyDownWithoutSubmit = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel\n    };\n    const action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel]);\n  const isValueEmpty = value.length === 0;\n  const onBlur = useCallback(event => {\n    var _a;\n\n    if (!isEditing) return;\n    const doc = event.currentTarget.ownerDocument;\n    const relatedTarget = (_a = event.relatedTarget) != null ? _a : doc.activeElement;\n    const targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    const targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    const isValidBlur = !targetIsCancel && !targetIsSubmit;\n\n    if (isValidBlur) {\n      if (submitOnBlur) {\n        onSubmit();\n      } else {\n        onCancel();\n      }\n    }\n  }, [submitOnBlur, onSubmit, onCancel, isEditing]);\n  const getPreviewProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;\n    return { ...props2,\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex,\n      onFocus: callAllHandlers(props2.onFocus, onEdit, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, onUpdatePrevValue, placeholder, value]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDown, onUpdatePrevValue, placeholder, value]);\n  const getTextareaProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDownWithoutSubmit, onUpdatePrevValue, placeholder, value]);\n  const getEditButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      \"aria-label\": \"Edit\",\n      ...props2,\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled\n    };\n  }, [onEdit, isDisabled]);\n  const getSubmitButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onSubmit),\n      disabled: isDisabled\n    };\n  }, [onSubmit, isDisabled]);\n  const getCancelButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props2,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onCancel),\n      disabled: isDisabled\n    };\n  }, [onCancel, isDisabled]);\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}\n\nexport { useEditable };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/editable/src/use-editable.ts"],"names":["event","props"],"mappings":"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","sourcesContent":["import { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useEffect, useRef, useState, RefObject } from \"react\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can receive focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * Callback invoked when the user either submits or cancels.\n   * It provides the last confirmed value as argument.\n   */\n  onBlur?: (nextValue: string) => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: RefObject<FocusableElement>\n}\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement) {\n  if (!parent) return false\n  return parent === child || parent.contains(child)\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props\n\n  const onEditProp = useCallbackRef(onEditCallback)\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing && !isDisabled\n\n  useSafeLayoutEffect(() => {\n    if (isEditing) {\n      inputRef.current?.focus()\n      if (selectAllOnFocus) inputRef.current?.select()\n    }\n  }, [])\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      if (finalFocusRef) {\n        finalFocusRef.current?.focus()\n      } else {\n        editButtonRef.current?.focus()\n      }\n      return\n    }\n\n    inputRef.current?.focus()\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value)\n  }, [value])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n    onBlurProp?.(prevValue)\n  }, [onCancelProp, onBlurProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n    onBlurProp?.(prevValue)\n  }, [value, onSubmitProp, onBlurProp, prevValue])\n\n  useEffect(() => {\n    if (isEditing) return\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=559561\n    const inputEl = inputRef.current\n    if (inputEl?.ownerDocument.activeElement === inputEl) {\n      inputEl?.blur()\n    }\n  }, [isEditing])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setValue(event.currentTarget.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const onKeyDownWithoutSubmit = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel],\n  )\n\n  const isValueEmpty = value.length === 0\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      if (!isEditing) return\n      const doc = event.currentTarget.ownerDocument\n      const relatedTarget = (event.relatedTarget ??\n        doc.activeElement) as HTMLElement\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur) {\n        if (submitOnBlur) {\n          onSubmit()\n        } else {\n          onCancel()\n        }\n      }\n    },\n    [submitOnBlur, onSubmit, onCancel, isEditing],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit, onUpdatePrevValue),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDown,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getTextareaProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDownWithoutSubmit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled,\n    }),\n    [onEdit, isDisabled],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n      disabled: isDisabled,\n    }),\n    [onSubmit, isDisabled],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n      disabled: isDisabled,\n    }),\n    [onCancel, isDisabled],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"]},"metadata":{},"sourceType":"module"}