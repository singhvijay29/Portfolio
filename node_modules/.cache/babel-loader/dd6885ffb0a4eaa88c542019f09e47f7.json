{"ast":null,"code":"'use client'; // src/use-media-query.ts\n\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useEffect, useState } from \"react\";\n\nfunction useMediaQuery(query) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    ssr = true,\n    fallback\n  } = options;\n  const {\n    getWindow\n  } = useEnvironment();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(v => v != null);\n  const [value, setValue] = useState(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n    }));\n  });\n  useEffect(() => {\n    const win = getWindow();\n    setValue(queries.map(query2 => ({\n      media: query2,\n      matches: win.matchMedia(query2).matches\n    })));\n    const mql = queries.map(query2 => win.matchMedia(query2));\n\n    const handler = evt => {\n      setValue(prev => {\n        return prev.slice().map(item => {\n          if (item.media === evt.media) return { ...item,\n            matches: evt.matches\n          };\n          return item;\n        });\n      });\n    };\n\n    mql.forEach(mql2 => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach(mql2 => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(item => item.matches);\n}\n\nexport { useMediaQuery };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/media-query/src/use-media-query.ts"],"names":["query","mql"],"mappings":";;AAAA,SAAS,cAAT,QAA+B,sBAA/B;AACA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;;AAeO,SAAS,aAAT,CACL,KADK,EAGM;AAAA,MADX,OACW,uEADqB,EACrB;AACX,QAAM;AAAE,IAAA,GAAA,GAAM,IAAR;AAAc,IAAA;AAAd,MAA2B,OAAjC;AAEA,QAAM;AAAE,IAAA;AAAF,MAAgB,cAAA,EAAtB;AAEA,QAAM,OAAA,GAAU,KAAA,CAAM,OAAN,CAAc,KAAd,IAAuB,KAAvB,GAA+B,CAAC,KAAD,CAA/C;AAEA,MAAI,cAAA,GAAiB,KAAA,CAAM,OAAN,CAAc,QAAd,IAA0B,QAA1B,GAAqC,CAAC,QAAD,CAA1D;AACA,EAAA,cAAA,GAAiB,cAAA,CAAe,MAAf,CAAuB,CAAD,IAAO,CAAA,IAAK,IAAlC,CAAjB;AAEA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAA,CAAS,MAAM;AACvC,WAAO,OAAA,CAAQ,GAAR,CAAY,CAACA,MAAD,EAAQ,KAAR,MAAmB;AACpC,MAAA,KAAA,EAAO,MAD6B;AAEpC,MAAA,OAAA,EAAS,GAAA,GACL,CAAC,CAAC,cAAA,CAAe,KAAf,CADG,GAEL,SAAA,GAAY,UAAZ,CAAuBA,MAAvB,EAA8B;AAJE,KAAnB,CAAZ,CAAP;AAMD,GAPyB,CAA1B;AASA,EAAA,SAAA,CAAU,MAAM;AACd,UAAM,GAAA,GAAM,SAAA,EAAZ;AACA,IAAA,QAAA,CACE,OAAA,CAAQ,GAAR,CAAaA,MAAD,KAAY;AACtB,MAAA,KAAA,EAAO,MADe;AAEtB,MAAA,OAAA,EAAS,GAAA,CAAI,UAAJ,CAAeA,MAAf,EAAsB;AAFT,KAAZ,CAAZ,CADF,CAAA;AAOA,UAAM,GAAA,GAAM,OAAA,CAAQ,GAAR,CAAaA,MAAD,IAAW,GAAA,CAAI,UAAJ,CAAeA,MAAf,CAAvB,CAAZ;;AAEA,UAAM,OAAA,GAAW,GAAD,IAA8B;AAC5C,MAAA,QAAA,CAAU,IAAD,IAAU;AACjB,eAAO,IAAA,CAAK,KAAL,GAAa,GAAb,CAAkB,IAAD,IAAU;AAChC,cAAI,IAAA,CAAK,KAAL,KAAe,GAAA,CAAI,KAAvB,EAA8B,OAAO,EAAE,GAAG,IAAL;AAAW,YAAA,OAAA,EAAS,GAAA,CAAI;AAAxB,WAAP;AAC9B,iBAAO,IAAP;AACD,SAHM,CAAP;AAID,OALD,CAAA;AAMF,KAPA;;AASA,IAAA,GAAA,CAAI,OAAJ,CAAaC,IAAD,IAAS;AACnB,UAAI,OAAOA,IAAAA,CAAI,WAAX,KAA2B,UAA/B,EAA2C;AACzC,QAAA,IAAA,CAAI,WAAJ,CAAgB,OAAhB;AACF,OAFA,MAEO;AACL,QAAA,IAAA,CAAI,gBAAJ,CAAqB,QAArB,EAA+B,OAA/B;AACF;AACD,KAND;AAQA,WAAO,MAAM;AACX,MAAA,GAAA,CAAI,OAAJ,CAAaA,IAAD,IAAS;AACnB,YAAI,OAAOA,IAAAA,CAAI,cAAX,KAA8B,UAAlC,EAA8C;AAC5C,UAAA,IAAA,CAAI,cAAJ,CAAmB,OAAnB;AACF,SAFA,MAEO;AACL,UAAA,IAAA,CAAI,mBAAJ,CAAwB,QAAxB,EAAkC,OAAlC;AACF;AACD,OAND;AAOF,KARA;AAUF,GAtCA,EAsCG,CAAC,SAAD,CAtCH,CAAA;AAwCA,SAAO,KAAA,CAAM,GAAN,CAAW,IAAD,IAAU,IAAA,CAAK,OAAzB,CAAP;AACF","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n"]},"metadata":{},"sourceType":"module"}