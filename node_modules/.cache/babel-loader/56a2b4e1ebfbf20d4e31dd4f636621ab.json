{"ast":null,"code":"import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\n\nfunction findSpring(_ref) {\n  let {\n    duration = 800,\n    bounce = 0.25,\n    velocity = 0,\n    mass = 1\n  } = _ref;\n  let envelope;\n  let derivative;\n  warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n  let dampingRatio = 1 - bounce;\n  /**\n   * Restrict dampingRatio and duration to within acceptable ranges.\n   */\n\n  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n  duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n\n  if (dampingRatio < 1) {\n    /**\n     * Underdamped spring\n     */\n    envelope = undampedFreq => {\n      const exponentialDecay = undampedFreq * dampingRatio;\n      const delta = exponentialDecay * duration;\n      const a = exponentialDecay - velocity;\n      const b = calcAngularFreq(undampedFreq, dampingRatio);\n      const c = Math.exp(-delta);\n      return safeMin - a / b * c;\n    };\n\n    derivative = undampedFreq => {\n      const exponentialDecay = undampedFreq * dampingRatio;\n      const delta = exponentialDecay * duration;\n      const d = delta * velocity + velocity;\n      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n      const f = Math.exp(-delta);\n      const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n      const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n      return factor * ((d - e) * f) / g;\n    };\n  } else {\n    /**\n     * Critically-damped spring\n     */\n    envelope = undampedFreq => {\n      const a = Math.exp(-undampedFreq * duration);\n      const b = (undampedFreq - velocity) * duration + 1;\n      return -safeMin + a * b;\n    };\n\n    derivative = undampedFreq => {\n      const a = Math.exp(-undampedFreq * duration);\n      const b = (velocity - undampedFreq) * (duration * duration);\n      return a * b;\n    };\n  }\n\n  const initialGuess = 5 / duration;\n  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n  duration = secondsToMilliseconds(duration);\n\n  if (isNaN(undampedFreq)) {\n    return {\n      stiffness: 100,\n      damping: 10,\n      duration\n    };\n  } else {\n    const stiffness = Math.pow(undampedFreq, 2) * mass;\n    return {\n      stiffness,\n      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n      duration\n    };\n  }\n}\n\nconst rootIterations = 12;\n\nfunction approximateRoot(envelope, derivative, initialGuess) {\n  let result = initialGuess;\n\n  for (let i = 1; i < rootIterations; i++) {\n    result = result - envelope(result) / derivative(result);\n  }\n\n  return result;\n}\n\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs"],"names":["warning","clamp","secondsToMilliseconds","millisecondsToSeconds","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","duration","bounce","velocity","mass","envelope","derivative","dampingRatio","undampedFreq","exponentialDecay","delta","a","b","calcAngularFreq","c","Math","exp","d","e","pow","f","g","factor","initialGuess","approximateRoot","isNaN","stiffness","damping","sqrt","rootIterations","result","i"],"mappings":"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","sourcesContent":["import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n"]},"metadata":{},"sourceType":"module"}