{"ast":null,"code":"'use client';\n\nimport { ColorModeContext } from \"./chunk-UQDW7KKV.mjs\";\nimport { getColorModeUtils } from \"./chunk-X7ZBZ4KW.mjs\";\nimport { localStorageManager } from \"./chunk-44OWBZ77.mjs\"; // src/color-mode-provider.tsx\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nvar noop = () => {};\n\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\n\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange\n  }), [disableTransitionOnChange]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value != null ? value : resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\";\n\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nDarkMode.displayName = \"DarkMode\";\n\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/color-mode/src/color-mode-provider.tsx"],"names":["value"],"mappings":"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","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { ColorModeContext } from \"./color-mode-context\"\nimport {\n  ColorMode,\n  ColorModeContextType,\n  ColorModeOptions,\n} from \"./color-mode-types\"\nimport { getColorModeUtils } from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nconst noop = () => {}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options?: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nfunction getTheme(manager: StorageManager, fallback?: ColorMode) {\n  return manager.type === \"cookie\" && manager.ssr\n    ? manager.get(fallback)\n    : fallback\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange,\n    } = {},\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  const [colorMode, rawSetColorMode] = useState(() =>\n    getTheme(colorModeManager, defaultColorMode),\n  )\n\n  const [resolvedColorMode, setResolvedColorMode] = useState(() =>\n    getTheme(colorModeManager),\n  )\n\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange],\n  )\n\n  const resolvedValue =\n    initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode\n\n  const setColorMode = useCallback(\n    (value: ColorMode | \"system\") => {\n      //\n      const resolved = value === \"system\" ? getSystemTheme() : value\n      rawSetColorMode(resolved)\n\n      setClassName(resolved === \"dark\")\n      setDataset(resolved)\n\n      colorModeManager.set(resolved)\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const managerValue = colorModeManager.get()\n\n    if (managerValue) {\n      setColorMode(managerValue)\n      return\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\")\n      return\n    }\n\n    setColorMode(defaultColorMode)\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode])\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\")\n  }, [resolvedValue, setColorMode])\n\n  useEffect(() => {\n    if (!useSystemColorMode) return\n    return addListener(setColorMode)\n  }, [useSystemColorMode, addListener, setColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? (resolvedValue as ColorMode),\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== undefined,\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\"\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport function DarkMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nDarkMode.displayName = \"DarkMode\"\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport function LightMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nLightMode.displayName = \"LightMode\"\n"]},"metadata":{},"sourceType":"module"}