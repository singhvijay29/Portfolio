{"ast":null,"code":"'use client'; // src/utils.ts\n\nvar toVar = (value, fallback) => ({\n  var: value,\n  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`\n});\n\nvar cssVars = {\n  arrowShadowColor: toVar(\"--popper-arrow-shadow-color\"),\n  arrowSize: toVar(\"--popper-arrow-size\", \"8px\"),\n  arrowSizeHalf: toVar(\"--popper-arrow-size-half\"),\n  arrowBg: toVar(\"--popper-arrow-bg\"),\n  transformOrigin: toVar(\"--popper-transform-origin\"),\n  arrowOffset: toVar(\"--popper-arrow-offset\")\n};\n\nfunction getBoxShadow(placement) {\n  if (placement.includes(\"top\")) return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"bottom\")) return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"right\")) return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"left\")) return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`;\n}\n\nvar transforms = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\"\n};\n\nvar toTransformOrigin = placement => transforms[placement];\n\nvar defaultEventListeners = {\n  scroll: true,\n  resize: true\n};\n\nfunction getEventListenerOptions(value) {\n  let eventListeners;\n\n  if (typeof value === \"object\") {\n    eventListeners = {\n      enabled: true,\n      options: { ...defaultEventListeners,\n        ...value\n      }\n    };\n  } else {\n    eventListeners = {\n      enabled: value,\n      options: defaultEventListeners\n    };\n  }\n\n  return eventListeners;\n}\n\nexport { cssVars, getBoxShadow, toTransformOrigin, getEventListenerOptions };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/popper/src/utils.ts"],"names":[],"mappings":";;AAEA,IAAM,KAAA,GAAQ,CAAC,KAAD,EAAgB,QAAhB,MAAuC;AACnD,EAAA,GAAA,EAAK,KAD8C;AAEnD,EAAA,MAAA,EAAQ,QAAA,GAAW,OAAO,KAAA,KAAU,QAAA,GAA5B,GAA0C,OAAO,KAAA;AAFN,CAAvC,CAAd;;AAKO,IAAM,OAAA,GAAU;AACrB,EAAA,gBAAA,EAAkB,KAAA,CAAM,6BAAN,CADG;AAErB,EAAA,SAAA,EAAW,KAAA,CAAM,qBAAN,EAA6B,KAA7B,CAFU;AAGrB,EAAA,aAAA,EAAe,KAAA,CAAM,0BAAN,CAHM;AAIrB,EAAA,OAAA,EAAS,KAAA,CAAM,mBAAN,CAJY;AAKrB,EAAA,eAAA,EAAiB,KAAA,CAAM,2BAAN,CALI;AAMrB,EAAA,WAAA,EAAa,KAAA,CAAM,uBAAN;AANQ,CAAhB;;AASA,SAAS,YAAT,CAAsB,SAAtB,EAA4C;AACjD,MAAI,SAAA,CAAU,QAAV,CAAmB,KAAnB,CAAJ,EACE,OAAO,gDAAP;AACF,MAAI,SAAA,CAAU,QAAV,CAAmB,QAAnB,CAAJ,EACE,OAAO,kDAAP;AACF,MAAI,SAAA,CAAU,QAAV,CAAmB,OAAnB,CAAJ,EACE,OAAO,iDAAP;AACF,MAAI,SAAA,CAAU,QAAV,CAAmB,MAAnB,CAAJ,EACE,OAAO,iDAAP;AACJ;;AAEA,IAAM,UAAA,GAAqC;AACzC,EAAA,GAAA,EAAK,eADoC;AAEzC,eAAa,aAF4B;AAGzC,aAAW,cAH8B;AAKzC,EAAA,MAAA,EAAQ,YALiC;AAMzC,kBAAgB,UANyB;AAOzC,gBAAc,WAP2B;AASzC,EAAA,IAAA,EAAM,cATmC;AAUzC,gBAAc,WAV2B;AAWzC,cAAY,cAX6B;AAazC,EAAA,KAAA,EAAO,aAbkC;AAczC,iBAAe,UAd0B;AAezC,eAAa;AAf4B,CAA3C;;AAkBO,IAAM,iBAAA,GAAqB,SAAD,IAA0B,UAAA,CAAW,SAAX,CAApD;;AAEP,IAAM,qBAAA,GAAwB;AAC5B,EAAA,MAAA,EAAQ,IADoB;AAE5B,EAAA,MAAA,EAAQ;AAFoB,CAA9B;;AAKO,SAAS,uBAAT,CACL,KADK,EAEL;AACA,MAAI,cAAJ;;AAIA,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,IAAA,cAAA,GAAiB;AACf,MAAA,OAAA,EAAS,IADM;AAEf,MAAA,OAAA,EAAS,EAAE,GAAG,qBAAL;AAA4B,WAAG;AAA/B;AAFM,KAAjB;AAIF,GALA,MAKO;AACL,IAAA,cAAA,GAAiB;AACf,MAAA,OAAA,EAAS,KADM;AAEf,MAAA,OAAA,EAAS;AAFM,KAAjB;AAIF;;AACA,SAAO,cAAP;AACF","sourcesContent":["import { Placement } from \"@popperjs/core\"\n\nconst toVar = (value: string, fallback?: string) => ({\n  var: value,\n  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`,\n})\n\nexport const cssVars = {\n  arrowShadowColor: toVar(\"--popper-arrow-shadow-color\"),\n  arrowSize: toVar(\"--popper-arrow-size\", \"8px\"),\n  arrowSizeHalf: toVar(\"--popper-arrow-size-half\"),\n  arrowBg: toVar(\"--popper-arrow-bg\"),\n  transformOrigin: toVar(\"--popper-transform-origin\"),\n  arrowOffset: toVar(\"--popper-arrow-offset\"),\n} as const\n\nexport function getBoxShadow(placement: Placement) {\n  if (placement.includes(\"top\"))\n    return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"bottom\"))\n    return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"right\"))\n    return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"left\"))\n    return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`\n}\n\nconst transforms: Record<string, string> = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\",\n}\n\nexport const toTransformOrigin = (placement: Placement) => transforms[placement]\n\nconst defaultEventListeners = {\n  scroll: true,\n  resize: true,\n}\n\nexport function getEventListenerOptions(\n  value?: boolean | Partial<typeof defaultEventListeners>,\n) {\n  let eventListeners: {\n    enabled?: boolean\n    options?: typeof defaultEventListeners\n  }\n  if (typeof value === \"object\") {\n    eventListeners = {\n      enabled: true,\n      options: { ...defaultEventListeners, ...value },\n    }\n  } else {\n    eventListeners = {\n      enabled: value,\n      options: defaultEventListeners,\n    }\n  }\n  return eventListeners\n}\n"]},"metadata":{},"sourceType":"module"}