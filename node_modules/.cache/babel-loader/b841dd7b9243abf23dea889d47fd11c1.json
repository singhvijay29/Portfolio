{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { invariant } from '../../utils/errors.mjs';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { checkReorder } from './utils/check-reorder.mjs';\n\nfunction ReorderGroup(_ref, externalRef) {\n  let {\n    children,\n    as = \"ul\",\n    axis = \"y\",\n    onReorder,\n    values,\n    ...props\n  } = _ref;\n  const Component = useConstant(() => motion(as));\n  const order = [];\n  const isReordering = useRef(false);\n  invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n  const context = {\n    axis,\n    registerItem: (value, layout) => {\n      // If the entry was already added, update it rather than adding it again\n      const idx = order.findIndex(entry => value === entry.value);\n\n      if (idx !== -1) {\n        order[idx].layout = layout[axis];\n      } else {\n        order.push({\n          value: value,\n          layout: layout[axis]\n        });\n      }\n\n      order.sort(compareMin);\n    },\n    updateOrder: (item, offset, velocity) => {\n      if (isReordering.current) return;\n      const newOrder = checkReorder(order, item, offset, velocity);\n\n      if (order !== newOrder) {\n        isReordering.current = true;\n        onReorder(newOrder.map(getValue).filter(value => values.indexOf(value) !== -1));\n      }\n    }\n  };\n  useEffect(() => {\n    isReordering.current = false;\n  });\n  return jsx(Component, { ...props,\n    ref: externalRef,\n    ignoreStrict: true,\n    children: jsx(ReorderContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\n\nconst Group = forwardRef(ReorderGroup);\n\nfunction getValue(item) {\n  return item.value;\n}\n\nfunction compareMin(a, b) {\n  return a.layout.min - b.layout.min;\n}\n\nexport { Group, ReorderGroup };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/components/Reorder/Group.mjs"],"names":["jsx","invariant","forwardRef","useRef","useEffect","ReorderContext","motion","useConstant","checkReorder","ReorderGroup","externalRef","children","as","axis","onReorder","values","props","Component","order","isReordering","Boolean","context","registerItem","value","layout","idx","findIndex","entry","push","sort","compareMin","updateOrder","item","offset","velocity","current","newOrder","map","getValue","filter","indexOf","ref","ignoreStrict","Provider","Group","a","b","min"],"mappings":"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","sourcesContent":["import { jsx } from 'react/jsx-runtime';\nimport { invariant } from '../../utils/errors.mjs';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { checkReorder } from './utils/check-reorder.mjs';\n\nfunction ReorderGroup({ children, as = \"ul\", axis = \"y\", onReorder, values, ...props }, externalRef) {\n    const Component = useConstant(() => motion(as));\n    const order = [];\n    const isReordering = useRef(false);\n    invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n    const context = {\n        axis,\n        registerItem: (value, layout) => {\n            // If the entry was already added, update it rather than adding it again\n            const idx = order.findIndex((entry) => value === entry.value);\n            if (idx !== -1) {\n                order[idx].layout = layout[axis];\n            }\n            else {\n                order.push({ value: value, layout: layout[axis] });\n            }\n            order.sort(compareMin);\n        },\n        updateOrder: (item, offset, velocity) => {\n            if (isReordering.current)\n                return;\n            const newOrder = checkReorder(order, item, offset, velocity);\n            if (order !== newOrder) {\n                isReordering.current = true;\n                onReorder(newOrder\n                    .map(getValue)\n                    .filter((value) => values.indexOf(value) !== -1));\n            }\n        },\n    };\n    useEffect(() => {\n        isReordering.current = false;\n    });\n    return (jsx(Component, { ...props, ref: externalRef, ignoreStrict: true, children: jsx(ReorderContext.Provider, { value: context, children: children }) }));\n}\nconst Group = forwardRef(ReorderGroup);\nfunction getValue(item) {\n    return item.value;\n}\nfunction compareMin(a, b) {\n    return a.layout.min - b.layout.min;\n}\n\nexport { Group, ReorderGroup };\n"]},"metadata":{},"sourceType":"module"}