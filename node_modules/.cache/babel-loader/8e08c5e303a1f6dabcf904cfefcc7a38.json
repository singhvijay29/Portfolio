{"ast":null,"code":"import { NEW_FOCUS, newFocus } from './solver';\nimport { getFocusableNodes } from './utils/DOMutils';\nimport { getAllAffectedNodes } from './utils/all-affected';\nimport { asArray, getFirst } from './utils/array';\nimport { pickAutofocus } from './utils/auto-focus';\nimport { getActiveElement } from './utils/getActiveElement';\nimport { isDefined, isNotAGuard } from './utils/is';\nimport { allParentAutofocusables, getTopCommonParent } from './utils/parenting';\n\nvar reorderNodes = function (srcNodes, dstNodes) {\n  var remap = new Map(); // no Set(dstNodes) for IE11 :(\n\n  dstNodes.forEach(function (entity) {\n    return remap.set(entity.node, entity);\n  }); // remap to dstNodes\n\n  return srcNodes.map(function (node) {\n    return remap.get(node);\n  }).filter(isDefined);\n};\n/**\n * contains the main logic of the `focus-lock` package.\n *\n * ! you probably dont need this function !\n *\n * given top node(s) and the last active element returns the element to be focused next\n * @returns element which should be focused to move focus inside\n * @param topNode\n * @param lastNode\n */\n\n\nexport var focusSolver = function (topNode, lastNode) {\n  var activeElement = getActiveElement(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);\n  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);\n  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);\n  var visibilityCache = new Map();\n  var anyFocusable = getFocusableNodes(entries, visibilityCache);\n  var innerElements = anyFocusable.filter(function (_a) {\n    var node = _a.node;\n    return isNotAGuard(node);\n  });\n\n  if (!innerElements[0]) {\n    return undefined;\n  }\n\n  var outerNodes = getFocusableNodes([commonParent], visibilityCache).map(function (_a) {\n    var node = _a.node;\n    return node;\n  });\n  var orderedInnerElements = reorderNodes(outerNodes, innerElements); // collect inner focusable and separately tabbables\n\n  var innerFocusables = orderedInnerElements.map(function (_a) {\n    var node = _a.node;\n    return node;\n  });\n  var innerTabbable = orderedInnerElements.filter(function (_a) {\n    var tabIndex = _a.tabIndex;\n    return tabIndex >= 0;\n  }).map(function (_a) {\n    var node = _a.node;\n    return node;\n  });\n  var newId = newFocus(innerFocusables, innerTabbable, outerNodes, activeElement, lastNode);\n\n  if (newId === NEW_FOCUS) {\n    var focusNode = // first try only tabbable, and the fallback to all focusable, as long as at least one element should be picked for focus\n    pickAutofocus(anyFocusable, innerTabbable, allParentAutofocusables(entries, visibilityCache)) || pickAutofocus(anyFocusable, innerFocusables, allParentAutofocusables(entries, visibilityCache));\n\n    if (focusNode) {\n      return {\n        node: focusNode\n      };\n    } else {\n      console.warn('focus-lock: cannot find any node to move focus into');\n      return undefined;\n    }\n  }\n\n  if (newId === undefined) {\n    return newId;\n  }\n\n  return orderedInnerElements[newId];\n};","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/focus-lock/dist/es2015/focusSolver.js"],"names":["NEW_FOCUS","newFocus","getFocusableNodes","getAllAffectedNodes","asArray","getFirst","pickAutofocus","getActiveElement","isDefined","isNotAGuard","allParentAutofocusables","getTopCommonParent","reorderNodes","srcNodes","dstNodes","remap","Map","forEach","entity","set","node","map","get","filter","focusSolver","topNode","lastNode","activeElement","length","document","ownerDocument","entries","commonParent","visibilityCache","anyFocusable","innerElements","_a","undefined","outerNodes","orderedInnerElements","innerFocusables","innerTabbable","tabIndex","newId","focusNode","console","warn"],"mappings":"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","sourcesContent":["import { NEW_FOCUS, newFocus } from './solver';\nimport { getFocusableNodes } from './utils/DOMutils';\nimport { getAllAffectedNodes } from './utils/all-affected';\nimport { asArray, getFirst } from './utils/array';\nimport { pickAutofocus } from './utils/auto-focus';\nimport { getActiveElement } from './utils/getActiveElement';\nimport { isDefined, isNotAGuard } from './utils/is';\nimport { allParentAutofocusables, getTopCommonParent } from './utils/parenting';\nvar reorderNodes = function (srcNodes, dstNodes) {\n    var remap = new Map();\n    // no Set(dstNodes) for IE11 :(\n    dstNodes.forEach(function (entity) { return remap.set(entity.node, entity); });\n    // remap to dstNodes\n    return srcNodes.map(function (node) { return remap.get(node); }).filter(isDefined);\n};\n/**\n * contains the main logic of the `focus-lock` package.\n *\n * ! you probably dont need this function !\n *\n * given top node(s) and the last active element returns the element to be focused next\n * @returns element which should be focused to move focus inside\n * @param topNode\n * @param lastNode\n */\nexport var focusSolver = function (topNode, lastNode) {\n    var activeElement = getActiveElement(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);\n    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);\n    var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);\n    var visibilityCache = new Map();\n    var anyFocusable = getFocusableNodes(entries, visibilityCache);\n    var innerElements = anyFocusable.filter(function (_a) {\n        var node = _a.node;\n        return isNotAGuard(node);\n    });\n    if (!innerElements[0]) {\n        return undefined;\n    }\n    var outerNodes = getFocusableNodes([commonParent], visibilityCache).map(function (_a) {\n        var node = _a.node;\n        return node;\n    });\n    var orderedInnerElements = reorderNodes(outerNodes, innerElements);\n    // collect inner focusable and separately tabbables\n    var innerFocusables = orderedInnerElements.map(function (_a) {\n        var node = _a.node;\n        return node;\n    });\n    var innerTabbable = orderedInnerElements.filter(function (_a) {\n        var tabIndex = _a.tabIndex;\n        return tabIndex >= 0;\n    }).map(function (_a) {\n        var node = _a.node;\n        return node;\n    });\n    var newId = newFocus(innerFocusables, innerTabbable, outerNodes, activeElement, lastNode);\n    if (newId === NEW_FOCUS) {\n        var focusNode = \n        // first try only tabbable, and the fallback to all focusable, as long as at least one element should be picked for focus\n        pickAutofocus(anyFocusable, innerTabbable, allParentAutofocusables(entries, visibilityCache)) ||\n            pickAutofocus(anyFocusable, innerFocusables, allParentAutofocusables(entries, visibilityCache));\n        if (focusNode) {\n            return { node: focusNode };\n        }\n        else {\n            console.warn('focus-lock: cannot find any node to move focus into');\n            return undefined;\n        }\n    }\n    if (newId === undefined) {\n        return newId;\n    }\n    return orderedInnerElements[newId];\n};\n"]},"metadata":{},"sourceType":"module"}