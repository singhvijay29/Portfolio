{"ast":null,"code":"'use client';\n\nimport { getClosestValue } from \"./chunk-C53CKZDP.mjs\";\nimport { useBreakpoint } from \"./chunk-6KW5I77S.mjs\"; // src/use-breakpoint-value.ts\n\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\";\n\nfunction useBreakpointValue(values, arg) {\n  var _a;\n\n  const opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme();\n  if (!breakpoint) return;\n  const breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    let [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { useBreakpointValue };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/media-query/src/use-breakpoint-value.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,QAAT,QAAyB,yBAAzB;AACA,SAAS,qBAAT,QAAsC,6BAAtC;;AAgBO,SAAS,kBAAT,CACL,MADK,EAEL,GAFK,EAGU;AArBjB,MAAA,EAAA;;AAsBE,QAAM,IAAA,GAAO,QAAA,CAAS,GAAT,CAAA,GAAgB,GAAhB,GAAsB;AAAE,IAAA,QAAA,EAAU,GAAA,IAAA,IAAA,GAAA,GAAA,GAAO;AAAnB,GAAnC;AACA,QAAM,UAAA,GAAa,aAAA,CAAc,IAAd,CAAnB;AACA,QAAM,KAAA,GAAQ,QAAA,EAAd;AAEA,MAAI,CAAC,UAAL,EAAiB;AAKjB,QAAM,WAAA,GAAc,KAAA,CAAM,IAAN,CAAM,CAAA,CAAK,EAAA,GAAA,KAAA,CAAM,aAAX,KAAK,IAAL,GAAK,KAAA,CAAL,GAAK,EAAA,CAAqB,IAA1B,KAAkC,EAAxC,CAApB;AAEA,QAAM,GAAA,GAAM,KAAA,CAAM,OAAN,CAAc,MAAd,IACR,MAAA,CAAO,WAAP,CACE,MAAA,CAAO,OAAP,CAAe,qBAAA,CAAsB,MAAtB,EAA8B,WAA9B,CAAf,EAA2D,GAA3D,CACE;AAAA,QAAC,CAAC,GAAD,EAAM,KAAN,CAAD;AAAA,WAAkB,CAAC,GAAD,EAAM,KAAN,CAAlB;AAAA,GADF,CADF,CADQ,GAMR,MANJ;AAQA,SAAO,eAAA,CAAgB,GAAhB,EAAqB,UAArB,EAAiC,WAAjC,CAAP;AACF","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint, UseBreakpointOptions } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value\n */\nexport function useBreakpointValue<T = any>(\n  values: Partial<Record<string, T>> | Array<T | null>,\n  arg?: UseBreakpointOptions | string,\n): T | undefined {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const breakpoint = useBreakpoint(opts)\n  const theme = useTheme()\n\n  if (!breakpoint) return\n\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Array.from(theme.__breakpoints?.keys || [])\n\n  const obj = Array.isArray(values)\n    ? Object.fromEntries<any>(\n        Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n          ([key, value]) => [key, value],\n        ),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n"]},"metadata":{},"sourceType":"module"}