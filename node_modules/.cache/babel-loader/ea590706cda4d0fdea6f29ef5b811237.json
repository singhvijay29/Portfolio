{"ast":null,"code":"'use client';\n\nimport { usePointerEvent } from \"./chunk-ZCYNKCF5.mjs\";\nimport { useUnmountEffect } from \"./chunk-NGVRPZ6W.mjs\"; // src/use-pan-gesture.ts\n\nimport { noop, PanSession } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\n\nfunction usePanGesture(ref, props) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold\n  } = props;\n  const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  const panSession = useRef(null);\n  const handlers = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n\n  };\n  useEffect(() => {\n    var _a;\n\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlers);\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, threshold);\n  }\n\n  usePointerEvent(() => ref.current, \"pointerdown\", hasPanEvents ? onPointerDown : noop);\n  useUnmountEffect(() => {\n    var _a;\n\n    (_a = panSession.current) == null ? void 0 : _a.end();\n    panSession.current = null;\n  });\n}\n\nexport { usePanGesture };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-pan-gesture.ts"],"names":[],"mappings":";;;;;AAAA,SAEE,IAFF,EAIE,UAJF,QAMO,kBANP;AAOA,SAAS,SAAT,EAAoB,MAApB,QAAkC,OAAlC;;AAaO,SAAS,aAAT,CACL,GADK,EAEL,KAFK,EAGL;AACA,QAAM;AACJ,IAAA,KADI;AAEJ,IAAA,UAFI;AAGJ,IAAA,QAHI;AAIJ,IAAA,iBAJI;AAKJ,IAAA,eALI;AAMJ,IAAA;AANI,MAOF,KAPJ;AASA,QAAM,YAAA,GAAe,OAAA,CACnB,KAAA,IAAS,UAAT,IAAuB,QAAvB,IAAmC,iBAAnC,IAAwD,eADrC,CAArB;AAIA,QAAM,UAAA,GAAa,MAAA,CAA0B,IAA1B,CAAnB;AAEA,QAAM,QAAA,GAAwC;AAC5C,IAAA,cAAA,EAAgB,iBAD4B;AAE5C,IAAA,YAAA,EAAc,eAF8B;AAG5C,IAAA,OAAA,EAAS,UAHmC;AAI5C,IAAA,MAAA,EAAQ,KAJoC;;AAK5C,IAAA,KAAA,CAAM,KAAN,EAAa,IAAb,EAAmB;AACjB,MAAA,UAAA,CAAW,OAAX,GAAqB,IAArB;AACA,MAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAW,KAAX,EAAkB,IAAlB,CAAA;AACF;;AAR4C,GAA9C;AAWA,EAAA,SAAA,CAAU,MAAM;AAlDlB,QAAA,EAAA;;AAmDI,KAAA,EAAA,GAAA,UAAA,CAAW,OAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAoB,cAApB,CAAmC,QAAnC,CAAA;AACD,GAFD,CAAA;;AAIA,WAAS,aAAT,CAAuB,KAAvB,EAA+C;AAC7C,IAAA,UAAA,CAAW,OAAX,GAAqB,IAAI,UAAJ,CAAe,KAAf,EAAsB,QAAtB,EAAgC,SAAhC,CAArB;AACF;;AAEA,EAAA,eAAA,CACE,MAAM,GAAA,CAAI,OADZ,EAEE,aAFF,EAGE,YAAA,GAAe,aAAf,GAA+B,IAHjC,CAAA;AAMA,EAAA,gBAAA,CAAiB,MAAM;AAhEzB,QAAA,EAAA;;AAiEI,KAAA,EAAA,GAAA,UAAA,CAAW,OAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAoB,GAApB,EAAA;AACA,IAAA,UAAA,CAAW,OAAX,GAAqB,IAArB;AACD,GAHD,CAAA;AAIF","sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanEventHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n  threshold?: number\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold,\n  } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers, threshold)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => {\n    panSession.current?.end()\n    panSession.current = null\n  })\n}\n"]},"metadata":{},"sourceType":"module"}