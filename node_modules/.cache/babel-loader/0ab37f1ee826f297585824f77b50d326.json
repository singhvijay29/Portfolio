{"ast":null,"code":"'use client';\n\nimport { useFormControlContext, useFormControlStyles } from \"./chunk-DFWC5MHP.mjs\"; // src/form-label.tsx\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : {\n    ref,\n    ...rest\n  };\n  return /* @__PURE__ */jsxs(chakra.label, { ...ownProps,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: {\n      display: \"block\",\n      textAlign: \"start\",\n      ...styles\n    },\n    children: [children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator]\n  });\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(function RequiredIndicator2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n  const className = cx(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */jsx(chakra.span, { ...(field == null ? void 0 : field.getRequiredIndicatorProps(props, ref)),\n    __css: styles.requiredIndicator,\n    className\n  });\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\nexport { FormLabel, RequiredIndicator };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/form-control/src/form-label.tsx"],"names":["FormLabel","RequiredIndicator"],"mappings":";;;;AAAA,SACE,MADF,EAEE,UAFF,EAIE,gBAJF,EAME,cANF,QAOO,mBAPP;AAQA,SAAS,EAAT,QAAmB,yBAAnB;AAkCwB,SAAA,GAAA,EASpB,IAToB,QAAA,mBAAA;AAVjB,IAAM,SAAA,GAAY,UAAA,CAAoC,SAASA,UAAT,CAC3D,WAD2D,EAE3D,GAF2D,EAG3D;AAnCF,MAAA,EAAA;;AAoCE,QAAM,MAAA,GAAS,cAAA,CAAe,WAAf,EAA4B,WAA5B,CAAf;AACA,QAAM,KAAA,GAAQ,gBAAA,CAAiB,WAAjB,CAAd;AAEA,QAAM;AACJ,IAAA,SADI;AAEJ,IAAA,QAFI;AAGJ,IAAA,iBAAA,GAAoB,eAAA,GAAA,CAAC,iBAAD,EAAC,EAAD,CAHhB;AAIJ,IAAA,iBAAA,GAAoB,IAJhB;AAKJ,OAAG;AALC,MAMF,KANJ;AAQA,QAAM,KAAA,GAAQ,qBAAA,EAAd;AACA,QAAM,QAAA,GAAA,CAAW,EAAA,GAAA,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAO,aAAP,CAAqB,IAArB,EAA2B,GAA3B,CAAX,KAAW,IAAX,GAAW,EAAX,GAA8C;AAAE,IAAA,GAAF;AAAO,OAAG;AAAV,GAApD;AAEA,SACE,eAAA,IAAA,CAAC,MAAA,CAAO,KAAR,EAAC,EACE,GAAG,QADL;AAEC,IAAA,SAAA,EAAW,EAAA,CAAG,oBAAH,EAAyB,KAAA,CAAM,SAA/B,CAFZ;AAGC,IAAA,KAAA,EAAO;AACL,MAAA,OAAA,EAAS,OADJ;AAEL,MAAA,SAAA,EAAW,OAFN;AAGL,SAAG;AAHE,KAHR;AASE,IAAA,QAAA,EAAA,CAAA,QAAA,EAAA,CACA,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAO,UADP,IACoB,iBADpB,GACwC,iBADxC;AATF,GAAD,CADF;AAcD,CAhCwB,CAAlB;AAkCP,SAAA,CAAU,WAAV,GAAwB,WAAxB;AAQO,IAAM,iBAAA,GAAoB,UAAA,CAC/B,SAASC,kBAAT,CAA2B,KAA3B,EAAkC,GAAlC,EAAuC;AACrC,QAAM,KAAA,GAAQ,qBAAA,EAAd;AACA,QAAM,MAAA,GAAS,oBAAA,EAAf;AAEA,MAAI,EAAC,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAO,UAAR,CAAJ,EAAwB,OAAO,IAAP;AAExB,QAAM,SAAA,GAAY,EAAA,CAAG,iCAAH,EAAsC,KAAA,CAAM,SAA5C,CAAlB;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,IAAR,EAAC,EACE,IAAG,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAO,yBAAP,CAAiC,KAAjC,EAAwC,GAAxC,CAAH,CADF;AAEC,IAAA,KAAA,EAAO,MAAA,CAAO,iBAFf;AAGC,IAAA;AAHD,GAAD,CADF;AAOF,CAhB+B,CAA1B;AAmBP,iBAAA,CAAkB,WAAlB,GAAgC,mBAAhC","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"]},"metadata":{},"sourceType":"module"}