{"ast":null,"code":"import { resolveElements } from '../utils/resolve-element.mjs';\nconst thresholds = {\n  some: 0,\n  all: 1\n};\n\nfunction inView(elementOrSelector, onStart) {\n  let {\n    root,\n    margin: rootMargin,\n    amount = \"some\"\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const elements = resolveElements(elementOrSelector);\n  const activeIntersections = new WeakMap();\n\n  const onIntersectionChange = entries => {\n    entries.forEach(entry => {\n      const onEnd = activeIntersections.get(entry.target);\n      /**\n       * If there's no change to the intersection, we don't need to\n       * do anything here.\n       */\n\n      if (entry.isIntersecting === Boolean(onEnd)) return;\n\n      if (entry.isIntersecting) {\n        const newOnEnd = onStart(entry);\n\n        if (typeof newOnEnd === \"function\") {\n          activeIntersections.set(entry.target, newOnEnd);\n        } else {\n          observer.unobserve(entry.target);\n        }\n      } else if (onEnd) {\n        onEnd(entry);\n        activeIntersections.delete(entry.target);\n      }\n    });\n  };\n\n  const observer = new IntersectionObserver(onIntersectionChange, {\n    root,\n    rootMargin,\n    threshold: typeof amount === \"number\" ? amount : thresholds[amount]\n  });\n  elements.forEach(element => observer.observe(element));\n  return () => observer.disconnect();\n}\n\nexport { inView };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs"],"names":["resolveElements","thresholds","some","all","inView","elementOrSelector","onStart","root","margin","rootMargin","amount","elements","activeIntersections","WeakMap","onIntersectionChange","entries","forEach","entry","onEnd","get","target","isIntersecting","Boolean","newOnEnd","set","observer","unobserve","delete","IntersectionObserver","threshold","element","observe","disconnect"],"mappings":"AAAA,SAASA,eAAT,QAAgC,8BAAhC;AAEA,MAAMC,UAAU,GAAG;AACfC,EAAAA,IAAI,EAAE,CADS;AAEfC,EAAAA,GAAG,EAAE;AAFU,CAAnB;;AAIA,SAASC,MAAT,CAAgBC,iBAAhB,EAAmCC,OAAnC,EAAgG;AAAA,MAApD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAM,EAAEC,UAAhB;AAA4BC,IAAAA,MAAM,GAAG;AAArC,GAAoD,uEAAJ,EAAI;AAC5F,QAAMC,QAAQ,GAAGX,eAAe,CAACK,iBAAD,CAAhC;AACA,QAAMO,mBAAmB,GAAG,IAAIC,OAAJ,EAA5B;;AACA,QAAMC,oBAAoB,GAAIC,OAAD,IAAa;AACtCA,IAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;AACvB,YAAMC,KAAK,GAAGN,mBAAmB,CAACO,GAApB,CAAwBF,KAAK,CAACG,MAA9B,CAAd;AACA;AACZ;AACA;AACA;;AACY,UAAIH,KAAK,CAACI,cAAN,KAAyBC,OAAO,CAACJ,KAAD,CAApC,EACI;;AACJ,UAAID,KAAK,CAACI,cAAV,EAA0B;AACtB,cAAME,QAAQ,GAAGjB,OAAO,CAACW,KAAD,CAAxB;;AACA,YAAI,OAAOM,QAAP,KAAoB,UAAxB,EAAoC;AAChCX,UAAAA,mBAAmB,CAACY,GAApB,CAAwBP,KAAK,CAACG,MAA9B,EAAsCG,QAAtC;AACH,SAFD,MAGK;AACDE,UAAAA,QAAQ,CAACC,SAAT,CAAmBT,KAAK,CAACG,MAAzB;AACH;AACJ,OARD,MASK,IAAIF,KAAJ,EAAW;AACZA,QAAAA,KAAK,CAACD,KAAD,CAAL;AACAL,QAAAA,mBAAmB,CAACe,MAApB,CAA2BV,KAAK,CAACG,MAAjC;AACH;AACJ,KArBD;AAsBH,GAvBD;;AAwBA,QAAMK,QAAQ,GAAG,IAAIG,oBAAJ,CAAyBd,oBAAzB,EAA+C;AAC5DP,IAAAA,IAD4D;AAE5DE,IAAAA,UAF4D;AAG5DoB,IAAAA,SAAS,EAAE,OAAOnB,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCT,UAAU,CAACS,MAAD;AAHC,GAA/C,CAAjB;AAKAC,EAAAA,QAAQ,CAACK,OAAT,CAAkBc,OAAD,IAAaL,QAAQ,CAACM,OAAT,CAAiBD,OAAjB,CAA9B;AACA,SAAO,MAAML,QAAQ,CAACO,UAAT,EAAb;AACH;;AAED,SAAS5B,MAAT","sourcesContent":["import { resolveElements } from '../utils/resolve-element.mjs';\n\nconst thresholds = {\n    some: 0,\n    all: 1,\n};\nfunction inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = \"some\" } = {}) {\n    const elements = resolveElements(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries) => {\n        entries.forEach((entry) => {\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */\n            if (entry.isIntersecting === Boolean(onEnd))\n                return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                }\n                else {\n                    observer.unobserve(entry.target);\n                }\n            }\n            else if (onEnd) {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount],\n    });\n    elements.forEach((element) => observer.observe(element));\n    return () => observer.disconnect();\n}\n\nexport { inView };\n"]},"metadata":{},"sourceType":"module"}