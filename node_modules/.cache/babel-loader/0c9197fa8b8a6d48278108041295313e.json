{"ast":null,"code":"'use client'; // src/use-popover.ts\n\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useFocusOnHide, useFocusOnShow } from \"@chakra-ui/react-use-focus-effect\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\n\nfunction usePopover() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props;\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  const anchorRef = useRef(null);\n  const triggerRef = useRef(null);\n  const popoverRef = useRef(null);\n  const isHoveringRef = useRef(false);\n  const hasBeenOpened = useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  const [hasHeader, setHasHeader] = useState(false);\n  const [hasBody, setHasBody] = useState(false);\n  const uuid = useId();\n  const uid = id != null ? id : uuid;\n  const [triggerId, popoverId, headerId, bodyId] = [\"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"].map(id2 => `${id2}-${uid}`);\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = usePopper({ ...popperProps,\n    enabled: isOpen || !!computePositionOnMount\n  });\n  const animated = useAnimationState({\n    isOpen,\n    ref: popoverRef\n  });\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  const getPopoverProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const popoverProps = { ...props2,\n      style: { ...props2.style,\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n        [popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      },\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props2.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props2.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const targetIsPopover = contains(popoverRef.current, relatedTarget);\n        const targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        const isValidBlur = !targetIsPopover && !targetIsTrigger;\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : void 0,\n      \"aria-describedby\": hasBody ? bodyId : void 0\n    };\n\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, event => {\n        if (event.nativeEvent.relatedTarget === null) {\n          return;\n        }\n\n        isHoveringRef.current = false;\n        setTimeout(() => onClose(), closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);\n  const getPopoverPositionerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps({ ...props2,\n      style: {\n        visibility: isOpen ? \"visible\" : \"hidden\",\n        ...props2.style\n      }\n    }, forwardedRef);\n  }, [isOpen, getPopperProps]);\n  const getAnchorProps = useCallback(function (props2) {\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    return { ...props2,\n      // If anchor is rendered, it is used as reference.\n      ref: mergeRefs(_ref, anchorRef, referenceRef)\n    };\n  }, [anchorRef, referenceRef]);\n  const openTimeout = useRef();\n  const closeTimeout = useRef();\n  const maybeReferenceRef = useCallback(node => {\n    if (anchorRef.current == null) {\n      referenceRef(node);\n    }\n  }, [referenceRef]);\n  const getTriggerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const triggerProps = { ...props2,\n      ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    };\n\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER.hover) {\n      triggerProps.onFocus = callAllHandlers(props2.onFocus, () => {\n        if (openTimeout.current === void 0) {\n          onOpen();\n        }\n      });\n      triggerProps.onBlur = callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const isValidBlur = !contains(popoverRef.current, relatedTarget);\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      });\n      triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(() => onOpen(), openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  const getHeaderProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      id: headerId,\n      ref: mergeRefs(ref, node => {\n        setHasHeader(!!node);\n      })\n    };\n  }, [headerId]);\n  const getBodyProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      id: bodyId,\n      ref: mergeRefs(ref, node => {\n        setHasBody(!!node);\n      })\n    };\n  }, [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}\n\nfunction contains(parent, child) {\n  return parent === child || (parent == null ? void 0 : parent.contains(child));\n}\n\nfunction getRelatedTarget(event) {\n  var _a;\n\n  const activeEl = event.currentTarget.ownerDocument.activeElement;\n  return (_a = event.relatedTarget) != null ? _a : activeEl;\n}\n\nexport { usePopover };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/popover/src/use-popover.ts"],"names":["id","props"],"mappings":";;AAAA,SAAS,iBAAT,QAAkC,sCAAlC;AACA,SAAS,qBAAT,QAAsC,4CAAtC;AACA,SACE,cADF,EAEE,cAFF,QAGO,mCAHP;AAIA,SAAS,aAAT,QAA8B,iCAA9B;AACA,SAAS,aAAT,EAAwB,SAAxB,QAAyD,mBAAzD;AAEA,SAAS,SAAT,QAA0B,iCAA1B;AACA,SAAS,eAAT,QAAgC,yBAAhC;AACA,SAAS,cAAT,QAAyC,uBAAzC;AACA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,KAAjC,EAAwC,MAAxC,EAAgD,QAAhD,QAAgE,OAAhE;AAEA,IAAM,OAAA,GAAU;AACd,EAAA,KAAA,EAAO,OADO;AAEd,EAAA,KAAA,EAAO;AAFO,CAAhB;;AA0HO,SAAS,UAAT,GAAiD;AAAA,MAA7B,KAA6B,uEAAJ,EAAI;AACtD,QAAM;AACJ,IAAA,WAAA,GAAc,IADV;AAEJ,IAAA,UAAA,GAAa,IAFT;AAGJ,IAAA,eAHI;AAIJ,IAAA,EAJI;AAKJ,IAAA,kBAAA,GAAqB,IALjB;AAMJ,IAAA,SAAA,GAAY,IANR;AAOJ,IAAA,SAPI;AAQJ,IAAA,gBARI;AASJ,IAAA,OAAA,GAAU,OAAA,CAAQ,KATd;AAUJ,IAAA,SAAA,GAAY,GAVR;AAWJ,IAAA,UAAA,GAAa,GAXT;AAYJ,IAAA,MAZI;AAaJ,IAAA,YAAA,GAAe,SAbX;AAcJ,IAAA,sBAdI;AAeJ,OAAG;AAfC,MAgBF,KAhBJ;AAkBA,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA,OAAV;AAAmB,IAAA,MAAnB;AAA2B,IAAA;AAA3B,MAAwC,aAAA,CAAc,KAAd,CAA9C;AAEA,QAAM,SAAA,GAAY,MAAA,CAAoB,IAApB,CAAlB;AACA,QAAM,UAAA,GAAa,MAAA,CAAoB,IAApB,CAAnB;AACA,QAAM,UAAA,GAAa,MAAA,CAAoB,IAApB,CAAnB;AAEA,QAAM,aAAA,GAAgB,MAAA,CAAO,KAAP,CAAtB;AAEA,QAAM,aAAA,GAAgB,MAAA,CAAO,KAAP,CAAtB;;AACA,MAAI,MAAJ,EAAY;AACV,IAAA,aAAA,CAAc,OAAd,GAAwB,IAAxB;AACF;;AAEA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAA,CAAS,KAAT,CAAlC;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAA,CAAS,KAAT,CAA9B;AAEA,QAAM,IAAA,GAAO,KAAA,EAAb;AACA,QAAM,GAAA,GAAM,EAAA,IAAA,IAAA,GAAA,EAAA,GAAM,IAAlB;AACA,QAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,MAAjC,IAA2C,CAC/C,iBAD+C,EAE/C,iBAF+C,EAG/C,gBAH+C,EAI/C,cAJ+C,EAK/C,GAL+C,CAK1CA,GAAD,IAAQ,GAAGA,GAAE,IAAI,GAAG,EALuB,CAAjD;AAOA,QAAM;AACJ,IAAA,YADI;AAEJ,IAAA,aAFI;AAGJ,IAAA,cAHI;AAIJ,IAAA,kBAJI;AAKJ,IAAA;AALI,MAMF,SAAA,CAAU,EACZ,GAAG,WADS;AAEZ,IAAA,OAAA,EAAS,MAAA,IAAU,CAAC,CAAC;AAFT,GAAV,CANJ;AAWA,QAAM,QAAA,GAAW,iBAAA,CAAkB;AAAE,IAAA,MAAF;AAAU,IAAA,GAAA,EAAK;AAAf,GAAlB,CAAjB;AAEA,EAAA,qBAAA,CAAsB;AACpB,IAAA,OAAA,EAAS,MADW;AAEpB,IAAA,GAAA,EAAK;AAFe,GAAtB,CAAA;AAKA,EAAA,cAAA,CAAe,UAAf,EAA2B;AACzB,IAAA,QAAA,EAAU,UADe;AAEzB,IAAA,OAAA,EAAS,MAFgB;AAGzB,IAAA,WAAA,EAAa,kBAAA,IAAsB,OAAA,KAAY,OAAA,CAAQ;AAH9B,GAA3B,CAAA;AAMA,EAAA,cAAA,CAAe,UAAf,EAA2B;AACzB,IAAA,QAAA,EAAU,eADe;AAEzB,IAAA,OAAA,EAAS,MAFgB;AAGzB,IAAA,WAAA,EAAa,SAAA,IAAa,OAAA,KAAY,OAAA,CAAQ;AAHrB,GAA3B,CAAA;AAMA,QAAM,oBAAA,GAAuB,cAAA,CAAe;AAC1C,IAAA,WAAA,EAAa,aAAA,CAAc,OADe;AAE1C,IAAA,OAAA,EAAS,MAFiC;AAG1C,IAAA,IAAA,EAAM,YAHoC;AAI1C,IAAA,UAAA,EAAY,QAAA,CAAS;AAJqB,GAAf,CAA7B;AAOA,QAAM,eAAA,GAA8B,WAAA,CAClC,YAA6B;AAAA,QAA5BC,MAA4B,uEAApB,EAAoB;;AAAA,QAAhB,IAAgB,uEAAT,IAAS;;AAC3B,UAAM,YAAA,GAA8B,EAClC,GAAG,MAD+B;AAElC,MAAA,KAAA,EAAO,EACL,GAAGA,MAAAA,CAAM,KADJ;AAEL,QAAA,eAAA,EAAiB,aAAA,CAAc,eAAd,CAA8B,MAF1C;AAGL,SAAC,aAAA,CAAc,SAAd,CAAwB,GAAzB,GAA+B,SAAA,GAC3B,GAAG,SAAS,IADe,GAE3B,KAAA,CALC;AAML,SAAC,aAAA,CAAc,gBAAd,CAA+B,GAAhC,GAAsC;AANjC,OAF2B;AAUlC,MAAA,GAAA,EAAK,SAAA,CAAU,UAAV,EAAsB,IAAtB,CAV6B;AAWlC,MAAA,QAAA,EAAU,oBAAA,GAAuBA,MAAAA,CAAM,QAA7B,GAAwC,IAXhB;AAYlC,MAAA,EAAA,EAAI,SAZ8B;AAalC,MAAA,QAAA,EAAU,CAAA,CAbwB;AAclC,MAAA,IAAA,EAAM,QAd4B;AAelC,MAAA,SAAA,EAAW,eAAA,CAAgBA,MAAAA,CAAM,SAAtB,EAAkC,KAAD,IAAW;AACrD,YAAI,UAAA,IAAc,KAAA,CAAM,GAAN,KAAc,QAAhC,EAA0C;AACxC,UAAA,OAAA;AACF;AACD,OAJU,CAfuB;AAoBlC,MAAA,MAAA,EAAQ,eAAA,CAAgBA,MAAAA,CAAM,MAAtB,EAA+B,KAAD,IAAW;AAC/C,cAAM,aAAA,GAAgB,gBAAA,CAAiB,KAAjB,CAAtB;AACA,cAAM,eAAA,GAAkB,QAAA,CAAS,UAAA,CAAW,OAApB,EAA6B,aAA7B,CAAxB;AACA,cAAM,eAAA,GAAkB,QAAA,CAAS,UAAA,CAAW,OAApB,EAA6B,aAA7B,CAAxB;AAEA,cAAM,WAAA,GAAc,CAAC,eAAD,IAAoB,CAAC,eAAzC;;AAEA,YAAI,MAAA,IAAU,WAAV,IAAyB,WAA7B,EAA0C;AACxC,UAAA,OAAA;AACF;AACD,OAVO,CApB0B;AA+BlC,yBAAmB,SAAA,GAAY,QAAZ,GAAuB,KAAA,CA/BR;AAgClC,0BAAoB,OAAA,GAAU,MAAV,GAAmB,KAAA;AAhCL,KAApC;;AAmCA,QAAI,OAAA,KAAY,OAAA,CAAQ,KAAxB,EAA+B;AAC7B,MAAA,YAAA,CAAa,IAAb,GAAoB,SAApB;AACA,MAAA,YAAA,CAAa,YAAb,GAA4B,eAAA,CAAgBA,MAAAA,CAAM,YAAtB,EAAoC,MAAM;AACpE,QAAA,aAAA,CAAc,OAAd,GAAwB,IAAxB;AACD,OAF2B,CAA5B;AAGA,MAAA,YAAA,CAAa,YAAb,GAA4B,eAAA,CAC1BA,MAAAA,CAAM,YADoB,EAEzB,KAAD,IAAW;AAET,YAAI,KAAA,CAAM,WAAN,CAAkB,aAAlB,KAAoC,IAAxC,EAA8C;AAC5C;AACF;;AACA,QAAA,aAAA,CAAc,OAAd,GAAwB,KAAxB;AACA,QAAA,UAAA,CAAW,MAAM,OAAA,EAAjB,EAA4B,UAA5B,CAAA;AACF,OAT0B,CAA5B;AAWF;;AAEA,WAAO,YAAP;AACF,GAxDkC,EAyDlC,CACE,oBADF,EAEE,SAFF,EAGE,SAHF,EAIE,QAJF,EAKE,OALF,EAME,MANF,EAOE,OAPF,EAQE,UARF,EASE,OATF,EAUE,MAVF,EAWE,WAXF,EAYE,UAZF,EAaE,gBAbF,EAcE,SAdF,CAzDkC,CAApC;AA2EA,QAAM,yBAAA,GAAwC,WAAA,CAC5C;AAAA,QAACA,MAAD,uEAAS,EAAT;AAAA,QAAa,YAAb,uEAA4B,IAA5B;AAAA,WACE,cAAA,CACE,EACE,GAAG,MADL;AAEE,MAAA,KAAA,EAAO;AACL,QAAA,UAAA,EAAY,MAAA,GAAS,SAAT,GAAqB,QAD5B;AAEL,WAAGA,MAAAA,CAAM;AAFJ;AAFT,KADF,EAQE,YARF,CADF;AAAA,GAD4C,EAY5C,CAAC,MAAD,EAAS,cAAT,CAZ4C,CAA9C;AAeA,QAAM,cAAA,GAA6B,WAAA,CACjC,UAACA,MAAD,EAAwB;AAAA,QAAhB,IAAgB,uEAAT,IAAS;;AACtB,WAAO,EACL,GAAG,MADE;AACF;AAEH,MAAA,GAAA,EAAK,SAAA,CAAU,IAAV,EAAgB,SAAhB,EAA2B,YAA3B;AAHA,KAAP;AAKF,GAPiC,EAQjC,CAAC,SAAD,EAAY,YAAZ,CARiC,CAAnC;AAWA,QAAM,WAAA,GAAc,MAAA,EAApB;AACA,QAAM,YAAA,GAAe,MAAA,EAArB;AAEA,QAAM,iBAAA,GAAoB,WAAA,CACvB,IAAD,IAAmB;AAEjB,QAAI,SAAA,CAAU,OAAV,IAAqB,IAAzB,EAA+B;AAC7B,MAAA,YAAA,CAAa,IAAb,CAAA;AACF;AACF,GANwB,EAOxB,CAAC,YAAD,CAPwB,CAA1B;AAUA,QAAM,eAAA,GAA8B,WAAA,CAClC,YAA6B;AAAA,QAA5BA,MAA4B,uEAApB,EAAoB;;AAAA,QAAhB,IAAgB,uEAAT,IAAS;;AAC3B,UAAM,YAAA,GAA8B,EAClC,GAAG,MAD+B;AAElC,MAAA,GAAA,EAAK,SAAA,CAAU,UAAV,EAAsB,IAAtB,EAA4B,iBAA5B,CAF6B;AAGlC,MAAA,EAAA,EAAI,SAH8B;AAIlC,uBAAiB,QAJiB;AAKlC,uBAAiB,MALiB;AAMlC,uBAAiB;AANiB,KAApC;;AASA,QAAI,OAAA,KAAY,OAAA,CAAQ,KAAxB,EAA+B;AAC7B,MAAA,YAAA,CAAa,OAAb,GAAuB,eAAA,CAAgBA,MAAAA,CAAM,OAAtB,EAA+B,QAA/B,CAAvB;AACF;;AAEA,QAAI,OAAA,KAAY,OAAA,CAAQ,KAAxB,EAA+B;AAO7B,MAAA,YAAA,CAAa,OAAb,GAAuB,eAAA,CAAgBA,MAAAA,CAAM,OAAtB,EAA+B,MAAM;AAE1D,YAAI,WAAA,CAAY,OAAZ,KAAwB,KAAA,CAA5B,EAAuC;AACrC,UAAA,MAAA;AACF;AACD,OALsB,CAAvB;AAMA,MAAA,YAAA,CAAa,MAAb,GAAsB,eAAA,CAAgBA,MAAAA,CAAM,MAAtB,EAA+B,KAAD,IAAW;AAC7D,cAAM,aAAA,GAAgB,gBAAA,CAAiB,KAAjB,CAAtB;AACA,cAAM,WAAA,GAAc,CAAC,QAAA,CAAS,UAAA,CAAW,OAApB,EAA6B,aAA7B,CAArB;;AAEA,YAAI,MAAA,IAAU,WAAV,IAAyB,WAA7B,EAA0C;AACxC,UAAA,OAAA;AACF;AACD,OAPqB,CAAtB;AAaA,MAAA,YAAA,CAAa,SAAb,GAAyB,eAAA,CAAgBA,MAAAA,CAAM,SAAtB,EAAkC,KAAD,IAAW;AACnE,YAAI,KAAA,CAAM,GAAN,KAAc,QAAlB,EAA4B;AAC1B,UAAA,OAAA;AACF;AACD,OAJwB,CAAzB;AAMA,MAAA,YAAA,CAAa,YAAb,GAA4B,eAAA,CAAgBA,MAAAA,CAAM,YAAtB,EAAoC,MAAM;AACpE,QAAA,aAAA,CAAc,OAAd,GAAwB,IAAxB;AACA,QAAA,WAAA,CAAY,OAAZ,GAAsB,MAAA,CAAO,UAAP,CAAkB,MAAM,MAAA,EAAxB,EAAkC,SAAlC,CAAtB;AACD,OAH2B,CAA5B;AAKA,MAAA,YAAA,CAAa,YAAb,GAA4B,eAAA,CAAgBA,MAAAA,CAAM,YAAtB,EAAoC,MAAM;AACpE,QAAA,aAAA,CAAc,OAAd,GAAwB,KAAxB;;AAEA,YAAI,WAAA,CAAY,OAAhB,EAAyB;AACvB,UAAA,YAAA,CAAa,WAAA,CAAY,OAAzB,CAAA;AACA,UAAA,WAAA,CAAY,OAAZ,GAAsB,KAAA,CAAtB;AACF;;AAEA,QAAA,YAAA,CAAa,OAAb,GAAuB,MAAA,CAAO,UAAP,CAAkB,MAAM;AAC7C,cAAI,aAAA,CAAc,OAAd,KAA0B,KAA9B,EAAqC;AACnC,YAAA,OAAA;AACF;AACF,SAJuB,EAIpB,UAJoB,CAAvB;AAKD,OAb2B,CAA5B;AAcF;;AAEA,WAAO,YAAP;AACF,GArEkC,EAsElC,CACE,SADF,EAEE,MAFF,EAGE,SAHF,EAIE,OAJF,EAKE,iBALF,EAME,QANF,EAOE,MAPF,EAQE,WARF,EASE,OATF,EAUE,SAVF,EAWE,UAXF,CAtEkC,CAApC;AAqFA,EAAA,SAAA,CAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAI,WAAA,CAAY,OAAhB,EAAyB;AACvB,QAAA,YAAA,CAAa,WAAA,CAAY,OAAzB,CAAA;AACF;;AACA,UAAI,YAAA,CAAa,OAAjB,EAA0B;AACxB,QAAA,YAAA,CAAa,YAAA,CAAa,OAA1B,CAAA;AACF;AACF,KAPA;AAQF,GATA,EASG,EATH,CAAA;AAWA,QAAM,cAAA,GAA6B,WAAA,CACjC;AAAA,QAACA,MAAD,uEAAS,EAAT;AAAA,QAAa,GAAb,uEAAmB,IAAnB;AAAA,WAA6B,EAC3B,GAAG,MADwB;AAE3B,MAAA,EAAA,EAAI,QAFuB;AAG3B,MAAA,GAAA,EAAK,SAAA,CAAU,GAAV,EAAgB,IAAD,IAA8B;AAChD,QAAA,YAAA,CAAa,CAAC,CAAC,IAAf,CAAA;AACD,OAFI;AAHsB,KAA7B;AAAA,GADiC,EAQjC,CAAC,QAAD,CARiC,CAAnC;AAWA,QAAM,YAAA,GAA2B,WAAA,CAC/B;AAAA,QAACA,MAAD,uEAAS,EAAT;AAAA,QAAa,GAAb,uEAAmB,IAAnB;AAAA,WAA6B,EAC3B,GAAG,MADwB;AAE3B,MAAA,EAAA,EAAI,MAFuB;AAG3B,MAAA,GAAA,EAAK,SAAA,CAAU,GAAV,EAAgB,IAAD,IAAU;AAC5B,QAAA,UAAA,CAAW,CAAC,CAAC,IAAb,CAAA;AACD,OAFI;AAHsB,KAA7B;AAAA,GAD+B,EAQ/B,CAAC,MAAD,CAR+B,CAAjC;AAWA,SAAO;AACL,IAAA,WADK;AAEL,IAAA,MAFK;AAGL,IAAA,mBAAA,EAAqB,QAAA,CAAS,UAHzB;AAIL,IAAA,OAJK;AAKL,IAAA,cALK;AAML,IAAA,aANK;AAOL,IAAA,kBAPK;AAQL,IAAA,yBARK;AASL,IAAA,eATK;AAUL,IAAA,eAVK;AAWL,IAAA,cAXK;AAYL,IAAA;AAZK,GAAP;AAcF;;AAIA,SAAS,QAAT,CAAkB,MAAlB,EAA8C,KAA9C,EAAyE;AACvE,SAAO,MAAA,KAAW,KAAX,KAAoB,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,QAAR,CAAiB,KAAjB,CAApB,CAAP;AACF;;AAEA,SAAS,gBAAT,CAA0B,KAA1B,EAAmD;AAvdnD,MAAA,EAAA;;AAwdE,QAAM,QAAA,GAAW,KAAA,CAAM,aAAN,CAAoB,aAApB,CAAkC,aAAnD;AACA,SAAA,CAAQ,EAAA,GAAA,KAAA,CAAM,aAAd,KAAQ,IAAR,GAAQ,EAAR,GAA+B,QAA/B;AACF","sourcesContent":["import { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n} from \"@chakra-ui/react-use-focus-effect\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { DOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends Omit<UsePopperProps, \"enabled\"> {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   *\n   * @default \"click\"\n   */\n  trigger?: keyof typeof TRIGGER\n  /**\n   * Delay in milliseconds before the popover opens after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * Delay in milliseconds before the popover closes after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `true`, the popover will be positioned when it mounts\n   * (even if it's not open)\n   *\n   * Note 🚨: We don't recommend using this in a popover/menu intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const [triggerId, popoverId, headerId, bodyId] = [\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  ].map((id) => `${id}-${uid}`)\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount,\n  })\n\n  const animated = useAnimationState({ isOpen, ref: popoverRef })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: DOMAttributes = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n          [popperCSSVars.arrowSize.var]: arrowSize\n            ? `${arrowSize}px`\n            : undefined,\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(\n          props.onMouseLeave,\n          (event) => {\n            // https://stackoverflow.com/questions/46831247/select-triggers-mouseleave-event-on-parent-element-in-mozilla-firefox\n            if (event.nativeEvent.relatedTarget === null) {\n              return\n            }\n            isHoveringRef.current = false\n            setTimeout(() => onClose(), closeDelay)\n          },\n        )\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n      arrowShadowColor,\n      arrowSize,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [isOpen, getPopperProps],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props, _ref = null) => {\n      return {\n        ...props,\n        // If anchor is rendered, it is used as reference.\n        ref: mergeRefs(_ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      // Don't override referenceRef in case the PopoverAnchor is rendered.\n      if (anchorRef.current == null) {\n        referenceRef(node)\n      }\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, () => {\n          // If openTimeout.current does not exist, the user is using keyboard focus (not mouse hover/click)\n          if (openTimeout.current === undefined) {\n            onOpen()\n          }\n        })\n        triggerProps.onBlur = callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const isValidBlur = !contains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        })\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(() => onOpen(), openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      maybeReferenceRef,\n      onToggle,\n      onOpen,\n      closeOnBlur,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement | null) {\n  return parent === child || parent?.contains(child)\n}\n\nfunction getRelatedTarget(event: React.FocusEvent) {\n  const activeEl = event.currentTarget.ownerDocument.activeElement\n  return (event.relatedTarget ?? activeEl) as HTMLElement | null\n}\n"]},"metadata":{},"sourceType":"module"}