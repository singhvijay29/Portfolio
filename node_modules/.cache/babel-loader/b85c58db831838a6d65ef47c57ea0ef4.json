{"ast":null,"code":"import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n  return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\n\nfunction keyframes(_ref) {\n  let {\n    duration = 300,\n    keyframes: keyframeValues,\n    times,\n    ease = \"easeInOut\"\n  } = _ref;\n\n  /**\n   * Easing functions can be externally defined as strings. Here we convert them\n   * into actual functions.\n   */\n  const easingFunctions = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n\n  const state = {\n    done: false,\n    value: keyframeValues[0]\n  };\n  /**\n   * Create a times array based on the provided 0-1 offsets\n   */\n\n  const absoluteTimes = convertOffsetToTimes( // Only use the provided offsets if they're the correct length\n  // TODO Maybe we should warn here if there's a length mismatch\n  times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues), duration);\n  const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)\n  });\n  return {\n    calculatedDuration: duration,\n    next: t => {\n      state.value = mapTimeToKeyframe(t);\n      state.done = t >= duration;\n      return state;\n    }\n  };\n}\n\nexport { defaultEasing, keyframes };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs"],"names":["easeInOut","isEasingArray","easingDefinitionToFunction","interpolate","defaultOffset","convertOffsetToTimes","defaultEasing","values","easing","map","splice","length","keyframes","duration","keyframeValues","times","ease","easingFunctions","state","done","value","absoluteTimes","mapTimeToKeyframe","Array","isArray","calculatedDuration","next","t"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,aAAT,QAA8B,wCAA9B;AACA,SAASC,0BAAT,QAA2C,4BAA3C;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;AACnC,SAAOD,MAAM,CAACE,GAAP,CAAW,MAAMD,MAAM,IAAIR,SAA3B,EAAsCU,MAAtC,CAA6C,CAA7C,EAAgDH,MAAM,CAACI,MAAP,GAAgB,CAAhE,CAAP;AACH;;AACD,SAASC,SAAT,OAA8F;AAAA,MAA3E;AAAEC,IAAAA,QAAQ,GAAG,GAAb;AAAkBD,IAAAA,SAAS,EAAEE,cAA7B;AAA6CC,IAAAA,KAA7C;AAAoDC,IAAAA,IAAI,GAAG;AAA3D,GAA2E;;AAC1F;AACJ;AACA;AACA;AACI,QAAMC,eAAe,GAAGhB,aAAa,CAACe,IAAD,CAAb,GAClBA,IAAI,CAACP,GAAL,CAASP,0BAAT,CADkB,GAElBA,0BAA0B,CAACc,IAAD,CAFhC;AAGA;AACJ;AACA;AACA;;AACI,QAAME,KAAK,GAAG;AACVC,IAAAA,IAAI,EAAE,KADI;AAEVC,IAAAA,KAAK,EAAEN,cAAc,CAAC,CAAD;AAFX,GAAd;AAIA;AACJ;AACA;;AACI,QAAMO,aAAa,GAAGhB,oBAAoB,EAC1C;AACA;AACAU,EAAAA,KAAK,IAAIA,KAAK,CAACJ,MAAN,KAAiBG,cAAc,CAACH,MAAzC,GACMI,KADN,GAEMX,aAAa,CAACU,cAAD,CALuB,EAKLD,QALK,CAA1C;AAMA,QAAMS,iBAAiB,GAAGnB,WAAW,CAACkB,aAAD,EAAgBP,cAAhB,EAAgC;AACjEE,IAAAA,IAAI,EAAEO,KAAK,CAACC,OAAN,CAAcP,eAAd,IACAA,eADA,GAEAX,aAAa,CAACQ,cAAD,EAAiBG,eAAjB;AAH8C,GAAhC,CAArC;AAKA,SAAO;AACHQ,IAAAA,kBAAkB,EAAEZ,QADjB;AAEHa,IAAAA,IAAI,EAAGC,CAAD,IAAO;AACTT,MAAAA,KAAK,CAACE,KAAN,GAAcE,iBAAiB,CAACK,CAAD,CAA/B;AACAT,MAAAA,KAAK,CAACC,IAAN,GAAaQ,CAAC,IAAId,QAAlB;AACA,aAAOK,KAAP;AACH;AANE,GAAP;AAQH;;AAED,SAASZ,aAAT,EAAwBM,SAAxB","sourcesContent":["import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n"]},"metadata":{},"sourceType":"module"}