{"ast":null,"code":"'use client'; // src/use-event-listener-map.ts\n\nimport { getPointerEventName, wrapPointerEventHandler } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\n\nfunction useEventListenerMap() {\n  const listeners = useRef( /* @__PURE__ */new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  const remove = useCallback((el, type, listener, options) => {\n    const {\n      __listener: pointerEventListener\n    } = listeners.current.get(listener);\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}\n\nexport { useEventListenerMap };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-event-listener-map.ts"],"names":[],"mappings":";;AAAA,SAEE,mBAFF,EAGE,uBAHF,QAKO,kBALP;AAMA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,MAAjC,QAA+C,OAA/C;;AA6BO,SAAS,mBAAT,GAA+C;AACpD,QAAM,SAAA,GAAY,MAAA,EAAO,eAAA,IAAI,GAAJ,EAAP,CAAlB;AACA,QAAM,gBAAA,GAAmB,SAAA,CAAU,OAAnC;AAEA,QAAM,GAAA,GAAM,WAAA,CAAY,CAAC,EAAD,EAAU,IAAV,EAAqB,QAArB,EAAoC,OAApC,KAAqD;AAC3E,UAAM,oBAAA,GAAuB,uBAAA,CAC3B,QAD2B,EAE3B,IAAA,KAAS,aAFkB,CAA7B;AAIA,IAAA,SAAA,CAAU,OAAV,CAAkB,GAAlB,CAAsB,QAAtB,EAAgC;AAC9B,MAAA,UAAA,EAAY,oBADkB;AAE9B,MAAA,IAAA,EAAM,mBAAA,CAAoB,IAApB,CAFwB;AAG9B,MAAA,EAH8B;AAI9B,MAAA;AAJ8B,KAAhC;AAMA,IAAA,EAAA,CAAG,gBAAH,CAAoB,IAApB,EAA0B,oBAA1B,EAAgD,OAAhD;AACF,GAZY,EAYT,EAZS,CAAZ;AAcA,QAAM,MAAA,GAAS,WAAA,CACb,CAAC,EAAD,EAAU,IAAV,EAAqB,QAArB,EAAoC,OAApC,KAAqD;AACnD,UAAM;AAAE,MAAA,UAAA,EAAY;AAAd,QACJ,SAAA,CAAU,OAAV,CAAkB,GAAlB,CAAsB,QAAtB,CADF;AAEA,IAAA,EAAA,CAAG,mBAAH,CAAuB,IAAvB,EAA6B,oBAA7B,EAAmD,OAAnD;AACA,IAAA,SAAA,CAAU,OAAV,CAAkB,MAAlB,CAAyB,oBAAzB;AACF,GANa,EAOb,EAPa,CAAf;AAUA,EAAA,SAAA,CACE,MAAM,MAAM;AACV,IAAA,gBAAA,CAAiB,OAAjB,CAAyB,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACvC,MAAA,MAAA,CAAO,KAAA,CAAM,EAAb,EAAiB,KAAA,CAAM,IAAvB,EAA6B,GAA7B,EAAkC,KAAA,CAAM,OAAxC,CAAA;AACD,KAFD;AAGF,GALF,EAME,CAAC,MAAD,EAAS,gBAAT,CANF,CAAA;AASA,SAAO;AAAE,IAAA,GAAF;AAAO,IAAA;AAAP,GAAP;AACF","sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      const { __listener: pointerEventListener } =\n        listeners.current.get(listener)\n      el.removeEventListener(type, pointerEventListener, options)\n      listeners.current.delete(pointerEventListener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}