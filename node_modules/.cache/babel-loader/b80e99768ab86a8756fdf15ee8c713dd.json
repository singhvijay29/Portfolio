{"ast":null,"code":"'use client';\n\nimport { __publicField } from \"./chunk-5WQ4PXEV.mjs\"; // src/modal-manager.ts\n\nimport { useEffect, useState } from \"react\";\nvar ModalManager = class {\n  constructor() {\n    __publicField(this, \"modals\");\n\n    this.modals = /* @__PURE__ */new Map();\n  }\n\n  add(modal) {\n    this.modals.set(modal, this.modals.size + 1);\n    return this.modals.size;\n  }\n\n  remove(modal) {\n    this.modals.delete(modal);\n  }\n\n  isTopModal(modal) {\n    if (!modal) return false;\n    return this.modals.get(modal) === this.modals.size;\n  }\n\n};\nvar modalManager = new ModalManager();\n\nfunction useModalManager(ref, isOpen) {\n  const [index, setIndex] = useState(0);\n  useEffect(() => {\n    const node = ref.current;\n    if (!node) return;\n\n    if (isOpen) {\n      const index2 = modalManager.add(node);\n      setIndex(index2);\n    }\n\n    return () => {\n      modalManager.remove(node);\n      setIndex(0);\n    };\n  }, [isOpen, ref]);\n  return index;\n}\n\nexport { modalManager, useModalManager };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/modal/src/modal-manager.ts"],"names":["index"],"mappings":";;;;AAAA,SAAoB,SAApB,EAA+B,QAA/B,QAA+C,OAA/C;AAMA,IAAM,YAAA,GAAN,MAAmB;AAEjB,EAAA,WAAA,GAAc;AADd,IAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAEE,SAAK,MAAL,GAAc,eAAA,IAAI,GAAJ,EAAd;AACF;;AAEA,EAAA,GAAA,CAAI,KAAJ,EAAwB;AACtB,SAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,EAAuB,KAAK,MAAL,CAAY,IAAZ,GAAmB,CAA1C;AACA,WAAO,KAAK,MAAL,CAAY,IAAnB;AACF;;AAEA,EAAA,MAAA,CAAO,KAAP,EAA2B;AACzB,SAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB;AACF;;AAEA,EAAA,UAAA,CAAW,KAAX,EAAsC;AACpC,QAAI,CAAC,KAAL,EAAY,OAAO,KAAP;AACZ,WAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,MAA2B,KAAK,MAAL,CAAY,IAA9C;AACF;;AAlBiB,CAAnB;AAqBO,IAAM,YAAA,GAAe,IAAI,YAAJ,EAArB;;AAEA,SAAS,eAAT,CAAyB,GAAzB,EAAsD,MAAtD,EAAwE;AAC7E,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAA,CAAS,CAAT,CAA1B;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,UAAM,IAAA,GAAO,GAAA,CAAI,OAAjB;AAEA,QAAI,CAAC,IAAL,EAAW;;AAEX,QAAI,MAAJ,EAAY;AACV,YAAMA,MAAAA,GAAQ,YAAA,CAAa,GAAb,CAAiB,IAAjB,CAAd;AACA,MAAA,QAAA,CAASA,MAAT,CAAA;AACF;;AAEA,WAAO,MAAM;AACX,MAAA,YAAA,CAAa,MAAb,CAAoB,IAApB;AACA,MAAA,QAAA,CAAS,CAAT,CAAA;AACF,KAHA;AAIF,GAdA,EAcG,CAAC,MAAD,EAAS,GAAT,CAdH,CAAA;AAgBA,SAAO,KAAP;AACF","sourcesContent":["import { RefObject, useEffect, useState } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: Map<HTMLElement, number>\n  constructor() {\n    this.modals = new Map()\n  }\n\n  add(modal: HTMLElement) {\n    this.modals.set(modal, this.modals.size + 1)\n    return this.modals.size\n  }\n\n  remove(modal: HTMLElement) {\n    this.modals.delete(modal)\n  }\n\n  isTopModal(modal: HTMLElement | null) {\n    if (!modal) return false\n    return this.modals.get(modal) === this.modals.size\n  }\n}\n\nexport const modalManager = new ModalManager()\n\nexport function useModalManager(ref: RefObject<HTMLElement>, isOpen?: boolean) {\n  const [index, setIndex] = useState(0)\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node) return\n\n    if (isOpen) {\n      const index = modalManager.add(node)\n      setIndex(index)\n    }\n\n    return () => {\n      modalManager.remove(node)\n      setIndex(0)\n    }\n  }, [isOpen, ref])\n\n  return index\n}\n"]},"metadata":{},"sourceType":"module"}