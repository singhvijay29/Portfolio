{"ast":null,"code":"'use client';\n\nimport { Box } from \"./chunk-PULVB27S.mjs\"; // src/highlight.tsx\n\nimport { forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { Fragment, useMemo } from \"react\";\nimport { Fragment as Fragment2, jsx } from \"react/jsx-runtime\";\n\nvar escapeRegexp = term => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, char => `\\\\${char}`);\n\nfunction buildRegex(query) {\n  const _query = query.filter(text => text.length !== 0).map(text => escapeRegexp(text.trim()));\n\n  if (!_query.length) {\n    return null;\n  }\n\n  return new RegExp(`(${_query.join(\"|\")})`, \"ig\");\n}\n\nfunction highlightWords(_ref) {\n  let {\n    text,\n    query\n  } = _ref;\n  const regex = buildRegex(Array.isArray(query) ? query : [query]);\n\n  if (!regex) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n\n  const result = text.split(regex).filter(Boolean);\n  return result.map(str => ({\n    text: str,\n    match: regex.test(str)\n  }));\n}\n\nfunction useHighlight(props) {\n  const {\n    text,\n    query\n  } = props;\n  return useMemo(() => highlightWords({\n    text,\n    query\n  }), [text, query]);\n}\n\nvar Mark = forwardRef(function Mark2(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props);\n  const ownProps = omitThemingProps(props);\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    ...ownProps,\n    as: \"mark\",\n    __css: {\n      bg: \"transparent\",\n      whiteSpace: \"nowrap\",\n      ...styles\n    }\n  });\n});\n\nfunction Highlight(props) {\n  const {\n    children,\n    query,\n    styles\n  } = props;\n\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\");\n  }\n\n  const chunks = useHighlight({\n    query,\n    text: children\n  });\n  return /* @__PURE__ */jsx(Fragment2, {\n    children: chunks.map((chunk, index) => {\n      return chunk.match ? /* @__PURE__ */jsx(Mark, {\n        sx: styles,\n        children: chunk.text\n      }, index) : /* @__PURE__ */jsx(Fragment, {\n        children: chunk.text\n      }, index);\n    })\n  });\n}\n\nexport { useHighlight, Mark, Highlight };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/layout/src/highlight.tsx"],"names":["Mark"],"mappings":"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","sourcesContent":["import {\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { Fragment, useMemo } from \"react\"\nimport { Box } from \"./box\"\n\ntype Chunk = {\n  text: string\n  match: boolean\n}\n\ntype HighlightOptions = {\n  text: string\n  query: string | string[]\n}\n\nconst escapeRegexp = (term: string): string =>\n  term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char: string) => `\\\\${char}`)\n\nfunction buildRegex(query: string[]) {\n  const _query = query\n    .filter((text) => text.length !== 0)\n    .map((text) => escapeRegexp(text.trim()))\n  if (!_query.length) {\n    return null\n  }\n\n  return new RegExp(`(${_query.join(\"|\")})`, \"ig\")\n}\n\nfunction highlightWords({ text, query }: HighlightOptions): Chunk[] {\n  const regex = buildRegex(Array.isArray(query) ? query : [query])\n  if (!regex) {\n    return [{ text, match: false }]\n  }\n  const result = text.split(regex).filter(Boolean)\n  return result.map((str) => ({ text: str, match: regex.test(str) }))\n}\n\nexport type UseHighlightProps = HighlightOptions\n\nexport function useHighlight(props: UseHighlightProps) {\n  const { text, query } = props\n  return useMemo(() => highlightWords({ text, query }), [text, query])\n}\n\nexport type HighlightProps = {\n  query: string | string[]\n  children: string | ((props: Chunk[]) => React.ReactNode)\n  styles?: SystemStyleObject\n}\n\nexport type MarkProps = ThemingProps<\"Mark\"> & HTMLChakraProps<\"mark\">\n\nexport const Mark = forwardRef<MarkProps, \"mark\">(function Mark(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props)\n  const ownProps = omitThemingProps(props)\n  return (\n    <Box\n      ref={ref}\n      {...ownProps}\n      as=\"mark\"\n      __css={{ bg: \"transparent\", whiteSpace: \"nowrap\", ...styles }}\n    />\n  )\n})\n\n/**\n * `Highlight` allows you to highlight substrings of a text.\n *\n * @see Docs https://chakra-ui.com/docs/components/highlight\n */\nexport function Highlight(props: HighlightProps): JSX.Element {\n  const { children, query, styles } = props\n\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\")\n  }\n\n  const chunks = useHighlight({ query, text: children })\n\n  return (\n    <>\n      {chunks.map((chunk, index) => {\n        return chunk.match ? (\n          <Mark key={index} sx={styles}>\n            {chunk.text}\n          </Mark>\n        ) : (\n          <Fragment key={index}>{chunk.text}</Fragment>\n        )\n      })}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}