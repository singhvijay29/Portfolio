{"ast":null,"code":"'use client'; // src/use-image.ts\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction useImage(props) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  const [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src) return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return void 0;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\n\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n\nexport { useImage, shouldShowFallbackImage };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/image/src/use-image.ts"],"names":[],"mappings":";;AAAA,SAAS,mBAAT,QAAoC,yCAApC;AACA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,MAAjC,EAAyC,QAAzC,QAAyD,OAAzD;;AA6DO,SAAS,QAAT,CAAkB,KAAlB,EAAwC;AAC7C,QAAM;AACJ,IAAA,OADI;AAEJ,IAAA,GAFI;AAGJ,IAAA,MAHI;AAIJ,IAAA,MAJI;AAKJ,IAAA,OALI;AAMJ,IAAA,WANI;AAOJ,IAAA,KAPI;AAQJ,IAAA;AARI,MASF,KATJ;AAWA,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAA,CAAiB,SAAjB,CAA5B;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,SAAA,CAAU,GAAA,GAAM,SAAN,GAAkB,SAA5B,CAAA;AACF,GAFA,EAEG,CAAC,GAAD,CAFH,CAAA;AAIA,QAAM,QAAA,GAAW,MAAA,EAAjB;AAEA,QAAM,IAAA,GAAO,WAAA,CAAY,MAAM;AAC7B,QAAI,CAAC,GAAL,EAAU;AAEV,IAAA,KAAA;AAEA,UAAM,GAAA,GAAM,IAAI,KAAJ,EAAZ;AACA,IAAA,GAAA,CAAI,GAAJ,GAAU,GAAV;AACA,QAAI,WAAJ,EAAiB,GAAA,CAAI,WAAJ,GAAkB,WAAlB;AACjB,QAAI,MAAJ,EAAY,GAAA,CAAI,MAAJ,GAAa,MAAb;AACZ,QAAI,KAAJ,EAAW,GAAA,CAAI,KAAJ,GAAY,KAAZ;AACX,QAAI,OAAJ,EAAa,GAAA,CAAI,OAAJ,GAAc,OAAd;;AAEb,IAAA,GAAA,CAAI,MAAJ,GAAc,KAAD,IAAW;AACtB,MAAA,KAAA;AACA,MAAA,SAAA,CAAU,QAAV,CAAA;AACA,MAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAS,KAAT,CAAA;AACF,KAJA;;AAKA,IAAA,GAAA,CAAI,OAAJ,GAAe,KAAD,IAAW;AACvB,MAAA,KAAA;AACA,MAAA,SAAA,CAAU,QAAV,CAAA;AACA,MAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAU,KAAV,CAAA;AACF,KAJA;;AAMA,IAAA,QAAA,CAAS,OAAT,GAAmB,GAAnB;AACF,GAxBa,EAwBV,CAAC,GAAD,EAAM,WAAN,EAAmB,MAAnB,EAA2B,KAA3B,EAAkC,MAAlC,EAA0C,OAA1C,EAAmD,OAAnD,CAxBU,CAAb;;AA0BA,QAAM,KAAA,GAAQ,MAAM;AAClB,QAAI,QAAA,CAAS,OAAb,EAAsB;AACpB,MAAA,QAAA,CAAS,OAAT,CAAiB,MAAjB,GAA0B,IAA1B;AACA,MAAA,QAAA,CAAS,OAAT,CAAiB,OAAjB,GAA2B,IAA3B;AACA,MAAA,QAAA,CAAS,OAAT,GAAmB,IAAnB;AACF;AACF,GANA;;AAQA,EAAA,mBAAA,CAAoB,MAAM;AAKxB,QAAI,cAAJ,EAAoB,OAAO,KAAA,CAAP;;AAEpB,QAAI,MAAA,KAAW,SAAf,EAA0B;AACxB,MAAA,IAAA;AACF;;AACA,WAAO,MAAM;AACX,MAAA,KAAA;AACF,KAFA;AAGF,GAbA,EAaG,CAAC,MAAD,EAAS,IAAT,EAAe,cAAf,CAbH,CAAA;AAmBA,SAAO,cAAA,GAAiB,QAAjB,GAA4B,MAAnC;AACF;;AAEO,IAAM,uBAAA,GAA0B,CACrC,MADqC,EAErC,gBAFqC,KAIpC,MAAA,KAAW,QAAX,IAAuB,gBAAA,KAAqB,mBAA5C,IACA,MAAA,KAAW,QAAX,IAAuB,gBAAA,KAAqB,SALxC","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"]},"metadata":{},"sourceType":"module"}