{"ast":null,"code":"'use client';\n\nimport { findToast, getToastPosition } from \"./chunk-LDADOVIM.mjs\";\nimport { getToastPlacement } from \"./chunk-LHPMGMGT.mjs\"; // src/toast.tsx\n\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { runIfFn } from \"@chakra-ui/shared-utils\"; // src/toast.store.ts\n\nvar initialState = {\n  top: [],\n  \"top-left\": [],\n  \"top-right\": [],\n  \"bottom-left\": [],\n  bottom: [],\n  \"bottom-right\": []\n};\nvar toastStore = createStore(initialState);\n\nfunction createStore(initialState2) {\n  let state = initialState2;\n  const listeners = /* @__PURE__ */new Set();\n\n  const setState = setStateFn => {\n    state = setStateFn(state);\n    listeners.forEach(l => l());\n  };\n\n  return {\n    getState: () => state,\n    subscribe: listener => {\n      listeners.add(listener);\n      return () => {\n        setState(() => initialState2);\n        listeners.delete(listener);\n      };\n    },\n\n    /**\n     * Delete a toast record at its position\n     */\n    removeToast: (id, position) => {\n      setState(prevState => ({ ...prevState,\n        // id may be string or number\n        // eslint-disable-next-line eqeqeq\n        [position]: prevState[position].filter(toast => toast.id != id)\n      }));\n    },\n    notify: (message, options) => {\n      const toast = createToast(message, options);\n      const {\n        position,\n        id\n      } = toast;\n      setState(prevToasts => {\n        var _a, _b;\n\n        const isTop = position.includes(\"top\");\n        const toasts = isTop ? [toast, ...((_a = prevToasts[position]) != null ? _a : [])] : [...((_b = prevToasts[position]) != null ? _b : []), toast];\n        return { ...prevToasts,\n          [position]: toasts\n        };\n      });\n      return id;\n    },\n    update: (id, options) => {\n      if (!id) return;\n      setState(prevState => {\n        const nextState = { ...prevState\n        };\n        const {\n          position,\n          index\n        } = findToast(nextState, id);\n\n        if (position && index !== -1) {\n          nextState[position][index] = { ...nextState[position][index],\n            ...options,\n            message: createRenderToast(options)\n          };\n        }\n\n        return nextState;\n      });\n    },\n    closeAll: function () {\n      let {\n        positions\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      setState(prev => {\n        const allPositions = [\"bottom\", \"bottom-right\", \"bottom-left\", \"top\", \"top-left\", \"top-right\"];\n        const positionsToClose = positions != null ? positions : allPositions;\n        return positionsToClose.reduce((acc, position) => {\n          acc[position] = prev[position].map(toast => ({ ...toast,\n            requestClose: true\n          }));\n          return acc;\n        }, { ...prev\n        });\n      });\n    },\n    close: id => {\n      setState(prevState => {\n        const position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return { ...prevState,\n          [position]: prevState[position].map(toast => {\n            if (toast.id == id) {\n              return { ...toast,\n                requestClose: true\n              };\n            }\n\n            return toast;\n          })\n        };\n      });\n    },\n    isActive: id => Boolean(findToast(toastStore.getState(), id).position)\n  };\n}\n\nvar counter = 0;\n\nfunction createToast(message) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a, _b;\n\n  counter += 1;\n  const id = (_a = options.id) != null ? _a : counter;\n  const position = (_b = options.position) != null ? _b : \"bottom\";\n  return {\n    id,\n    message,\n    position,\n    duration: options.duration,\n    onCloseComplete: options.onCloseComplete,\n    onRequestRemove: () => toastStore.removeToast(String(id), position),\n    status: options.status,\n    requestClose: false,\n    containerStyle: options.containerStyle\n  };\n} // src/toast.tsx\n\n\nimport { jsx, jsxs } from \"react/jsx-runtime\";\n\nvar Toast = props => {\n  const {\n    status,\n    variant = \"solid\",\n    id,\n    title,\n    isClosable,\n    onClose,\n    description,\n    colorScheme,\n    icon\n  } = props;\n  const ids = id ? {\n    root: `toast-${id}`,\n    title: `toast-${id}-title`,\n    description: `toast-${id}-description`\n  } : void 0;\n  return /* @__PURE__ */jsxs(Alert, {\n    addRole: false,\n    status,\n    variant,\n    id: ids == null ? void 0 : ids.root,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\",\n    colorScheme,\n    children: [/* @__PURE__ */jsx(AlertIcon, {\n      children: icon\n    }), /* @__PURE__ */jsxs(chakra.div, {\n      flex: \"1\",\n      maxWidth: \"100%\",\n      children: [title && /* @__PURE__ */jsx(AlertTitle, {\n        id: ids == null ? void 0 : ids.title,\n        children: title\n      }), description && /* @__PURE__ */jsx(AlertDescription, {\n        id: ids == null ? void 0 : ids.description,\n        display: \"block\",\n        children: description\n      })]\n    }), isClosable && /* @__PURE__ */jsx(CloseButton, {\n      size: \"sm\",\n      onClick: onClose,\n      position: \"absolute\",\n      insetEnd: 1,\n      top: 1\n    })]\n  });\n};\n\nfunction createRenderToast() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    render,\n    toastComponent: ToastComponent = Toast\n  } = options;\n\n  const renderToast = props => {\n    if (typeof render === \"function\") {\n      return render({ ...props,\n        ...options\n      });\n    }\n\n    return /* @__PURE__ */jsx(ToastComponent, { ...props,\n      ...options\n    });\n  };\n\n  return renderToast;\n}\n\nfunction createToastFn(dir, defaultOptions) {\n  const normalizeToastOptions = options => {\n    var _a;\n\n    return { ...defaultOptions,\n      ...options,\n      position: getToastPlacement((_a = options == null ? void 0 : options.position) != null ? _a : defaultOptions == null ? void 0 : defaultOptions.position, dir)\n    };\n  };\n\n  const toast = options => {\n    const normalizedToastOptions = normalizeToastOptions(options);\n    const Message = createRenderToast(normalizedToastOptions);\n    return toastStore.notify(Message, normalizedToastOptions);\n  };\n\n  toast.update = (id, options) => {\n    toastStore.update(id, normalizeToastOptions(options));\n  };\n\n  toast.promise = (promise, options) => {\n    const id = toast({ ...options.loading,\n      status: \"loading\",\n      duration: null\n    });\n    promise.then(data => toast.update(id, {\n      status: \"success\",\n      duration: 5e3,\n      ...runIfFn(options.success, data)\n    })).catch(error => toast.update(id, {\n      status: \"error\",\n      duration: 5e3,\n      ...runIfFn(options.error, error)\n    }));\n  };\n\n  toast.closeAll = toastStore.closeAll;\n  toast.close = toastStore.close;\n  toast.isActive = toastStore.isActive;\n  return toast;\n}\n\nexport { Toast, createRenderToast, createToastFn, toastStore };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/toast/src/toast.tsx","/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/toast/src/toast.store.ts"],"names":["initialState"],"mappings":"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","sourcesContent":["import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertProps,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { chakra } from \"@chakra-ui/system\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport { runIfFn } from \"@chakra-ui/shared-utils\"\nimport type { UseToastOptions } from \"./use-toast\"\nimport type { RenderProps, ToastId } from \"./toast.types\"\nimport { getToastPlacement } from \"./toast.placement\"\nimport { toastStore } from \"./toast.store\"\n\nexport interface ToastProps\n  extends UseToastOptions,\n    Omit<AlertProps, keyof UseToastOptions> {\n  onClose?: () => void\n}\n\n/**\n * The `Toast` component is used to give feedback to users after an action has taken place.\n *\n * @see Docs https://chakra-ui.com/docs/components/toast\n */\nexport const Toast: React.FC<ToastProps> = (props) => {\n  const {\n    status,\n    variant = \"solid\",\n    id,\n    title,\n    isClosable,\n    onClose,\n    description,\n    colorScheme,\n    icon,\n  } = props\n\n  const ids = id\n    ? {\n        root: `toast-${id}`,\n        title: `toast-${id}-title`,\n        description: `toast-${id}-description`,\n      }\n    : undefined\n\n  return (\n    <Alert\n      addRole={false}\n      status={status}\n      variant={variant}\n      id={ids?.root}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingEnd={8}\n      textAlign=\"start\"\n      width=\"auto\"\n      colorScheme={colorScheme}\n    >\n      <AlertIcon>{icon}</AlertIcon>\n      <chakra.div flex=\"1\" maxWidth=\"100%\">\n        {title && <AlertTitle id={ids?.title}>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription id={ids?.description} display=\"block\">\n            {description}\n          </AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          insetEnd={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nexport function createRenderToast(\n  options: UseToastOptions & {\n    toastComponent?: React.FC<ToastProps>\n  } = {},\n) {\n  const { render, toastComponent: ToastComponent = Toast } = options\n  const renderToast: React.FC<RenderProps> = (props) => {\n    if (typeof render === \"function\") {\n      return render({ ...props, ...options }) as JSX.Element\n    }\n    return <ToastComponent {...props} {...options} />\n  }\n  return renderToast\n}\n\ntype UseToastPromiseOption = Omit<UseToastOptions, \"status\">\n\nexport function createToastFn(\n  dir: \"ltr\" | \"rtl\",\n  defaultOptions?: UseToastOptions,\n) {\n  const normalizeToastOptions = (options?: UseToastOptions) => ({\n    ...defaultOptions,\n    ...options,\n    position: getToastPlacement(\n      options?.position ?? defaultOptions?.position,\n      dir,\n    ),\n  })\n\n  const toast = (options?: UseToastOptions) => {\n    const normalizedToastOptions = normalizeToastOptions(options)\n    const Message = createRenderToast(normalizedToastOptions)\n    return toastStore.notify(Message, normalizedToastOptions)\n  }\n\n  toast.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    toastStore.update(id, normalizeToastOptions(options))\n  }\n\n  toast.promise = <Result extends any, Err extends Error = Error>(\n    promise: Promise<Result>,\n    options: {\n      success: MaybeFunction<UseToastPromiseOption, [Result]>\n      error: MaybeFunction<UseToastPromiseOption, [Err]>\n      loading: UseToastPromiseOption\n    },\n  ) => {\n    const id = toast({\n      ...options.loading,\n      status: \"loading\",\n      duration: null,\n    })\n\n    promise\n      .then((data) =>\n        toast.update(id, {\n          status: \"success\",\n          duration: 5_000,\n          ...runIfFn(options.success, data),\n        }),\n      )\n      .catch((error) =>\n        toast.update(id, {\n          status: \"error\",\n          duration: 5_000,\n          ...runIfFn(options.error, error),\n        }),\n      )\n  }\n\n  toast.closeAll = toastStore.closeAll\n  toast.close = toastStore.close\n  toast.isActive = toastStore.isActive\n\n  return toast\n}\n\nexport type CreateToastFnReturn = ReturnType<typeof createToastFn>\n\ntype MaybeFunction<T, Args extends unknown[] = []> = T | ((...args: Args) => T)\n","import { createRenderToast } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { CreateToastOptions, ToastMethods } from \"./toast.provider\"\nimport type { ToastId, ToastMessage, ToastState } from \"./toast.types\"\nimport { findToast, getToastPosition } from \"./toast.utils\"\n\ntype ToastStore = ToastMethods & {\n  getState: () => ToastState\n  subscribe: (onStoreChange: () => void) => () => void\n  removeToast: (id: ToastId, position: ToastPosition) => void\n}\n\nconst initialState = {\n  top: [],\n  \"top-left\": [],\n  \"top-right\": [],\n  \"bottom-left\": [],\n  bottom: [],\n  \"bottom-right\": [],\n}\n\n/**\n * Store to track all the toast across all positions\n */\nexport const toastStore = createStore(initialState)\n\nfunction createStore(initialState: ToastState): ToastStore {\n  let state = initialState\n  const listeners = new Set<() => void>()\n\n  const setState = (setStateFn: (values: ToastState) => ToastState) => {\n    state = setStateFn(state)\n    listeners.forEach((l) => l())\n  }\n\n  return {\n    getState: () => state,\n\n    subscribe: (listener) => {\n      listeners.add(listener)\n      return () => {\n        // Delete all toasts on unmount\n        setState(() => initialState)\n        listeners.delete(listener)\n      }\n    },\n\n    /**\n     * Delete a toast record at its position\n     */\n    removeToast: (id, position) => {\n      setState((prevState) => ({\n        ...prevState,\n        // id may be string or number\n        // eslint-disable-next-line eqeqeq\n        [position]: prevState[position].filter((toast) => toast.id != id),\n      }))\n    },\n\n    notify: (message, options) => {\n      const toast = createToast(message, options)\n      const { position, id } = toast\n\n      setState((prevToasts) => {\n        const isTop = position.includes(\"top\")\n\n        /**\n         * - If the toast is positioned at the top edges, the\n         * recent toast stacks on top of the other toasts.\n         *\n         * - If the toast is positioned at the bottom edges, the recent\n         * toast stacks below the other toasts.\n         */\n        const toasts = isTop\n          ? [toast, ...(prevToasts[position] ?? [])]\n          : [...(prevToasts[position] ?? []), toast]\n\n        return {\n          ...prevToasts,\n          [position]: toasts,\n        }\n      })\n\n      return id\n    },\n\n    update: (id, options) => {\n      if (!id) return\n\n      setState((prevState) => {\n        const nextState = { ...prevState }\n        const { position, index } = findToast(nextState, id)\n\n        if (position && index !== -1) {\n          nextState[position][index] = {\n            ...nextState[position][index],\n            ...options,\n            message: createRenderToast(options),\n          }\n        }\n\n        return nextState\n      })\n    },\n\n    closeAll: ({ positions } = {}) => {\n      // only one setState here for perf reasons\n      // instead of spamming this.closeToast\n      setState((prev) => {\n        const allPositions: ToastPosition[] = [\n          \"bottom\",\n          \"bottom-right\",\n          \"bottom-left\",\n          \"top\",\n          \"top-left\",\n          \"top-right\",\n        ]\n\n        const positionsToClose = positions ?? allPositions\n\n        return positionsToClose.reduce(\n          (acc, position) => {\n            acc[position] = prev[position].map((toast) => ({\n              ...toast,\n              requestClose: true,\n            }))\n\n            return acc\n          },\n          { ...prev } as ToastState,\n        )\n      })\n    },\n\n    close: (id) => {\n      setState((prevState) => {\n        const position = getToastPosition(prevState, id)\n\n        if (!position) return prevState\n\n        return {\n          ...prevState,\n          [position]: prevState[position].map((toast) => {\n            // id may be string or number\n            // eslint-disable-next-line eqeqeq\n            if (toast.id == id) {\n              return {\n                ...toast,\n                requestClose: true,\n              }\n            }\n\n            return toast\n          }),\n        }\n      })\n    },\n\n    isActive: (id) => Boolean(findToast(toastStore.getState(), id).position),\n  }\n}\n\n/**\n * Static id counter to create unique ids\n * for each toast\n */\nlet counter = 0\n\n/**\n * Create properties for a new toast\n */\nfunction createToast(message: ToastMessage, options: CreateToastOptions = {}) {\n  counter += 1\n  const id = options.id ?? counter\n\n  const position = options.position ?? \"bottom\"\n\n  return {\n    id,\n    message,\n    position,\n    duration: options.duration,\n    onCloseComplete: options.onCloseComplete,\n    onRequestRemove: () => toastStore.removeToast(String(id), position),\n    status: options.status,\n    requestClose: false,\n    containerStyle: options.containerStyle,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}