{"ast":null,"code":"'use client';\n\nimport { useInitialAnimationState } from \"./chunk-2TOCDA5N.mjs\";\nimport { useCheckboxGroupContext } from \"./chunk-LYGBQ47X.mjs\";\nimport { CheckboxIcon } from \"./chunk-ULEC7HZU.mjs\";\nimport { useCheckbox } from \"./chunk-7D6N5TE5.mjs\"; // src/checkbox.tsx\n\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = { ...group,\n    ...props\n  };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = /* @__PURE__ */jsx(CheckboxIcon, {}),\n    isChecked: isCheckedProp,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps;\n  let isChecked = isCheckedProp;\n\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  let onChange = onChangeProp;\n\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox({ ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  });\n  const shouldAnimate = useInitialAnimationState(state.isChecked);\n  const iconStyles = useMemo(() => ({\n    animation: !shouldAnimate ? void 0 : state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon\n  }), [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon]);\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */jsxs(chakra.label, {\n    __css: { ...rootStyles,\n      ...styles.container\n    },\n    className: cx(\"chakra-checkbox\", className),\n    ...getRootProps(),\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-checkbox__input\",\n      ...getInputProps(inputProps, ref)\n    }), /* @__PURE__ */jsx(chakra.span, {\n      __css: { ...controlStyles,\n        ...styles.control\n      },\n      className: \"chakra-checkbox__control\",\n      ...getCheckboxProps(),\n      children: clonedIcon\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-checkbox__label\",\n      ...getLabelProps(),\n      __css: {\n        marginStart: spacing,\n        ...styles.label\n      },\n      children\n    })]\n  });\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/checkbox/src/checkbox.tsx"],"names":["Checkbox"],"mappings":"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","sourcesContent":["import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cloneElement, useMemo } from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-context\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { CheckboxOptions, UseCheckboxProps } from \"./checkbox-types\"\nimport { useCheckbox } from \"./use-checkbox\"\nimport { useInitialAnimationState } from \"./use-initial-animation-state\"\n\nconst controlStyles: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0,\n}\n\nconst rootStyles: SystemStyleObject = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\",\n}\n\nconst checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\",\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\",\n  },\n})\n\nconst indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n})\nconst indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\",\n  },\n  to: {\n    transform: \"scaleX(1)\",\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps,\n    CheckboxOptions {}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">(function Checkbox(\n  props,\n  ref,\n) {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const shouldAnimate = useInitialAnimationState(state.isChecked)\n\n  const iconStyles: SystemStyleObject = useMemo(\n    () => ({\n      animation: !shouldAnimate\n        ? undefined\n        : state.isIndeterminate\n        ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear`\n        : `${checkAnim} 200ms linear`,\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <chakra.label\n      __css={{ ...rootStyles, ...styles.container }}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input\n        className=\"chakra-checkbox__input\"\n        {...getInputProps(inputProps, ref)}\n      />\n      <chakra.span\n        __css={{ ...controlStyles, ...styles.control }}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nCheckbox.displayName = \"Checkbox\"\n"]},"metadata":{},"sourceType":"module"}