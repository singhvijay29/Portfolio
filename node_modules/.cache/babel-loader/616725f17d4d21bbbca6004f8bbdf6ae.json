{"ast":null,"code":"'use client'; // src/chakra-provider.tsx\n\nimport { CSSReset, CSSPolyfill } from \"@chakra-ui/css-reset\";\nimport { PortalManager } from \"@chakra-ui/portal\";\nimport { ColorModeProvider, GlobalStyle, ThemeProvider } from \"@chakra-ui/system\";\nimport { EnvironmentProvider } from \"@chakra-ui/react-env\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\n\nvar ChakraProvider = props => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetScope,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n    disableEnvironment,\n    disableGlobalStyle\n  } = props;\n\n  const _children = /* @__PURE__ */jsx(EnvironmentProvider, {\n    environment,\n    disabled: disableEnvironment,\n    children\n  });\n\n  return /* @__PURE__ */jsx(ThemeProvider, {\n    theme,\n    cssVarsRoot,\n    children: /* @__PURE__ */jsxs(ColorModeProvider, {\n      colorModeManager,\n      options: theme.config,\n      children: [resetCSS ? /* @__PURE__ */jsx(CSSReset, {\n        scope: resetScope\n      }) : /* @__PURE__ */jsx(CSSPolyfill, {}), !disableGlobalStyle && /* @__PURE__ */jsx(GlobalStyle, {}), portalZIndex ? /* @__PURE__ */jsx(PortalManager, {\n        zIndex: portalZIndex,\n        children: _children\n      }) : _children]\n    })\n  });\n};\n\nexport { ChakraProvider };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/provider/src/chakra-provider.tsx"],"names":[],"mappings":";;AAAA,SAAS,QAAT,EAAmB,WAAnB,QAAsC,sBAAtC;AACA,SAAS,aAAT,QAA8B,mBAA9B;AACA,SACE,iBADF,EAGE,WAHF,EAIE,aAJF,QAMO,mBANP;AAQA,SACE,mBADF,QAGO,sBAHP;AA+EI,SAAA,GAAA,EAUE,IAVF,QAAA,mBAAA;;AAfG,IAAM,cAAA,GAAiD,KAAD,IAAW;AACtE,QAAM;AACJ,IAAA,QADI;AAEJ,IAAA,gBAFI;AAGJ,IAAA,YAHI;AAIJ,IAAA,UAJI;AAKJ,IAAA,QAAA,GAAW,IALP;AAMJ,IAAA,KAAA,GAAQ,EANJ;AAOJ,IAAA,WAPI;AAQJ,IAAA,WARI;AASJ,IAAA,kBATI;AAUJ,IAAA;AAVI,MAWF,KAXJ;;AAaA,QAAM,SAAA,GACJ,eAAA,GAAA,CAAC,mBAAD,EAAC;AACC,IAAA,WADD;AAEC,IAAA,QAAA,EAAU,kBAFX;AAIE,IAAA;AAJF,GAAD,CADF;;AASA,SACE,eAAA,GAAA,CAAC,aAAD,EAAC;AAAc,IAAA,KAAd;AAAoC,IAAA,WAApC;AACC,IAAA,QAAA,EAAA,eAAA,IAAA,CAAC,iBAAD,EAAC;AACC,MAAA,gBADD;AAEC,MAAA,OAAA,EAAS,KAAA,CAAM,MAFhB;AAIE,MAAA,QAAA,EAAA,CAAA,QAAA,GAAW,eAAA,GAAA,CAAC,QAAD,EAAC;AAAS,QAAA,KAAA,EAAO;AAAhB,OAAD,CAAX,GAA6C,eAAA,GAAA,CAAC,WAAD,EAAC,EAAD,CAA7C,EACA,CAAC,kBAAD,IAAuB,eAAA,GAAA,CAAC,WAAD,EAAC,EAAD,CADvB,EAEA,YAAA,GACC,eAAA,GAAA,CAAC,aAAD,EAAC;AAAc,QAAA,MAAA,EAAQ,YAAtB;AAAqC,QAAA,QAAA,EAAA;AAArC,OAAD,CADD,GAGC,SALD;AAJF,KAAD;AADD,GAAD,CADF;AAgBF,CAvCO","sourcesContent":["import { CSSReset, CSSPolyfill } from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * The selector to scope the css reset styles to.\n   */\n  resetScope?: string\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n  /**\n   * Disabled the use of automatic window and document detection.\n   * This removed the injected `<span/>` element\n   */\n  disableEnvironment?: boolean\n  /**\n   * If `true`, Chakra will not mount the global styles defined in the theme.\n   */\n  disableGlobalStyle?: boolean\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider: React.FC<ChakraProviderProps> = (props) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetScope,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n    disableEnvironment,\n    disableGlobalStyle,\n  } = props\n\n  const _children = (\n    <EnvironmentProvider\n      environment={environment}\n      disabled={disableEnvironment}\n    >\n      {children}\n    </EnvironmentProvider>\n  )\n\n  return (\n    <ThemeProvider theme={theme as Dict} cssVarsRoot={cssVarsRoot}>\n      <ColorModeProvider\n        colorModeManager={colorModeManager}\n        options={theme.config}\n      >\n        {resetCSS ? <CSSReset scope={resetScope} /> : <CSSPolyfill />}\n        {!disableGlobalStyle && <GlobalStyle />}\n        {portalZIndex ? (\n          <PortalManager zIndex={portalZIndex}>{_children}</PortalManager>\n        ) : (\n          _children\n        )}\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}