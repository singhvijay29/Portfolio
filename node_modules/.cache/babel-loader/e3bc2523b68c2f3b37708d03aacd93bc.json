{"ast":null,"code":"'use client';\n\nimport { useMediaQuery } from \"./chunk-57I6FYPZ.mjs\"; // src/use-breakpoint.ts\n\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\n\nfunction useBreakpoint(arg) {\n  var _a, _b;\n\n  const opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const theme = useTheme();\n\n  const breakpoints = theme.__breakpoints.details.map(_ref => {\n    let {\n      minMaxQuery,\n      breakpoint\n    } = _ref;\n    return {\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    };\n  });\n\n  const fallback = breakpoints.map(bp => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: opts.ssr\n  });\n  const index = values.findIndex(value => value == true);\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\n\nexport { useBreakpoint };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/media-query/src/use-breakpoint.ts"],"names":[],"mappings":";;;;AAAA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,QAAT,QAAyB,yBAAzB;;AAcO,SAAS,aAAT,CAAuB,GAAvB,EAA4D;AAfnE,MAAA,EAAA,EAAA,EAAA;;AAgBE,QAAM,IAAA,GAAO,QAAA,CAAS,GAAT,CAAA,GAAgB,GAAhB,GAAsB;AAAE,IAAA,QAAA,EAAU,GAAA,IAAA,IAAA,GAAA,GAAA,GAAO;AAAnB,GAAnC;AACA,QAAM,KAAA,GAAQ,QAAA,EAAd;;AAEA,QAAM,WAAA,GAAc,KAAA,CAAM,aAAN,CAAqB,OAArB,CAA6B,GAA7B,CAClB;AAAA,QAAC;AAAE,MAAA,WAAF;AAAe,MAAA;AAAf,KAAD;AAAA,WAAkC;AAChC,MAAA,UADgC;AAEhC,MAAA,KAAA,EAAO,WAAA,CAAY,OAAZ,CAAoB,oBAApB,EAA0C,EAA1C;AAFyB,KAAlC;AAAA,GADkB,CAApB;;AAOA,QAAM,QAAA,GAAW,WAAA,CAAY,GAAZ,CAAiB,EAAD,IAAQ,EAAA,CAAG,UAAH,KAAkB,IAAA,CAAK,QAA/C,CAAjB;AACA,QAAM,MAAA,GAAS,aAAA,CACb,WAAA,CAAY,GAAZ,CAAiB,EAAD,IAAQ,EAAA,CAAG,KAA3B,CADa,EAEb;AAAE,IAAA,QAAF;AAAY,IAAA,GAAA,EAAK,IAAA,CAAK;AAAtB,GAFa,CAAf;AAKA,QAAM,KAAA,GAAQ,MAAA,CAAO,SAAP,CAAkB,KAAD,IAAW,KAAA,IAAS,IAArC,CAAd;AACA,SAAA,CAAO,EAAA,GAAA,CAAA,EAAA,GAAA,WAAA,CAAY,KAAZ,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAoB,UAA3B,KAAO,IAAP,GAAO,EAAP,GAAyC,IAAA,CAAK,QAA9C;AACF","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useMediaQuery } from \"./use-media-query\"\n\nexport type UseBreakpointOptions = {\n  ssr?: boolean\n  fallback?: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent.\n */\nexport function useBreakpoint(arg?: string | UseBreakpointOptions) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const theme = useTheme()\n\n  const breakpoints = theme.__breakpoints!.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\"),\n    }),\n  )\n\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback)\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr },\n  )\n\n  const index = values.findIndex((value) => value == true)\n  return breakpoints[index]?.breakpoint ?? opts.fallback\n}\n"]},"metadata":{},"sourceType":"module"}