{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\"; // src/use-controllable.ts\n\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useControllableProp(prop, state) {\n  const isControlled = prop !== void 0;\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\n\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [valueState, setValue] = useState(defaultValue);\n  const isControlled = valueProp !== void 0;\n  const value = isControlled ? valueProp : valueState;\n  const updateValue = useCallback(next => {\n    const nextValue = runIfFn(next, value);\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [isControlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, updateValue];\n}\n\nexport { useControllableProp, useControllableState };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/hooks/src/use-controllable.ts"],"names":[],"mappings":";;;;AAAA,SAAS,OAAT,QAAwB,kBAAxB;AACA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;;AAGO,SAAS,mBAAT,CAAgC,IAAhC,EAAqD,KAArD,EAA+D;AACpE,QAAM,YAAA,GAAe,IAAA,KAAS,KAAA,CAA9B;AACA,QAAM,KAAA,GAAQ,YAAA,IAAgB,OAAO,IAAP,KAAgB,WAAhC,GAA8C,IAA9C,GAAqD,KAAnE;AACA,SAAO,CAAC,YAAD,EAAe,KAAf,CAAP;AACF;;AAyBO,SAAS,oBAAT,CAAiC,KAAjC,EAAsE;AAC3E,QAAM;AACJ,IAAA,KAAA,EAAO,SADH;AAEJ,IAAA,YAFI;AAGJ,IAAA,QAHI;AAIJ,IAAA,YAAA,GAAe,CAAC,IAAD,EAAO,IAAP,KAAgB,IAAA,KAAS;AAJpC,MAKF,KALJ;AAMA,QAAM,YAAA,GAAe,cAAA,CAAe,QAAf,CAArB;AACA,QAAM,gBAAA,GAAmB,cAAA,CAAe,YAAf,CAAzB;AAEA,QAAM,CAAC,UAAD,EAAa,QAAb,IAAyB,QAAA,CAAS,YAAT,CAA/B;AAEA,QAAM,YAAA,GAAe,SAAA,KAAc,KAAA,CAAnC;AACA,QAAM,KAAA,GAAQ,YAAA,GAAgB,SAAhB,GAAkC,UAAhD;AAEA,QAAM,WAAA,GAAc,WAAA,CACjB,IAAD,IAAmC;AACjC,UAAM,SAAA,GAAY,OAAA,CAAQ,IAAR,EAAc,KAAd,CAAlB;;AAEA,QAAI,CAAC,gBAAA,CAAiB,KAAjB,EAAwB,SAAxB,CAAL,EAAyC;AACvC;AACF;;AAEA,QAAI,CAAC,YAAL,EAAmB;AACjB,MAAA,QAAA,CAAS,SAAT,CAAA;AACF;;AAEA,IAAA,YAAA,CAAa,SAAb,CAAA;AACF,GAbkB,EAclB,CAAC,YAAD,EAAe,YAAf,EAA6B,KAA7B,EAAoC,gBAApC,CAdkB,CAApB;AAiBA,SAAO,CAAC,KAAD,EAAQ,WAAR,CAAP;AACF","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [valueState, setValue] = useState(defaultValue as T)\n\n  const isControlled = valueProp !== undefined\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [isControlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}