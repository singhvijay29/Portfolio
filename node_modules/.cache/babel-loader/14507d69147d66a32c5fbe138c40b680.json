{"ast":null,"code":"'use client'; // src/use-spinner.ts\n\nimport { useInterval } from \"@chakra-ui/react-use-interval\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\nvar CONTINUOUS_CHANGE_DELAY = 300;\n\nfunction useSpinner(increment, decrement) {\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [action, setAction] = useState(null);\n  const [runOnce, setRunOnce] = useState(true);\n  const timeoutRef = useRef(null);\n\n  const removeTimeout = () => clearTimeout(timeoutRef.current);\n\n  useInterval(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);\n  const up = useCallback(() => {\n    if (runOnce) {\n      increment();\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]);\n  const down = useCallback(() => {\n    if (runOnce) {\n      decrement();\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]);\n  const stop = useCallback(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  useEffect(() => {\n    return () => removeTimeout();\n  }, []);\n  return {\n    up,\n    down,\n    stop,\n    isSpinning\n  };\n}\n\nexport { useSpinner };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/number-input/src/use-spinner.ts"],"names":[],"mappings":";;AAAA,SAAS,WAAT,QAA4B,+BAA5B;AACA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,MAAjC,EAAyC,QAAzC,QAAyD,OAAzD;AAKA,IAAM,0BAAA,GAA6B,EAAnC;AAKA,IAAM,uBAAA,GAA0B,GAAhC;;AAWO,SAAS,UAAT,CAAoB,SAApB,EAAyC,SAAzC,EAA8D;AAInE,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAA,CAAS,KAAT,CAApC;AAGA,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAA,CAAwB,IAAxB,CAA5B;AAGA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAA,CAAS,IAAT,CAA9B;AAGA,QAAM,UAAA,GAAa,MAAA,CAAY,IAAZ,CAAnB;;AAGA,QAAM,aAAA,GAAgB,MAAM,YAAA,CAAa,UAAA,CAAW,OAAxB,CAA5B;;AAMA,EAAA,WAAA,CACE,MAAM;AACJ,QAAI,MAAA,KAAW,WAAf,EAA4B;AAC1B,MAAA,SAAA;AACF;;AACA,QAAI,MAAA,KAAW,WAAf,EAA4B;AAC1B,MAAA,SAAA;AACF;AACF,GARF,EASE,UAAA,GAAa,0BAAb,GAA0C,IAT5C,CAAA;AAaA,QAAM,EAAA,GAAK,WAAA,CAAY,MAAM;AAE3B,QAAI,OAAJ,EAAa;AACX,MAAA,SAAA;AACF;;AAGA,IAAA,UAAA,CAAW,OAAX,GAAqB,UAAA,CAAW,MAAM;AACpC,MAAA,UAAA,CAAW,KAAX,CAAA;AACA,MAAA,aAAA,CAAc,IAAd,CAAA;AACA,MAAA,SAAA,CAAU,WAAV,CAAA;AACF,KAJqB,EAIlB,uBAJkB,CAArB;AAKF,GAZW,EAYR,CAAC,SAAD,EAAY,OAAZ,CAZQ,CAAX;AAeA,QAAM,IAAA,GAAO,WAAA,CAAY,MAAM;AAE7B,QAAI,OAAJ,EAAa;AACX,MAAA,SAAA;AACF;;AAGA,IAAA,UAAA,CAAW,OAAX,GAAqB,UAAA,CAAW,MAAM;AACpC,MAAA,UAAA,CAAW,KAAX,CAAA;AACA,MAAA,aAAA,CAAc,IAAd,CAAA;AACA,MAAA,SAAA,CAAU,WAAV,CAAA;AACF,KAJqB,EAIlB,uBAJkB,CAArB;AAKF,GAZa,EAYV,CAAC,SAAD,EAAY,OAAZ,CAZU,CAAb;AAeA,QAAM,IAAA,GAAO,WAAA,CAAY,MAAM;AAC7B,IAAA,UAAA,CAAW,IAAX,CAAA;AACA,IAAA,aAAA,CAAc,KAAd,CAAA;AACA,IAAA,aAAA;AACF,GAJa,EAIV,EAJU,CAAb;AAUA,EAAA,SAAA,CAAU,MAAM;AACd,WAAO,MAAM,aAAA,EAAb;AACF,GAFA,EAEG,EAFH,CAAA;AAIA,SAAO;AAAE,IAAA,EAAF;AAAM,IAAA,IAAN;AAAY,IAAA,IAAZ;AAAkB,IAAA;AAAlB,GAAP;AACF","sourcesContent":["import { useInterval } from \"@chakra-ui/react-use-interval\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first time\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first time\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinning (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useEffect(() => {\n    return () => removeTimeout()\n  }, [])\n\n  return { up, down, stop, isSpinning }\n}\n"]},"metadata":{},"sourceType":"module"}