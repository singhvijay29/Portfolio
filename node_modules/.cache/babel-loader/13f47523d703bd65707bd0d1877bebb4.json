{"ast":null,"code":"'use client';\n\nimport { StackItem } from \"./chunk-ZFQCCYWD.mjs\";\nimport { getDividerStyles } from \"./chunk-5VJV6UNA.mjs\"; // src/stack/stack.tsx\n\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, Fragment, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  const dividerStyle = useMemo(() => getDividerStyles({\n    spacing,\n    direction\n  }), [spacing, direction]);\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */jsx(StackItem, {\n        children: child\n      }, key);\n\n      const _child = shouldWrapChildren ? wrappedChild : child;\n\n      if (!hasDivider) return _child;\n      const clonedDivider = cloneElement(divider, {\n        __css: dividerStyle\n      });\n\n      const _divider = isLast ? null : clonedDivider;\n\n      return /* @__PURE__ */jsxs(Fragment, {\n        children: [_child, _divider]\n      }, key);\n    });\n  }, [divider, dividerStyle, hasDivider, shouldUseChildren, shouldWrapChildren, children]);\n\n  const _className = cx(\"chakra-stack\", className);\n\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: direction,\n    flexWrap: wrap,\n    gap: hasDivider ? void 0 : spacing,\n    className: _className,\n    ...rest,\n    children: clones\n  });\n});\nStack.displayName = \"Stack\";\nexport { Stack };","map":{"version":3,"sources":["/Users/vijay-chace/Desktop/Portfolio/Portfolio/node_modules/@chakra-ui/layout/src/stack/stack.tsx"],"names":[],"mappings":";;;;;AAAA,SAAS,gBAAT,QAAiC,iCAAjC;AACA,SAAS,EAAT,QAAmB,yBAAnB;AACA,SACE,MADF,EAEE,UAFF,QAKO,mBALP;AAMA,SAAS,YAAT,EAAuB,QAAvB,EAAiC,OAAjC,QAAgD,OAAhD;AAuG+B,SAAA,GAAA,EAenB,IAfmB,QAAA,mBAAA;AAjCxB,IAAM,KAAA,GAAQ,UAAA,CAA8B,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACjE,QAAM;AACJ,IAAA,QADI;AAEJ,IAAA,SAAA,EAAW,aAFP;AAGJ,IAAA,KAHI;AAIJ,IAAA,OAJI;AAKJ,IAAA,OAAA,GAAU,QALN;AAMJ,IAAA,IANI;AAOJ,IAAA,QAPI;AAQJ,IAAA,OARI;AASJ,IAAA,SATI;AAUJ,IAAA,kBAVI;AAWJ,OAAG;AAXC,MAYF,KAZJ;AAcA,QAAM,SAAA,GAAY,QAAA,GAAW,KAAX,GAAmB,aAAA,IAAA,IAAA,GAAA,aAAA,GAAiB,QAAtD;AAEA,QAAM,YAAA,GAAe,OAAA,CACnB,MAAM,gBAAA,CAAiB;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,GAAjB,CADa,EAEnB,CAAC,OAAD,EAAU,SAAV,CAFmB,CAArB;AAKA,QAAM,UAAA,GAAa,CAAC,CAAC,OAArB;AACA,QAAM,iBAAA,GAAoB,CAAC,kBAAD,IAAuB,CAAC,UAAlD;AAEA,QAAM,MAAA,GAAS,OAAA,CAAQ,MAAM;AAC3B,UAAM,aAAA,GAAgB,gBAAA,CAAiB,QAAjB,CAAtB;AACA,WAAO,iBAAA,GACH,aADG,GAEH,aAAA,CAAc,GAAd,CAAkB,CAAC,KAAD,EAAQ,KAAR,KAAkB;AAElC,YAAM,GAAA,GAAM,OAAO,KAAA,CAAM,GAAb,KAAqB,WAArB,GAAmC,KAAA,CAAM,GAAzC,GAA+C,KAA3D;AACA,YAAM,MAAA,GAAS,KAAA,GAAQ,CAAR,KAAc,aAAA,CAAc,MAA3C;AACA,YAAM,YAAA,GAAe,eAAA,GAAA,CAAC,SAAD,EAAC;AAAqB,QAAA,QAAA,EAAA;AAArB,OAAD,EAAgB,GAAhB,CAArB;;AACA,YAAM,MAAA,GAAS,kBAAA,GAAqB,YAArB,GAAoC,KAAnD;;AAEA,UAAI,CAAC,UAAL,EAAiB,OAAO,MAAP;AAEjB,YAAM,aAAA,GAAgB,YAAA,CACpB,OADoB,EAEpB;AACE,QAAA,KAAA,EAAO;AADT,OAFoB,CAAtB;;AAOA,YAAM,QAAA,GAAW,MAAA,GAAS,IAAT,GAAgB,aAAjC;;AAEA,aACE,eAAA,IAAA,CAAC,QAAD,EAAC;AACE,QAAA,QAAA,EAAA,CAAA,MAAA,EACA,QADA;AADF,OAAD,EAAe,GAAf,CADF;AAMD,KAxBD,CAFJ;AA2BF,GA7Be,EA6BZ,CACD,OADC,EAED,YAFC,EAGD,UAHC,EAID,iBAJC,EAKD,kBALC,EAMD,QANC,CA7BY,CAAf;;AAsCA,QAAM,UAAA,GAAa,EAAA,CAAG,cAAH,EAAmB,SAAnB,CAAnB;;AAEA,SACE,eAAA,GAAA,CAAC,MAAA,CAAO,GAAR,EAAC;AACC,IAAA,GADD;AAEC,IAAA,OAAA,EAAQ,MAFT;AAGC,IAAA,UAAA,EAAY,KAHb;AAIC,IAAA,cAAA,EAAgB,OAJjB;AAKC,IAAA,aAAA,EAAe,SALhB;AAMC,IAAA,QAAA,EAAU,IANX;AAOC,IAAA,GAAA,EAAK,UAAA,GAAa,KAAA,CAAb,GAAyB,OAP/B;AAQC,IAAA,SAAA,EAAW,UARZ;AASE,OAAG,IATL;AAWE,IAAA,QAAA,EAAA;AAXF,GAAD,CADF;AAeD,CAhFoB,CAAd;AAkFP,KAAA,CAAM,WAAN,GAAoB,OAApB","sourcesContent":["import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n"]},"metadata":{},"sourceType":"module"}